{"metadata": {"dbt_schema_version": "https://schemas.getdbt.com/dbt/manifest/v7.json", "dbt_version": "1.3.1", "generated_at": "2023-01-18T20:29:42.065525Z", "invocation_id": "9df10ba7-73c5-479a-b96c-11e05661314a", "env": {}, "project_id": "228f02ae210381b07ccf62fcaa654d94", "user_id": "7acd446d-f397-41c9-9f69-07656e135a86", "send_anonymous_usage_stats": true, "adapter_type": "snowflake"}, "nodes": {"model.claims_data_model.eligibility": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "the_tuva_project_input", "database": "tuva", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#1a0707"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "the_tuva_project_input", "fqn": ["claims_data_model", "eligibility"], "unique_id": "model.claims_data_model.eligibility", "raw_code": "select patient_id\r\n       ,member_id\r\n       ,gender\r\n       ,race\r\n       ,birth_date\r\n       ,death_date\r\n       ,death_flag\r\n       ,enrollment_start_date\r\n       ,enrollment_end_date\r\n       ,payer\r\n       ,payer_type\r\n       ,dual_status_code\r\n       ,medicare_status_code\r\n       ,first_name\r\n       ,last_name\r\n       ,address\r\n       ,city\r\n       ,state\r\n       ,zip_code\r\n       ,phone\r\n       ,data_source\r\nfrom tuva_claims_demo_sample.claims_common.eligibility", "language": "sql", "package_name": "claims_data_model", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\docs_generate", "path": "eligibility.sql", "original_file_path": "models\\eligibility.sql", "name": "eligibility", "alias": "eligibility", "checksum": {"name": "sha256", "checksum": "d25ee63b3148d37f11afeeb5e053f99cc270f40f71874cefd609f04c038f721c"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "The eligibility table includes information about a patient's health insurance coverage and demographics (note: we use the word patient as a synonym for member). Every claims dataset should include some sort of eligibility data, otherwise it's impossible to calculate member months, which are needed to calculate measures like PMPM.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique identifier for each patient in the dataset.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "member_id": {"name": "member_id", "description": "Identifier that links a patient to a particular insurance product or health plan. A patient can have more than one member_id because they can have more than one insurance product/plan.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gender": {"name": "gender", "description": "Biological sex of the patient.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "race": {"name": "race", "description": "Race of the patient.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "birth_date": {"name": "birth_date", "description": "Date the patient was born.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "death_date": {"name": "death_date", "description": "Date the patient died.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "death_flag": {"name": "death_flag", "description": "Indicates whether the patient has died.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "enrollment_start_date": {"name": "enrollment_start_date", "description": "Date the patient's insurance eligibility began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "enrollment_end_date": {"name": "enrollment_end_date", "description": "Date the patient's insurance eligibility ended.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payer": {"name": "payer", "description": "Name of the payer (i.e. health insurer) providing coverage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payer_type": {"name": "payer_type", "description": "Type of payer (e.g. commercial, medicare, medicaid, etc.).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dual_status_code": {"name": "dual_status_code", "description": "Indicates whether the patient is dually eligible for Medicare and Medicaid.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "medicare_status_code": {"name": "medicare_status_code", "description": "Indicates how the patient became eligible for Medicare.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_name": {"name": "first_name", "description": "Patient's first name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_name": {"name": "last_name", "description": "Patient's last name.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "address": {"name": "address", "description": "Patient's street address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "city": {"name": "city", "description": "Patient's city of address.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "state": {"name": "state", "description": "State the patient lives in (most recent known address)", "meta": {}, "data_type": null, "quote": null, "tags": []}, "zip_code": {"name": "zip_code", "description": "Zip code the patient lives in (most recent known address).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "phone": {"name": "phone", "description": "Patient's phone number.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_source": {"name": "data_source", "description": "User-configured field that indicates the data source (e.g. typically named after the payer and state \"BCBS Tennessee\").", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": "#1a0707"}, "patch_path": "claims_data_model://models\\_models.yml", "compiled_path": "../target\\compiled\\claims_data_model\\models\\eligibility.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "docs": {"node_color": "#1a0707"}, "database": "tuva", "schema": "the_tuva_project_input"}, "created_at": 1674073788.7272933, "compiled_code": "select patient_id\r\n       ,member_id\r\n       ,gender\r\n       ,race\r\n       ,birth_date\r\n       ,death_date\r\n       ,death_flag\r\n       ,enrollment_start_date\r\n       ,enrollment_end_date\r\n       ,payer\r\n       ,payer_type\r\n       ,dual_status_code\r\n       ,medicare_status_code\r\n       ,first_name\r\n       ,last_name\r\n       ,address\r\n       ,city\r\n       ,state\r\n       ,zip_code\r\n       ,phone\r\n       ,data_source\r\nfrom tuva_claims_demo_sample.claims_common.eligibility", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.the_tuva_project_input.eligibility"}, "model.claims_data_model.medical_claim": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "the_tuva_project_input", "database": "tuva", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#1a0707"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "the_tuva_project_input", "fqn": ["claims_data_model", "medical_claim"], "unique_id": "model.claims_data_model.medical_claim", "raw_code": "select claim_id\r\n       ,claim_line_number\r\n       ,claim_type\r\n       ,patient_id\r\n       ,member_id\r\n       ,claim_start_date\r\n       ,claim_end_date\r\n       ,claim_line_start_date\r\n       ,claim_line_end_date\r\n       ,admission_date\r\n       ,discharge_date\r\n       ,admit_source_code\r\n       ,admit_type_code\r\n       ,discharge_disposition_code\r\n       ,place_of_service_code\r\n       ,bill_type_code\r\n       ,ms_drg_code\r\n       ,revenue_center_code\r\n       ,service_unit_quantity\r\n       ,hcpcs_code\r\n       ,hcpcs_modifier_1\r\n       ,hcpcs_modifier_2\r\n       ,hcpcs_modifier_3\r\n       ,hcpcs_modifier_4\r\n       ,hcpcs_modifier_5\r\n       ,rendering_npi\r\n       ,billing_npi\r\n       ,facility_npi\r\n       ,paid_date\r\n       ,paid_amount\r\n       ,allowed_amount\r\n       ,charge_amount\r\n       ,diagnosis_code_type\r\n       ,diagnosis_code_1\r\n       ,diagnosis_code_2\r\n       ,diagnosis_code_3\r\n       ,diagnosis_code_4\r\n       ,diagnosis_code_5\r\n       ,diagnosis_code_6\r\n       ,diagnosis_code_7\r\n       ,diagnosis_code_8\r\n       ,diagnosis_code_9\r\n       ,diagnosis_code_10\r\n       ,diagnosis_code_11\r\n       ,diagnosis_code_12\r\n       ,diagnosis_code_13\r\n       ,diagnosis_code_14\r\n       ,diagnosis_code_15\r\n       ,diagnosis_code_16\r\n       ,diagnosis_code_17\r\n       ,diagnosis_code_18\r\n       ,diagnosis_code_19\r\n       ,diagnosis_code_20\r\n       ,diagnosis_code_21\r\n       ,diagnosis_code_22\r\n       ,diagnosis_code_23\r\n       ,diagnosis_code_24\r\n       ,diagnosis_code_25\r\n       ,diagnosis_poa_1\r\n       ,diagnosis_poa_2\r\n       ,diagnosis_poa_3\r\n       ,diagnosis_poa_4\r\n       ,diagnosis_poa_5\r\n       ,diagnosis_poa_6\r\n       ,diagnosis_poa_7\r\n       ,diagnosis_poa_8\r\n       ,diagnosis_poa_9\r\n       ,diagnosis_poa_10\r\n       ,diagnosis_poa_11\r\n       ,diagnosis_poa_12\r\n       ,diagnosis_poa_13\r\n       ,diagnosis_poa_14\r\n       ,diagnosis_poa_15\r\n       ,diagnosis_poa_16\r\n       ,diagnosis_poa_17\r\n       ,diagnosis_poa_18\r\n       ,diagnosis_poa_19\r\n       ,diagnosis_poa_20\r\n       ,diagnosis_poa_21\r\n       ,diagnosis_poa_22\r\n       ,diagnosis_poa_23\r\n       ,diagnosis_poa_24\r\n       ,diagnosis_poa_25\r\n       ,procedure_code_type\r\n       ,procedure_code_1\r\n       ,procedure_code_2\r\n       ,procedure_code_3\r\n       ,procedure_code_4\r\n       ,procedure_code_5\r\n       ,procedure_code_6\r\n       ,procedure_code_7\r\n       ,procedure_code_8\r\n       ,procedure_code_9\r\n       ,procedure_code_10\r\n       ,procedure_code_11\r\n       ,procedure_code_12\r\n       ,procedure_code_13\r\n       ,procedure_code_14\r\n       ,procedure_code_15\r\n       ,procedure_code_16\r\n       ,procedure_code_17\r\n       ,procedure_code_18\r\n       ,procedure_code_19\r\n       ,procedure_code_20\r\n       ,procedure_code_21\r\n       ,procedure_code_22\r\n       ,procedure_code_23\r\n       ,procedure_code_24\r\n       ,procedure_code_25\r\n       ,procedure_date_1\r\n       ,procedure_date_2\r\n       ,procedure_date_3\r\n       ,procedure_date_4\r\n       ,procedure_date_5\r\n       ,procedure_date_6\r\n       ,procedure_date_7\r\n       ,procedure_date_8\r\n       ,procedure_date_9\r\n       ,procedure_date_10\r\n       ,procedure_date_11\r\n       ,procedure_date_12\r\n       ,procedure_date_13\r\n       ,procedure_date_14\r\n       ,procedure_date_15\r\n       ,procedure_date_16\r\n       ,procedure_date_17\r\n       ,procedure_date_18\r\n       ,procedure_date_19\r\n       ,procedure_date_20\r\n       ,procedure_date_21\r\n       ,procedure_date_22\r\n       ,procedure_date_23\r\n       ,procedure_date_24\r\n       ,procedure_date_25\r\n       ,data_source\r\nfrom tuva_claims_demo_sample.claims_common.medical_claim", "language": "sql", "package_name": "claims_data_model", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\docs_generate", "path": "medical_claim.sql", "original_file_path": "models\\medical_claim.sql", "name": "medical_claim", "alias": "medical_claim", "checksum": {"name": "sha256", "checksum": "d8da58a64f52d2af58f7d6f09dd2f34e0392ba34605ba886eda57d863efc4ba6"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "The medical_claim table contains information on healthcare services and supplies provided to patients, billed by providers, and paid for by health insurers. It includes information on the provider who rendered the service, the amount paid for the service by the health insurer, and the underlying reason for the service (i.e. diagnosis).\n", "columns": {"claim_id": {"name": "claim_id", "description": "Unique identifier for each claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "claim_line_number": {"name": "claim_line_number", "description": "Indicates the line number for the particular line of the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "claim_type": {"name": "claim_type", "description": "Indicates whether the claim is professional (CMS-1500), institutional (UB-04), dental, or vision.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "patient_id": {"name": "patient_id", "description": "Unique identifier for each patient in the dataset.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "member_id": {"name": "member_id", "description": "Identifier that links a patient to a particular insurance product or health plan. A patient can have more than one member_id because they can have more than one insurance product/plan.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "claim_start_date": {"name": "claim_start_date", "description": "Start date for the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "claim_end_date": {"name": "claim_end_date", "description": "End date for the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "claim_line_start_date": {"name": "claim_line_start_date", "description": "Start date for the claim line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "claim_line_end_date": {"name": "claim_line_end_date", "description": "End date for the claim line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "admission_date": {"name": "admission_date", "description": "Admission date for the claim (inpatient claims only).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discharge_date": {"name": "discharge_date", "description": "Discharge date for the claim (inpatient claims only).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "admit_source_code": {"name": "admit_source_code", "description": "Indicates where the patient was before the healthcare encounter (inpatient claims only).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "admit_type_code": {"name": "admit_type_code", "description": "Indicates the type of admission (inpatient claims only).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discharge_disposition_code": {"name": "discharge_disposition_code", "description": "Indicates the type of setting the patient was discharged to (institutional inpatient claims only).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "place_of_service_code": {"name": "place_of_service_code", "description": "Place of service for the claim (professional claims only).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bill_type_code": {"name": "bill_type_code", "description": "Bill type code for the claim (institutional claims only).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ms_drg_code": {"name": "ms_drg_code", "description": "MS-DRG for the claim (inpatient claims only).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "revenue_center_code": {"name": "revenue_center_code", "description": "Revenue center code for the claim line (institutional only and typically multiple codes per claim).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "service_unit_quantity": {"name": "service_unit_quantity", "description": "The number of units for the particular revenue center code.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hcpcs_code": {"name": "hcpcs_code", "description": "HCPCS level 1 or level 2 code for the claim line.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hcpcs_modifier_1": {"name": "hcpcs_modifier_1", "description": "1st modifier for HCPCS code.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hcpcs_modifier_2": {"name": "hcpcs_modifier_2", "description": "2nd modifier for HCPCS code.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hcpcs_modifier_3": {"name": "hcpcs_modifier_3", "description": "3rd modifier for HCPCS code.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hcpcs_modifier_4": {"name": "hcpcs_modifier_4", "description": "4th modifier for HCPCS code.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hcpcs_modifier_5": {"name": "hcpcs_modifier_5", "description": "5th modifier for HCPCS code.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rendering_npi": {"name": "rendering_npi", "description": "Rendering NPI for the claim (typically represents the physician or entity providing services).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "billing_npi": {"name": "billing_npi", "description": "Billing NPI for the claim (typically represents organization billing the claim).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "facility_npi": {"name": "facility_npi", "description": "Facility NPI for the claim (typically represents the facility where services were performed).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "paid_date": {"name": "paid_date", "description": "The date the claim was paid.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "paid_amount": {"name": "paid_amount", "description": "The total amount paid on the claim by the insurer.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "allowed_amount": {"name": "allowed_amount", "description": "The total amount allowed (includes amount paid by the insurer and patient) on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "charge_amount": {"name": "charge_amount", "description": "The total amount charged on the claim by the provider.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_type": {"name": "diagnosis_code_type", "description": "Indicates the type of diagnosis code (e.g. ICD-10-CM).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_1": {"name": "diagnosis_code_1", "description": "1st ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_2": {"name": "diagnosis_code_2", "description": "2nd ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_3": {"name": "diagnosis_code_3", "description": "3rd ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_4": {"name": "diagnosis_code_4", "description": "4th ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_5": {"name": "diagnosis_code_5", "description": "5th ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_6": {"name": "diagnosis_code_6", "description": "6th ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_7": {"name": "diagnosis_code_7", "description": "7th ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_8": {"name": "diagnosis_code_8", "description": "8th ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_9": {"name": "diagnosis_code_9", "description": "9th ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_10": {"name": "diagnosis_code_10", "description": "10th ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_11": {"name": "diagnosis_code_11", "description": "11th ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_12": {"name": "diagnosis_code_12", "description": "12th ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_13": {"name": "diagnosis_code_13", "description": "13th ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_14": {"name": "diagnosis_code_14", "description": "14th ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_15": {"name": "diagnosis_code_15", "description": "15th ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_16": {"name": "diagnosis_code_16", "description": "16th ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_17": {"name": "diagnosis_code_17", "description": "17th ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_18": {"name": "diagnosis_code_18", "description": "18th ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_19": {"name": "diagnosis_code_19", "description": "19th ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_20": {"name": "diagnosis_code_20", "description": "20th ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_21": {"name": "diagnosis_code_21", "description": "21st ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_22": {"name": "diagnosis_code_22", "description": "22nd ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_23": {"name": "diagnosis_code_23", "description": "23rd ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_24": {"name": "diagnosis_code_24", "description": "24th ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code_25": {"name": "diagnosis_code_25", "description": "25th ICD (9 or 10) CM diagnosis code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_1": {"name": "diagnosis_poa_1", "description": "Present on admission code for the 1st diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_2": {"name": "diagnosis_poa_2", "description": "Present on admission code for the 2nd diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_3": {"name": "diagnosis_poa_3", "description": "Present on admission code for the 3rd diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_4": {"name": "diagnosis_poa_4", "description": "Present on admission code for the 4th diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_5": {"name": "diagnosis_poa_5", "description": "Present on admission code for the 5th diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_6": {"name": "diagnosis_poa_6", "description": "Present on admission code for the 6th diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_7": {"name": "diagnosis_poa_7", "description": "Present on admission code for the 7th diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_8": {"name": "diagnosis_poa_8", "description": "Present on admission code for the 8th diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_9": {"name": "diagnosis_poa_9", "description": "Present on admission code for the 9th diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_10": {"name": "diagnosis_poa_10", "description": "Present on admission code for the 10th diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_11": {"name": "diagnosis_poa_11", "description": "Present on admission code for the 11th diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_12": {"name": "diagnosis_poa_12", "description": "Present on admission code for the 12th diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_13": {"name": "diagnosis_poa_13", "description": "Present on admission code for the 13th diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_14": {"name": "diagnosis_poa_14", "description": "Present on admission code for the 14th diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_15": {"name": "diagnosis_poa_15", "description": "Present on admission code for the 15th diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_16": {"name": "diagnosis_poa_16", "description": "Present on admission code for the 16th diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_17": {"name": "diagnosis_poa_17", "description": "Present on admission code for the 17th diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_18": {"name": "diagnosis_poa_18", "description": "Present on admission code for the 18th diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_19": {"name": "diagnosis_poa_19", "description": "Present on admission code for the 19th diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_20": {"name": "diagnosis_poa_20", "description": "Present on admission code for the 20th diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_21": {"name": "diagnosis_poa_21", "description": "Present on admission code for the 21st diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_22": {"name": "diagnosis_poa_22", "description": "Present on admission code for the 22nd diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_23": {"name": "diagnosis_poa_23", "description": "Present on admission code for the 23rd diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_24": {"name": "diagnosis_poa_24", "description": "Present on admission code for the 24th diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_poa_25": {"name": "diagnosis_poa_25", "description": "Present on admission code for the 25th diagnosis on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_type": {"name": "procedure_code_type", "description": "Indicates the type of procedure code (e.g. ICD-10-PCS).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_1": {"name": "procedure_code_1", "description": "1st ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_2": {"name": "procedure_code_2", "description": "2nd ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_3": {"name": "procedure_code_3", "description": "3rd ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_4": {"name": "procedure_code_4", "description": "4th ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_5": {"name": "procedure_code_5", "description": "5th ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_6": {"name": "procedure_code_6", "description": "6th ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_7": {"name": "procedure_code_7", "description": "7th ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_8": {"name": "procedure_code_8", "description": "8th ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_9": {"name": "procedure_code_9", "description": "9th ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_10": {"name": "procedure_code_10", "description": "10th ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_11": {"name": "procedure_code_11", "description": "11th ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_12": {"name": "procedure_code_12", "description": "12th ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_13": {"name": "procedure_code_13", "description": "13th ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_14": {"name": "procedure_code_14", "description": "14th ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_15": {"name": "procedure_code_15", "description": "15th ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_16": {"name": "procedure_code_16", "description": "16th ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_17": {"name": "procedure_code_17", "description": "17th ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_18": {"name": "procedure_code_18", "description": "18th ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_19": {"name": "procedure_code_19", "description": "19th ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_20": {"name": "procedure_code_20", "description": "20th ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_21": {"name": "procedure_code_21", "description": "21st ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_22": {"name": "procedure_code_22", "description": "22nd ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_23": {"name": "procedure_code_23", "description": "23rd ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_24": {"name": "procedure_code_24", "description": "24th ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code_25": {"name": "procedure_code_25", "description": "25th ICD (9 or 10) procedure code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_1": {"name": "procedure_date_1", "description": "Date of the 1st procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_2": {"name": "procedure_date_2", "description": "Date of the 2nd procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_3": {"name": "procedure_date_3", "description": "Date of the 3rd procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_4": {"name": "procedure_date_4", "description": "Date of the 4th procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_5": {"name": "procedure_date_5", "description": "Date of the 5th procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_6": {"name": "procedure_date_6", "description": "Date of the 6th procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_7": {"name": "procedure_date_7", "description": "Date of the 7th procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_8": {"name": "procedure_date_8", "description": "Date of the 8th procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_9": {"name": "procedure_date_9", "description": "Date of the 9th procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_10": {"name": "procedure_date_10", "description": "Date of the 10th procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_11": {"name": "procedure_date_11", "description": "Date of the 11th procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_12": {"name": "procedure_date_12", "description": "Date of the 12th procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_13": {"name": "procedure_date_13", "description": "Date of the 13th procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_14": {"name": "procedure_date_14", "description": "Date of the 14th procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_15": {"name": "procedure_date_15", "description": "Date of the 15th procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_16": {"name": "procedure_date_16", "description": "Date of the 16th procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_17": {"name": "procedure_date_17", "description": "Date of the 17th procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_18": {"name": "procedure_date_18", "description": "Date of the 18th procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_19": {"name": "procedure_date_19", "description": "Date of the 19th procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_20": {"name": "procedure_date_20", "description": "Date of the 20th procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_21": {"name": "procedure_date_21", "description": "Date of the 21st procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_22": {"name": "procedure_date_22", "description": "Date of the 22nd procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_23": {"name": "procedure_date_23", "description": "Date of the 23rd procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_24": {"name": "procedure_date_24", "description": "Date of the 24th procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_date_25": {"name": "procedure_date_25", "description": "Date of the 25th procedure on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_source": {"name": "data_source", "description": "User-configured field that indicates the data source (e.g. typically named after the payer and state \"BCBS Tennessee\").", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": "#1a0707"}, "patch_path": "claims_data_model://models\\_models.yml", "compiled_path": "../target\\compiled\\claims_data_model\\models\\medical_claim.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "docs": {"node_color": "#1a0707"}, "database": "tuva", "schema": "the_tuva_project_input"}, "created_at": 1674073788.959914, "compiled_code": "select claim_id\r\n       ,claim_line_number\r\n       ,claim_type\r\n       ,patient_id\r\n       ,member_id\r\n       ,claim_start_date\r\n       ,claim_end_date\r\n       ,claim_line_start_date\r\n       ,claim_line_end_date\r\n       ,admission_date\r\n       ,discharge_date\r\n       ,admit_source_code\r\n       ,admit_type_code\r\n       ,discharge_disposition_code\r\n       ,place_of_service_code\r\n       ,bill_type_code\r\n       ,ms_drg_code\r\n       ,revenue_center_code\r\n       ,service_unit_quantity\r\n       ,hcpcs_code\r\n       ,hcpcs_modifier_1\r\n       ,hcpcs_modifier_2\r\n       ,hcpcs_modifier_3\r\n       ,hcpcs_modifier_4\r\n       ,hcpcs_modifier_5\r\n       ,rendering_npi\r\n       ,billing_npi\r\n       ,facility_npi\r\n       ,paid_date\r\n       ,paid_amount\r\n       ,allowed_amount\r\n       ,charge_amount\r\n       ,diagnosis_code_type\r\n       ,diagnosis_code_1\r\n       ,diagnosis_code_2\r\n       ,diagnosis_code_3\r\n       ,diagnosis_code_4\r\n       ,diagnosis_code_5\r\n       ,diagnosis_code_6\r\n       ,diagnosis_code_7\r\n       ,diagnosis_code_8\r\n       ,diagnosis_code_9\r\n       ,diagnosis_code_10\r\n       ,diagnosis_code_11\r\n       ,diagnosis_code_12\r\n       ,diagnosis_code_13\r\n       ,diagnosis_code_14\r\n       ,diagnosis_code_15\r\n       ,diagnosis_code_16\r\n       ,diagnosis_code_17\r\n       ,diagnosis_code_18\r\n       ,diagnosis_code_19\r\n       ,diagnosis_code_20\r\n       ,diagnosis_code_21\r\n       ,diagnosis_code_22\r\n       ,diagnosis_code_23\r\n       ,diagnosis_code_24\r\n       ,diagnosis_code_25\r\n       ,diagnosis_poa_1\r\n       ,diagnosis_poa_2\r\n       ,diagnosis_poa_3\r\n       ,diagnosis_poa_4\r\n       ,diagnosis_poa_5\r\n       ,diagnosis_poa_6\r\n       ,diagnosis_poa_7\r\n       ,diagnosis_poa_8\r\n       ,diagnosis_poa_9\r\n       ,diagnosis_poa_10\r\n       ,diagnosis_poa_11\r\n       ,diagnosis_poa_12\r\n       ,diagnosis_poa_13\r\n       ,diagnosis_poa_14\r\n       ,diagnosis_poa_15\r\n       ,diagnosis_poa_16\r\n       ,diagnosis_poa_17\r\n       ,diagnosis_poa_18\r\n       ,diagnosis_poa_19\r\n       ,diagnosis_poa_20\r\n       ,diagnosis_poa_21\r\n       ,diagnosis_poa_22\r\n       ,diagnosis_poa_23\r\n       ,diagnosis_poa_24\r\n       ,diagnosis_poa_25\r\n       ,procedure_code_type\r\n       ,procedure_code_1\r\n       ,procedure_code_2\r\n       ,procedure_code_3\r\n       ,procedure_code_4\r\n       ,procedure_code_5\r\n       ,procedure_code_6\r\n       ,procedure_code_7\r\n       ,procedure_code_8\r\n       ,procedure_code_9\r\n       ,procedure_code_10\r\n       ,procedure_code_11\r\n       ,procedure_code_12\r\n       ,procedure_code_13\r\n       ,procedure_code_14\r\n       ,procedure_code_15\r\n       ,procedure_code_16\r\n       ,procedure_code_17\r\n       ,procedure_code_18\r\n       ,procedure_code_19\r\n       ,procedure_code_20\r\n       ,procedure_code_21\r\n       ,procedure_code_22\r\n       ,procedure_code_23\r\n       ,procedure_code_24\r\n       ,procedure_code_25\r\n       ,procedure_date_1\r\n       ,procedure_date_2\r\n       ,procedure_date_3\r\n       ,procedure_date_4\r\n       ,procedure_date_5\r\n       ,procedure_date_6\r\n       ,procedure_date_7\r\n       ,procedure_date_8\r\n       ,procedure_date_9\r\n       ,procedure_date_10\r\n       ,procedure_date_11\r\n       ,procedure_date_12\r\n       ,procedure_date_13\r\n       ,procedure_date_14\r\n       ,procedure_date_15\r\n       ,procedure_date_16\r\n       ,procedure_date_17\r\n       ,procedure_date_18\r\n       ,procedure_date_19\r\n       ,procedure_date_20\r\n       ,procedure_date_21\r\n       ,procedure_date_22\r\n       ,procedure_date_23\r\n       ,procedure_date_24\r\n       ,procedure_date_25\r\n       ,data_source\r\nfrom tuva_claims_demo_sample.claims_common.medical_claim", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.the_tuva_project_input.medical_claim"}, "model.claims_data_model.pharmacy_claim": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": null, "schema": "the_tuva_project_input", "database": "tuva", "tags": [], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#1a0707"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "the_tuva_project_input", "fqn": ["claims_data_model", "pharmacy_claim"], "unique_id": "model.claims_data_model.pharmacy_claim", "raw_code": "select\r\n    claim_id\r\n    , claim_line_number\r\n    , patient_id\r\n    , member_id\r\n    , prescribing_provider_npi\r\n    , dispensing_provider_npi\r\n    , dispensing_date\r\n    , ndc_code\r\n    , quantity\r\n    , days_supply\r\n    , refills\r\n    , paid_date\r\n    , paid_amount\r\n    , allowed_amount\r\n    , data_source\r\nfrom tuva_claims_demo_sample.claims_common.pharmacy_claim", "language": "sql", "package_name": "claims_data_model", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\docs_generate", "path": "pharmacy_claim.sql", "original_file_path": "models\\pharmacy_claim.sql", "name": "pharmacy_claim", "alias": "pharmacy_claim", "checksum": {"name": "sha256", "checksum": "1ae7699e5270ab252e764d627bc9f336657fe63eae3b8b35796d40528974e6c6"}, "tags": [], "refs": [], "sources": [], "metrics": [], "description": "The pharmacy_claim table includes information about retail and specialty drug prescriptions that have been filled by a patient, billed by a pharmacy, and paid by an insurer.\n", "columns": {"claim_id": {"name": "claim_id", "description": "Unique identifier for each claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "claim_line_number": {"name": "claim_line_number", "description": "Indicates the line number for the particular line of the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "patient_id": {"name": "patient_id", "description": "Unique identifier for each patient in the dataset.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "member_id": {"name": "member_id", "description": "Identifier that links a patient to a particular insurance product or health plan. A patient can have more than one member_id because they can have more than one insurance product/plan.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "prescribing_provider_npi": {"name": "prescribing_provider_npi", "description": "NPI for the provider that wrote the prescription (e.g. priamry care physician).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dispensing_provider_npi": {"name": "dispensing_provider_npi", "description": "NPI for the provider that dispensed the prescription (e.g. pharmacy).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "dispensing_date": {"name": "dispensing_date", "description": "Date the prescription was filled.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ndc_code": {"name": "ndc_code", "description": "National drug code on the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "quantity": {"name": "quantity", "description": "Number of doses.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "days_supply": {"name": "days_supply", "description": "Number of days supply.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "refills": {"name": "refills", "description": "Number of refills for the prescription.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "paid_date": {"name": "paid_date", "description": "Date the claim was paid.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "paid_amount": {"name": "paid_amount", "description": "Amount paid by the health insurer for the claim.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "allowed_amount": {"name": "allowed_amount", "description": "Contractual amount allowed to be paid by the payer + patient.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_source": {"name": "data_source", "description": "User-configured field that indicates the data source (e.g. typically named after the payer and state \"BCBS Tennessee\").", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": "#1a0707"}, "patch_path": "claims_data_model://models\\_models.yml", "compiled_path": "../target\\compiled\\claims_data_model\\models\\pharmacy_claim.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "view", "docs": {"node_color": "#1a0707"}, "database": "tuva", "schema": "the_tuva_project_input"}, "created_at": 1674073788.9764352, "compiled_code": "select\r\n    claim_id\r\n    , claim_line_number\r\n    , patient_id\r\n    , member_id\r\n    , prescribing_provider_npi\r\n    , dispensing_provider_npi\r\n    , dispensing_date\r\n    , ndc_code\r\n    , quantity\r\n    , days_supply\r\n    , refills\r\n    , paid_date\r\n    , paid_amount\r\n    , allowed_amount\r\n    , data_source\r\nfrom tuva_claims_demo_sample.claims_common.pharmacy_claim", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.the_tuva_project_input.pharmacy_claim"}, "model.claims_preprocessing.claims_preprocessing__condition": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "seed.terminology.terminology__icd_10_cm", "seed.terminology.terminology__present_on_admission"]}, "config": {"enabled": true, "alias": "condition", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#0f3d0b"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "claims_preprocessing__condition"], "unique_id": "model.claims_preprocessing.claims_preprocessing__condition", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))\n   )\n}}\n\nwith unpivot_cte as (\n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_1 as code,\n  1 as diagnosis_rank,\n  aa.diagnosis_poa_1 as present_on_admit_code,\n  aa.data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere aa.diagnosis_code_1 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_2 as code,\n  2 as diagnosis_rank,\n  aa.diagnosis_poa_2 as present_on_admit_code,\n  aa.data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere aa.diagnosis_code_2 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_3 as code,\n  3 as diagnosis_rank,\n  aa.diagnosis_poa_3 as present_on_admit_code,\n  aa.data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere aa.diagnosis_code_3 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_4 as code,\n  4 as diagnosis_rank,\n  aa.diagnosis_poa_4 as present_on_admit_code,\n  aa.data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere aa.diagnosis_code_4 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_5 as code,\n  5 as diagnosis_rank,\n  aa.diagnosis_poa_5 as present_on_admit_code,\n  aa.data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere aa.diagnosis_code_5 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_6 as code,\n  6 as diagnosis_rank,\n  aa.diagnosis_poa_6 as present_on_admit_code,\n  aa.data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere aa.diagnosis_code_6 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_7 as code,\n  7 as diagnosis_rank,\n  aa.diagnosis_poa_7 as present_on_admit_code,\n  aa.data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere aa.diagnosis_code_7 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_8 as code,\n  8 as diagnosis_rank,\n  aa.diagnosis_poa_8 as present_on_admit_code,\n  aa.data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere aa.diagnosis_code_8 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_9 as code,\n  9 as diagnosis_rank,\n  aa.diagnosis_poa_9 as present_on_admit_code,\n  aa.data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere aa.diagnosis_code_9 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_10 as code,\n  10 as diagnosis_rank,\n  aa.diagnosis_poa_10 as present_on_admit_code,\n  aa.data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere aa.diagnosis_code_10 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_11 as code,\n  11 as diagnosis_rank,\n  aa.diagnosis_poa_11 as present_on_admit_code,\n  aa.data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere aa.diagnosis_code_11 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_12 as code,\n  12 as diagnosis_rank,\n  aa.diagnosis_poa_12 as present_on_admit_code,\n  aa.data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere aa.diagnosis_code_12 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_13 as code,\n  13 as diagnosis_rank,\n  aa.diagnosis_poa_13 as present_on_admit_code,\n  aa.data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere aa.diagnosis_code_13 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_14 as code,\n  14 as diagnosis_rank,\n  aa.diagnosis_poa_14 as present_on_admit_code,\n  aa.data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere aa.diagnosis_code_14 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_15 as code,\n  15 as diagnosis_rank,\n  aa.diagnosis_poa_15 as present_on_admit_code,\n  aa.data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere aa.diagnosis_code_15 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_16 as code,\n  16 as diagnosis_rank,\n  aa.diagnosis_poa_16 as present_on_admit_code,\n  aa.data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere aa.diagnosis_code_16 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_17 as code,\n  17 as diagnosis_rank,\n  aa.diagnosis_poa_17 as present_on_admit_code,\n  aa.data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere aa.diagnosis_code_17 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_18 as code,\n  18 as diagnosis_rank,\n  aa.diagnosis_poa_18 as present_on_admit_code,\n  aa.data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere aa.diagnosis_code_18 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_19 as code,\n  19 as diagnosis_rank,\n  aa.diagnosis_poa_19 as present_on_admit_code,\n  aa.data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere aa.diagnosis_code_19 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_20 as code,\n  20 as diagnosis_rank,\n  aa.diagnosis_poa_20 as present_on_admit_code,\n  aa.data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere aa.diagnosis_code_20 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_21 as code,\n  21 as diagnosis_rank,\n  aa.diagnosis_poa_21 as present_on_admit_code,\n  aa.data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere aa.diagnosis_code_21 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_22 as code,\n  22 as diagnosis_rank,\n  aa.diagnosis_poa_22 as present_on_admit_code,\n  aa.data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere aa.diagnosis_code_22 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_23 as code,\n  23 as diagnosis_rank,\n  aa.diagnosis_poa_23 as present_on_admit_code,\n  aa.data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere aa.diagnosis_code_23 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_24 as code,\n  24 as diagnosis_rank,\n  aa.diagnosis_poa_24 as present_on_admit_code,\n  aa.data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere aa.diagnosis_code_24 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_25 as code,\n  25 as diagnosis_rank,\n  aa.diagnosis_poa_25 as present_on_admit_code,\n  aa.data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere aa.diagnosis_code_25 is not null\n\n)\n\n\n\nselect distinct\n  unpivot_cte.encounter_id,\n  unpivot_cte.claim_id,\n  unpivot_cte.patient_id,\n  unpivot_cte.condition_date as condition_date,\n  unpivot_cte.condition_type as condition_type,\n  unpivot_cte.code_type as code_type,\n  unpivot_cte.code as code,\n  icd.short_description as description,\n  unpivot_cte.diagnosis_rank as diagnosis_rank,\n  unpivot_cte.present_on_admit_code as present_on_admit_code,\n  poa.present_on_admit_description as present_on_admit_description,\n  unpivot_cte.data_source as data_source\nfrom unpivot_cte\n     left join {{ ref('terminology__icd_10_cm') }} icd\n     on unpivot_cte.code = icd.icd_10_cm\n     left join {{ ref('terminology__present_on_admission') }} as poa\n     on unpivot_cte.present_on_admit_code = poa.present_on_admit_code", "language": "sql", "package_name": "claims_preprocessing", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\claims_preprocessing", "path": "claims_preprocessing__condition.sql", "original_file_path": "models\\claims_preprocessing__condition.sql", "name": "claims_preprocessing__condition", "alias": "condition", "checksum": {"name": "sha256", "checksum": "02c91f6080f14d85e1bce67e4ad69507dc43561f05e2f6f4b5efc28aafb1764a"}, "tags": ["claims_preprocessing"], "refs": [["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["terminology__icd_10_cm"], ["terminology__present_on_admission"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#0f3d0b"}, "patch_path": "claims_preprocessing://models\\_models.yml", "compiled_path": "../target\\compiled\\claims_preprocessing\\models\\claims_preprocessing__condition.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "condition", "tags": "claims_preprocessing", "enabled": true, "docs": {"node_color": "#0f3d0b"}}, "created_at": 1674073789.0418358, "compiled_code": "\n\nwith unpivot_cte as (\n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_1 as code,\n  1 as diagnosis_rank,\n  aa.diagnosis_poa_1 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_1 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_2 as code,\n  2 as diagnosis_rank,\n  aa.diagnosis_poa_2 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_2 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_3 as code,\n  3 as diagnosis_rank,\n  aa.diagnosis_poa_3 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_3 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_4 as code,\n  4 as diagnosis_rank,\n  aa.diagnosis_poa_4 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_4 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_5 as code,\n  5 as diagnosis_rank,\n  aa.diagnosis_poa_5 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_5 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_6 as code,\n  6 as diagnosis_rank,\n  aa.diagnosis_poa_6 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_6 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_7 as code,\n  7 as diagnosis_rank,\n  aa.diagnosis_poa_7 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_7 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_8 as code,\n  8 as diagnosis_rank,\n  aa.diagnosis_poa_8 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_8 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_9 as code,\n  9 as diagnosis_rank,\n  aa.diagnosis_poa_9 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_9 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_10 as code,\n  10 as diagnosis_rank,\n  aa.diagnosis_poa_10 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_10 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_11 as code,\n  11 as diagnosis_rank,\n  aa.diagnosis_poa_11 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_11 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_12 as code,\n  12 as diagnosis_rank,\n  aa.diagnosis_poa_12 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_12 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_13 as code,\n  13 as diagnosis_rank,\n  aa.diagnosis_poa_13 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_13 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_14 as code,\n  14 as diagnosis_rank,\n  aa.diagnosis_poa_14 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_14 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_15 as code,\n  15 as diagnosis_rank,\n  aa.diagnosis_poa_15 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_15 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_16 as code,\n  16 as diagnosis_rank,\n  aa.diagnosis_poa_16 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_16 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_17 as code,\n  17 as diagnosis_rank,\n  aa.diagnosis_poa_17 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_17 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_18 as code,\n  18 as diagnosis_rank,\n  aa.diagnosis_poa_18 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_18 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_19 as code,\n  19 as diagnosis_rank,\n  aa.diagnosis_poa_19 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_19 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_20 as code,\n  20 as diagnosis_rank,\n  aa.diagnosis_poa_20 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_20 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_21 as code,\n  21 as diagnosis_rank,\n  aa.diagnosis_poa_21 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_21 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_22 as code,\n  22 as diagnosis_rank,\n  aa.diagnosis_poa_22 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_22 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_23 as code,\n  23 as diagnosis_rank,\n  aa.diagnosis_poa_23 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_23 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_24 as code,\n  24 as diagnosis_rank,\n  aa.diagnosis_poa_24 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_24 is not null\n\nunion all \n\nselect\n  aa.encounter_id,\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date as condition_date,\n  'discharge_diagnosis' as condition_type,\n  aa.diagnosis_code_type as code_type,\n  aa.diagnosis_code_25 as code,\n  25 as diagnosis_rank,\n  aa.diagnosis_poa_25 as present_on_admit_code,\n  aa.data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere aa.diagnosis_code_25 is not null\n\n)\n\n\n\nselect distinct\n  unpivot_cte.encounter_id,\n  unpivot_cte.claim_id,\n  unpivot_cte.patient_id,\n  unpivot_cte.condition_date as condition_date,\n  unpivot_cte.condition_type as condition_type,\n  unpivot_cte.code_type as code_type,\n  unpivot_cte.code as code,\n  icd.short_description as description,\n  unpivot_cte.diagnosis_rank as diagnosis_rank,\n  unpivot_cte.present_on_admit_code as present_on_admit_code,\n  poa.present_on_admit_description as present_on_admit_description,\n  unpivot_cte.data_source as data_source\nfrom unpivot_cte\n     left join tuva.terminology.icd_10_cm icd\n     on unpivot_cte.code = icd.icd_10_cm\n     left join tuva.terminology.present_on_admission as poa\n     on unpivot_cte.present_on_admit_code = poa.present_on_admit_code", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.condition"}, "model.claims_preprocessing.claims_preprocessing__encounter": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "seed.terminology.terminology__admit_source", "seed.terminology.terminology__admit_type", "seed.terminology.terminology__discharge_disposition", "seed.terminology.terminology__ms_drg"]}, "config": {"enabled": true, "alias": "encounter", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#0f3d0b"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "claims_preprocessing__encounter"], "unique_id": "model.claims_preprocessing.claims_preprocessing__encounter", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))\n   )\n}}\n\n\n\n\nwith table_without_descriptions as (\nselect\n  encounter_id,\n  max(patient_id) as patient_id,\n  max(encounter_type) as encounter_type,\n  max(encounter_start_date) as encounter_start_date,\n  max(encounter_end_date) as encounter_end_date,\n  max(admission_date) as admission_date,\n  min(discharge_date) as discharge_date,\n  max(encounter_admit_source_code) as admit_source_code,\n  max(encounter_admit_type_code) as admit_type_code,\n  max(encounter_discharge_disposition_code) as discharge_disposition_code,\n  max(rendering_npi) as rendering_npi,\n  max(billing_npi) as billing_npi,\n  max(facility_npi) as facility_npi,\n  null as facility_name,\n  max(ms_drg_code) as ms_drg_code,\n  max(paid_date) as paid_date,\n  sum(paid_amount) as paid_amount,\n  sum(allowed_amount) as allowed_amount,\n  sum(charge_amount) as charge_amount,\n  max(data_source) as data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\ngroup by encounter_id\n),\n\n\nadd_descriptions as (\nselect\n  aa.encounter_id,\n  aa.patient_id as patient_id,\n  aa.encounter_type as encounter_type,\n  aa.encounter_start_date as encounter_start_date,\n  aa.encounter_end_date as encounter_end_date,\n  aa.admit_source_code as admit_source_code,\n  bb.admit_source_description,\n  aa.admit_type_code as admit_type_code,\n  cc.admit_type_description,\n  aa.discharge_disposition_code as discharge_disposition_code,\n  dd.discharge_disposition_description as\n     discharge_disposition_description,\n  aa.rendering_npi as rendering_npi,\n  aa.billing_npi as billing_npi,\n  aa.facility_npi as facility_npi,\n  aa.ms_drg_code as ms_drg_code,\n  ee.ms_drg_description,\n  aa.paid_date as paid_date,\n  aa.paid_amount as paid_amount,\n  aa.allowed_amount as allowed_amount,\n  aa.charge_amount as charge_amount,\n  aa.data_source as data_source\n\nfrom table_without_descriptions aa\n     left join {{ ref('terminology__admit_source') }} bb\n     on aa.admit_source_code = bb.admit_source_code\n     left join {{ ref('terminology__admit_type') }} cc\n     on aa.admit_type_code = cc.admit_type_code\n     left join {{ ref('terminology__discharge_disposition') }} dd\n     on aa.discharge_disposition_code = dd.discharge_disposition_code\n     left join {{ ref('terminology__ms_drg') }} ee\n     on aa.ms_drg_code = ee.ms_drg_code\n     \n)\n\n\nselect *\nfrom add_descriptions", "language": "sql", "package_name": "claims_preprocessing", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\claims_preprocessing", "path": "claims_preprocessing__encounter.sql", "original_file_path": "models\\claims_preprocessing__encounter.sql", "name": "claims_preprocessing__encounter", "alias": "encounter", "checksum": {"name": "sha256", "checksum": "a4ee7e6152cbf7461282b500ba81a6faeeeb87acaa7ebe0876550266e8b9bbdf"}, "tags": ["claims_preprocessing"], "refs": [["claims_preprocessing__medical_claim_enhanced"], ["terminology__admit_source"], ["terminology__admit_type"], ["terminology__discharge_disposition"], ["terminology__ms_drg"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#0f3d0b"}, "patch_path": "claims_preprocessing://models\\_models.yml", "compiled_path": "../target\\compiled\\claims_preprocessing\\models\\claims_preprocessing__encounter.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "encounter", "tags": "claims_preprocessing", "enabled": true, "docs": {"node_color": "#0f3d0b"}}, "created_at": 1674073789.0240757, "compiled_code": "\n\n\n\n\nwith table_without_descriptions as (\nselect\n  encounter_id,\n  max(patient_id) as patient_id,\n  max(encounter_type) as encounter_type,\n  max(encounter_start_date) as encounter_start_date,\n  max(encounter_end_date) as encounter_end_date,\n  max(admission_date) as admission_date,\n  min(discharge_date) as discharge_date,\n  max(encounter_admit_source_code) as admit_source_code,\n  max(encounter_admit_type_code) as admit_type_code,\n  max(encounter_discharge_disposition_code) as discharge_disposition_code,\n  max(rendering_npi) as rendering_npi,\n  max(billing_npi) as billing_npi,\n  max(facility_npi) as facility_npi,\n  null as facility_name,\n  max(ms_drg_code) as ms_drg_code,\n  max(paid_date) as paid_date,\n  sum(paid_amount) as paid_amount,\n  sum(allowed_amount) as allowed_amount,\n  sum(charge_amount) as charge_amount,\n  max(data_source) as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\ngroup by encounter_id\n),\n\n\nadd_descriptions as (\nselect\n  aa.encounter_id,\n  aa.patient_id as patient_id,\n  aa.encounter_type as encounter_type,\n  aa.encounter_start_date as encounter_start_date,\n  aa.encounter_end_date as encounter_end_date,\n  aa.admit_source_code as admit_source_code,\n  bb.admit_source_description,\n  aa.admit_type_code as admit_type_code,\n  cc.admit_type_description,\n  aa.discharge_disposition_code as discharge_disposition_code,\n  dd.discharge_disposition_description as\n     discharge_disposition_description,\n  aa.rendering_npi as rendering_npi,\n  aa.billing_npi as billing_npi,\n  aa.facility_npi as facility_npi,\n  aa.ms_drg_code as ms_drg_code,\n  ee.ms_drg_description,\n  aa.paid_date as paid_date,\n  aa.paid_amount as paid_amount,\n  aa.allowed_amount as allowed_amount,\n  aa.charge_amount as charge_amount,\n  aa.data_source as data_source\n\nfrom table_without_descriptions aa\n     left join tuva.terminology.admit_source bb\n     on aa.admit_source_code = bb.admit_source_code\n     left join tuva.terminology.admit_type cc\n     on aa.admit_type_code = cc.admit_type_code\n     left join tuva.terminology.discharge_disposition dd\n     on aa.discharge_disposition_code = dd.discharge_disposition_code\n     left join tuva.terminology.ms_drg ee\n     on aa.ms_drg_code = ee.ms_drg_code\n     \n)\n\n\nselect *\nfrom add_descriptions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.encounter"}, "model.claims_preprocessing.claims_preprocessing__patient": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.type_string"], "nodes": ["model.claims_preprocessing.claims_preprocessing__eligibility"]}, "config": {"enabled": true, "alias": "patient", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#0f3d0b"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "claims_preprocessing__patient"], "unique_id": "model.claims_preprocessing.claims_preprocessing__patient", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))\n   )\n}}\n\n\n\n\nwith patient_stage as(\n    select\n        patient_id\n        ,gender\n        ,race\n        ,birth_date\n        ,death_date\n        ,death_flag\n        ,first_name\n        ,last_name\n        ,address\n        ,city\n        ,state\n        ,zip_code\n        ,phone\n        ,data_source\n        ,row_number() over (\n\t    partition by patient_id\n\t    order by enrollment_end_date DESC) as row_sequence\n    from {{ ref('claims_preprocessing__eligibility')}}\n)\n\nselect\n    cast(patient_id as {{ dbt.type_string() }}) as patient_id\n    ,cast(gender as {{ dbt.type_string() }}) as gender\n    ,cast(race as {{ dbt.type_string() }}) as race\n    ,cast(birth_date as date) as birth_date\n    ,cast(death_date as date) as death_date\n    ,cast(death_flag as int) as death_flag\n    ,cast(first_name as {{ dbt.type_string() }}) as first_name\n    ,cast(last_name as {{ dbt.type_string() }}) as last_name\n    ,cast(address as {{ dbt.type_string() }}) as address\n    ,cast(city as {{ dbt.type_string() }}) as city\n    ,cast(state as {{ dbt.type_string() }}) as state\n    ,cast(zip_code as {{ dbt.type_string() }}) as zip_code\n    ,cast(phone as {{ dbt.type_string() }}) as phone\n    ,cast(data_source as {{ dbt.type_string() }}) as data_source\nfrom patient_stage\nwhere row_sequence = 1", "language": "sql", "package_name": "claims_preprocessing", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\claims_preprocessing", "path": "claims_preprocessing__patient.sql", "original_file_path": "models\\claims_preprocessing__patient.sql", "name": "claims_preprocessing__patient", "alias": "patient", "checksum": {"name": "sha256", "checksum": "3f2bebf43f42d8c7b8b9fc6f25081bc5d98ef9765bc7b7389fbb475dcd8d8711"}, "tags": ["claims_preprocessing"], "refs": [["claims_preprocessing__eligibility"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#0f3d0b"}, "patch_path": "claims_preprocessing://models\\_models.yml", "compiled_path": "../target\\compiled\\claims_preprocessing\\models\\claims_preprocessing__patient.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "patient", "tags": "claims_preprocessing", "enabled": true, "docs": {"node_color": "#0f3d0b"}}, "created_at": 1674073789.0100517, "compiled_code": "\n\n\n\n\nwith patient_stage as(\n    select\n        patient_id\n        ,gender\n        ,race\n        ,birth_date\n        ,death_date\n        ,death_flag\n        ,first_name\n        ,last_name\n        ,address\n        ,city\n        ,state\n        ,zip_code\n        ,phone\n        ,data_source\n        ,row_number() over (\n\t    partition by patient_id\n\t    order by enrollment_end_date DESC) as row_sequence\n    from tuva.core.staging_eligibility\n)\n\nselect\n    cast(patient_id as TEXT) as patient_id\n    ,cast(gender as TEXT) as gender\n    ,cast(race as TEXT) as race\n    ,cast(birth_date as date) as birth_date\n    ,cast(death_date as date) as death_date\n    ,cast(death_flag as int) as death_flag\n    ,cast(first_name as TEXT) as first_name\n    ,cast(last_name as TEXT) as last_name\n    ,cast(address as TEXT) as address\n    ,cast(city as TEXT) as city\n    ,cast(state as TEXT) as state\n    ,cast(zip_code as TEXT) as zip_code\n    ,cast(phone as TEXT) as phone\n    ,cast(data_source as TEXT) as data_source\nfrom patient_stage\nwhere row_sequence = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.patient"}, "model.claims_preprocessing.claims_preprocessing__prescription": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.type_string"], "nodes": ["model.claims_data_model.pharmacy_claim"]}, "config": {"enabled": true, "alias": "prescription", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#0f3d0b"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "claims_preprocessing__prescription"], "unique_id": "model.claims_preprocessing.claims_preprocessing__prescription", "raw_code": "{{ config(enabled=var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))) }}\r\n\r\n{# jinja to use an empty pharmacy_claim table if the pharmacy_claim_exists var is set to false, or the node in the pharmacy_claim variable otherwise  #}\r\n{% if var('pharmacy_claim_exists',True) %}\r\nselect\r\n    cast(claim_id as {{ dbt.type_string() }}) as claim_id\r\n    , cast(claim_line_number as {{ dbt.type_string() }}) as claim_line_number\r\n    , cast(patient_id as {{ dbt.type_string() }}) as patient_id\r\n    , cast(member_id as {{ dbt.type_string() }}) as member_id\r\n    , cast(prescribing_provider_npi as {{ dbt.type_string() }}) as prescribing_provider_npi\r\n    , cast(dispensing_provider_npi as {{ dbt.type_string() }}) as dispensing_provider_npi\r\n    , cast(dispensing_date as date ) as dispensing_date\r\n    , cast(ndc_code as {{ dbt.type_string() }}) as ndc_code\r\n    , cast(quantity as int ) as quantity\r\n    , cast(days_supply as int ) as days_supply\r\n    , cast(refills as int) as refills\r\n    , cast(paid_date as date ) as paid_date\r\n    , cast(paid_amount as numeric ) as paid_amount\r\n    , cast(allowed_amount as numeric ) as allowed_amount\r\n    , cast(data_source as {{ dbt.type_string() }}) as data_source\r\nfrom {{ var('pharmacy_claim')}} m\r\n\r\n{% else %}\r\n\r\n{% if execute %}\r\n{{- log(\"pharmacy_claim soruce does not exist, using empty table.\", info=true) -}}\r\n{% endif %}\r\nselect\r\n    cast(null as {{ dbt.type_string() }}) as claim_id\r\n    , cast(null as {{ dbt.type_string() }}) as claim_line_number\r\n    , cast(null as {{ dbt.type_string() }}) as patient_id\r\n    , cast(null as {{ dbt.type_string() }}) as member_id\r\n    , cast(null as {{ dbt.type_string() }}) as prescribing_provider_npi\r\n    , cast(null as {{ dbt.type_string() }}) as dispensing_provider_npi\r\n    , cast(null as date ) as dispensing_date\r\n    , cast(null as {{ dbt.type_string() }}) as ndc_code\r\n    , cast(null as int ) as quantity\r\n    , cast(null as int ) as days_supply\r\n    , cast(null as int) as refills\r\n    , cast(null as date ) as paid_date\r\n    , cast(null as numeric ) as paid_amount\r\n    , cast(null as numeric ) as allowed_amount\r\n    , cast(null as {{ dbt.type_string() }}) as data_source\r\n    limit 0\r\n\r\n{%- endif %}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\claims_preprocessing", "path": "claims_preprocessing__prescription.sql", "original_file_path": "models\\claims_preprocessing__prescription.sql", "name": "claims_preprocessing__prescription", "alias": "prescription", "checksum": {"name": "sha256", "checksum": "018754b22e34253fa2e2a5856767424589da073d16ec381b32594bac4d024fb1"}, "tags": ["claims_preprocessing"], "refs": [["pharmacy_claim"]], "sources": [], "metrics": [], "description": "Medications from claims", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#0f3d0b"}, "patch_path": "claims_preprocessing://models\\_models.yml", "compiled_path": "../target\\compiled\\claims_preprocessing\\models\\claims_preprocessing__prescription.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "prescription", "tags": "claims_preprocessing", "enabled": true, "docs": {"node_color": "#0f3d0b"}}, "created_at": 1674073788.9995317, "compiled_code": "\n\n\n\nselect\n    cast(claim_id as TEXT) as claim_id\n    , cast(claim_line_number as TEXT) as claim_line_number\n    , cast(patient_id as TEXT) as patient_id\n    , cast(member_id as TEXT) as member_id\n    , cast(prescribing_provider_npi as TEXT) as prescribing_provider_npi\n    , cast(dispensing_provider_npi as TEXT) as dispensing_provider_npi\n    , cast(dispensing_date as date ) as dispensing_date\n    , cast(ndc_code as TEXT) as ndc_code\n    , cast(quantity as int ) as quantity\n    , cast(days_supply as int ) as days_supply\n    , cast(refills as int) as refills\n    , cast(paid_date as date ) as paid_date\n    , cast(paid_amount as numeric ) as paid_amount\n    , cast(allowed_amount as numeric ) as allowed_amount\n    , cast(data_source as TEXT) as data_source\nfrom tuva.the_tuva_project_input.pharmacy_claim m\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.prescription"}, "model.claims_preprocessing.claims_preprocessing__procedure": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "seed.terminology.terminology__icd_10_pcs"]}, "config": {"enabled": true, "alias": "procedure", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#0f3d0b"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "claims_preprocessing__procedure"], "unique_id": "model.claims_preprocessing.claims_preprocessing__procedure", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))\n   )\n}}\n\n\n\n\nwith unpivot_cte as (\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_1 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_1 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere procedure_code_1 is not null\n    \nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_2 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_2 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere procedure_code_2 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_3 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_3 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere procedure_code_3 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_4 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_4 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere procedure_code_4 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_5 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_5 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere procedure_code_5 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_6 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_6 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere procedure_code_6 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_7 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_7 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere procedure_code_7 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_8 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_8 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere procedure_code_8 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_9 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_9 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere procedure_code_9 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_10 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_10 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere procedure_code_10 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_11 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_11 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere procedure_code_11 is not null\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_12 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_12 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere procedure_code_12 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_13 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_13 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere procedure_code_13 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_14 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_14 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere procedure_code_14 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_15 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_15 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere procedure_code_15 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_16 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_16 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere procedure_code_16 is not null\n    \nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_17 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_17 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere procedure_code_17 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_18 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_18 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere procedure_code_18 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_19 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_19 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere procedure_code_19 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_20 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_20 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere procedure_code_20 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_21 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_21 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere procedure_code_21 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_22 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_22 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere procedure_code_22 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_23 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_23 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere procedure_code_23 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_24 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_24 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere procedure_code_24 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_25 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_25 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom {{ ref('claims_preprocessing__medical_claim_enhanced') }} aa\nwhere procedure_code_25 is not null\n\n)\n\n\nselect distinct\n  unpivot_cte.encounter_id as encounter_id,\n  unpivot_cte.patient_id as patient_id,\n  unpivot_cte.procedure_date as procedure_date,\n  unpivot_cte.code_type as code_type,\n  unpivot_cte.code as code,\n  icd.short_description as description,\n  unpivot_cte.practitioner_npi as practitioner_npi,\n  unpivot_cte.data_source as data_source\nfrom unpivot_cte\n  left join {{ ref('terminology__icd_10_pcs') }} as icd\n    on unpivot_cte.code = icd.icd_10_pcs", "language": "sql", "package_name": "claims_preprocessing", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\claims_preprocessing", "path": "claims_preprocessing__procedure.sql", "original_file_path": "models\\claims_preprocessing__procedure.sql", "name": "claims_preprocessing__procedure", "alias": "procedure", "checksum": {"name": "sha256", "checksum": "1d1d5ea9ccc79aaf377456246f483a91b9b03bb30c608b17aa90199f15a1adb8"}, "tags": ["claims_preprocessing"], "refs": [["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["claims_preprocessing__medical_claim_enhanced"], ["terminology__icd_10_pcs"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#0f3d0b"}, "patch_path": "claims_preprocessing://models\\_models.yml", "compiled_path": "../target\\compiled\\claims_preprocessing\\models\\claims_preprocessing__procedure.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "procedure", "tags": "claims_preprocessing", "enabled": true, "docs": {"node_color": "#0f3d0b"}}, "created_at": 1674073789.0573714, "compiled_code": "\n\n\n\n\nwith unpivot_cte as (\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_1 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_1 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_1 is not null\n    \nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_2 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_2 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_2 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_3 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_3 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_3 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_4 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_4 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_4 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_5 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_5 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_5 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_6 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_6 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_6 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_7 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_7 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_7 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_8 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_8 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_8 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_9 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_9 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_9 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_10 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_10 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_10 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_11 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_11 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_11 is not null\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_12 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_12 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_12 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_13 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_13 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_13 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_14 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_14 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_14 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_15 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_15 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_15 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_16 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_16 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_16 is not null\n    \nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_17 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_17 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_17 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_18 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_18 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_18 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_19 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_19 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_19 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_20 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_20 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_20 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_21 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_21 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_21 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_22 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_22 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_22 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_23 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_23 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_23 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_24 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_24 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_24 is not null\n\nunion distinct\n\nselect\n  aa.encounter_id as encounter_id,\n  aa.patient_id as patient_id,\n  aa.procedure_date_25 as procedure_date,\n  aa.procedure_code_type as code_type,\n  aa.procedure_code_25 as code,\n  aa.billing_npi as practitioner_npi,\n  aa.data_source as data_source\nfrom tuva.core.intermediate_medical_claim_enhanced aa\nwhere procedure_code_25 is not null\n\n)\n\n\nselect distinct\n  unpivot_cte.encounter_id as encounter_id,\n  unpivot_cte.patient_id as patient_id,\n  unpivot_cte.procedure_date as procedure_date,\n  unpivot_cte.code_type as code_type,\n  unpivot_cte.code as code,\n  icd.short_description as description,\n  unpivot_cte.practitioner_npi as practitioner_npi,\n  unpivot_cte.data_source as data_source\nfrom unpivot_cte\n  left join tuva.terminology.icd_10_pcs as icd\n    on unpivot_cte.code = icd.icd_10_pcs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.procedure"}, "model.claims_preprocessing.claims_preprocessing__encounter_id": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_preprocessing.claims_preprocessing__generate_institutional_encounter_id", "model.claims_preprocessing.claims_preprocessing__professional_claims_in_institutional_encounters", "model.claims_preprocessing.claims_preprocessing__professional_encounters"]}, "config": {"enabled": true, "alias": "intermediate_encounter_id", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": "#0f3d0b"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "intermediate", "claims_preprocessing__encounter_id"], "unique_id": "model.claims_preprocessing.claims_preprocessing__encounter_id", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))\n   )\n}}\n\n\n\n\nselect\n  patient_id,\n  claim_id,\n  encounter_id,\n  encounter_type,\n  encounter_type_detail,\n  0 as orphan_claim_flag\nfrom {{ ref('claims_preprocessing__generate_institutional_encounter_id') }}\n\nunion distinct\n\nselect\n  patient_id,\n  claim_id,\n  encounter_id,\n  encounter_type,\n  encounter_type_detail,\n  orphan_claim_flag\nfrom {{ ref('claims_preprocessing__professional_claims_in_institutional_encounters') }}\n\nunion distinct\n\nselect\n  patient_id,\n  claim_id,\n  encounter_id,\n  encounter_type,\n  encounter_type_detail,\n  0 as orphan_claim_flag\nfrom {{ ref('claims_preprocessing__professional_encounters') }}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\claims_preprocessing", "path": "intermediate\\claims_preprocessing__encounter_id.sql", "original_file_path": "models\\intermediate\\claims_preprocessing__encounter_id.sql", "name": "claims_preprocessing__encounter_id", "alias": "intermediate_encounter_id", "checksum": {"name": "sha256", "checksum": "caf07dfa831b38b5797088f984fc47bff3f1b4e0aaf438108a44025507096d9f"}, "tags": ["claims_preprocessing"], "refs": [["claims_preprocessing__generate_institutional_encounter_id"], ["claims_preprocessing__professional_claims_in_institutional_encounters"], ["claims_preprocessing__professional_encounters"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": "#0f3d0b"}, "patch_path": "claims_preprocessing://models\\_models.yml", "compiled_path": "../target\\compiled\\claims_preprocessing\\models\\intermediate\\claims_preprocessing__encounter_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "intermediate_encounter_id", "tags": "claims_preprocessing", "enabled": true, "docs": {"show": false}}, "created_at": 1674073789.1008675, "compiled_code": "\n\n\n\n\nselect\n  patient_id,\n  claim_id,\n  encounter_id,\n  encounter_type,\n  encounter_type_detail,\n  0 as orphan_claim_flag\nfrom tuva.core.intermediate_generate_institutional_encounter_id\n\nunion distinct\n\nselect\n  patient_id,\n  claim_id,\n  encounter_id,\n  encounter_type,\n  encounter_type_detail,\n  orphan_claim_flag\nfrom tuva.core.intermediate_professional_claims_in_institutional_encounters\n\nunion distinct\n\nselect\n  patient_id,\n  claim_id,\n  encounter_id,\n  encounter_type,\n  encounter_type_detail,\n  0 as orphan_claim_flag\nfrom tuva.core.intermediate_professional_encounters", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.intermediate_encounter_id"}, "model.claims_preprocessing.claims_preprocessing__encounter_type": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "seed.terminology.terminology__ms_drg", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim"]}, "config": {"enabled": true, "alias": "intermediate_encounter_type", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": "#0f3d0b"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "intermediate", "claims_preprocessing__encounter_type"], "unique_id": "model.claims_preprocessing.claims_preprocessing__encounter_type", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))\n   )\n}}\n\n\n\n\n-- *************************************************\n-- This dbt model assigns an encounter type to every\n-- unique claim_id in the medical_claim table.\n-- *************************************************\n\n\n\n\n-- Lists unique claim_ids with 'Room & Board'\n-- revenue_center_codes:\nwith room_and_board as (\nselect distinct claim_id\nfrom {{ ref('claims_preprocessing__medical_claim') }}\nwhere revenue_center_code in\n  ('0100','0101',\n   '0110','0111','0112','0113','0114','0116','0117','0118','0119',\n   '0120','0121','0122','0123','0124','0126','0127','0128','0129',\n   '0130','0131','0132','0133','0134','0136','0137','0138','0139',\n   '0140','0141','0142','0143','0144','0146','0147','0148','0149',\n   '0150','0151','0152','0153','0154','0156','0157','0158','0159',\n   '0160','0164','0167','0169',\n   '0170','0171','0172','0173','0174','0179',\n   '0190','0191','0192','0193','0194','0199',\n   '0200','0201','0202','0203','0204','0206','0207','0208','0209',\n   '0210','0211','0212','0213','0214','0219',\n   '1000','1001','1002')\n),\n\n\n-- Lists unique claim_ds with valid ms_drg:\nvalid_ms_drg as (\nselect distinct mc.claim_id\nfrom {{ ref('claims_preprocessing__medical_claim') }} mc\ninner join  {{ ref('terminology__ms_drg')}} as msdrg\n    on mc.ms_drg_code = msdrg.ms_drg_code\n),\n\n\n\n\n\n\n-- **************************************************\n-- Here we define all encounter types:\n-- **************************************************\n\n\n\n-- ****  'acute inpatient - institutional'  ****\n-- Lists unique claim_ids that meet the logic\n-- criteria for the\n-- 'acute inpatient - institutional' encounter type:\nacute_inpatient_institutional as (\nselect distinct\n  mc.claim_id,\n  'acute inpatient' as encounter_type,\n  'acute inpatient - institutional' as encounter_type_detail\nfrom {{ ref('claims_preprocessing__medical_claim') }} mc\ninner join room_and_board rb\n    on mc.claim_id = rb.claim_id\ninner join valid_ms_drg vms\n    on mc.claim_id = vms.claim_id\nwhere left(mc.bill_type_code,1) in ('1','4','8')\n),\n\n\n-- ****  'acute inpatient - professional'  ****\n-- Lists unique claim_ids that meet the logic\n-- criteria for the\n-- 'acute inpatient - professional' encounter type:\nacute_inpatient_professional as (\nselect distinct\n    claim_id,\n    'acute inpatient' as encounter_type,\n    'acute inpatient - professional' as encounter_type_detail\nfrom {{ ref('claims_preprocessing__medical_claim') }}\nwhere place_of_service_code = '21'\n),\n\n\n-- ****  'inpatient rehabilitation - institutional'  ****\n-- Lists unique claim_ids that meet the logic\n-- criteria for the\n-- 'inpatient rehabilitation - institutional' encounter type:\ninpatient_rehabilitation_institutional as (\nselect distinct\n    claim_id,\n    'inpatient rehabilitation' as encounter_type,\n    'inpatient rehabilitation - institutional' as encounter_type_detail\nfrom {{ ref('claims_preprocessing__medical_claim') }}\nwhere revenue_center_code in ('0024','0118','0128','0138','0148','0158')\n),\n\n\n-- ****  'inpatient rehabilitation - professional'  ****\n-- Lists unique claim_ids that meet the logic\n-- criteria for the\n-- 'inpatient rehabilitation - professional' encounter type:\ninpatient_rehabilitation_professional as (\nselect distinct\n    claim_id,\n    'inpatient rehabilitation' as encounter_type,\n    'inpatient rehabilitation - professional' as encounter_type_detail\nfrom {{ ref('claims_preprocessing__medical_claim') }}\nwhere place_of_service_code = '61'\n),\n\n\ninpatient_psychiatric_institutional as (\nselect distinct\n    claim_id,\n    'inpatient psychiatric' as encounter_type,\n    'inpatient psychiatric - institutional' as encounter_type_detail\nfrom {{ ref('claims_preprocessing__medical_claim') }}\nwhere revenue_center_code in\n  ('0114','0124','0134','0144',\n   '0154','0204','0513','1001')\n),\n\n\ninpatient_psychiatric_professional as (\nselect distinct\n    claim_id,\n    'inpatient psychiatric' as encounter_type,\n    'inpatient psychiatric - professional' as encounter_type_detail\nfrom {{ ref('claims_preprocessing__medical_claim') }}\nwhere place_of_service_code in ('51','52','56')\n),\n\n\ninpatient_substance_abuse_institutional as (\nselect distinct\n    claim_id,\n    'inpatient substance abuse' as encounter_type,\n    'inpatient substance abuse - institutional' as encounter_type_detail\nfrom {{ ref('claims_preprocessing__medical_claim') }}\nwhere revenue_center_code = '1002'\n),\n\n\ninpatient_substance_abuse_professional as (\nselect distinct\n    claim_id,\n    'inpatient substance abuse' as encounter_type,\n    'inpatient substance abuse - professional' as encounter_type_detail\nfrom {{ ref('claims_preprocessing__medical_claim') }}\nwhere place_of_service_code in ('55','57','58')\n),\n\n\nskilled_nursing_institutional as (\nselect distinct\n    claim_id,\n    'skilled nursing' as encounter_type,\n    'skilled nursing - institutional' as encounter_type_detail\nfrom {{ ref('claims_preprocessing__medical_claim') }}\nwhere left(bill_type_code,1) = '2'\n),\n\n\nskilled_nursing_professional as (\nselect distinct\n    claim_id,\n    'skilled nursing' as encounter_type,\n    'skilled nursing - professional' as encounter_type_detail\nfrom {{ ref('claims_preprocessing__medical_claim') }}\nwhere place_of_service_code in ('31','32')\n),\n\n\nambulatory_surgery_institutional as (\nselect distinct claim_id,\n  'ambulatory surgery' as encounter_type,\n  'ambulatory surgery - institutional' as encounter_type_detail\nfrom {{ ref('claims_preprocessing__medical_claim') }}\nwhere substring(bill_type_code, 1, 2) = '83'\n),\n\n\nambulatory_surgery_professional as (\nselect distinct\n    claim_id,\n    'ambulatory surgery' as encounter_type,\n    'ambulatory surgery - professional' as encounter_type_detail\nfrom {{ ref('claims_preprocessing__medical_claim') }}\nwhere place_of_service_code = '24'\n),\n\n\ndialysis_institutional as (\nselect distinct\n    claim_id,\n    'dialysis' as encounter_type,\n    'dialysis - institutional' as encounter_type_detail\nfrom {{ ref('claims_preprocessing__medical_claim') }}\nwhere substring(bill_type_code, 1, 2) = '72'\n),\n\n\ndialysis_professional as (\nselect distinct\n    claim_id,\n    'dialysis' as encounter_type,\n    'dialysis - professional' as encounter_type_detail\nfrom {{ ref('claims_preprocessing__medical_claim') }}\nwhere place_of_service_code = '65'\n),\n\n\nemergency_department_institutional as (\nselect distinct\n    claim_id,\n    'emergency department' as encounter_type,\n    'emergency department - institutional' as encounter_type_detail\nfrom {{ ref('claims_preprocessing__medical_claim') }}\nwhere revenue_center_code in ('0450','0451','0452','0459','0981')\n),\n\n\nemergency_department_professional as (\nselect distinct\n    claim_id,\n    'emergency department' as encounter_type,\n    'emergency department - professional' as encounter_type_detail\nfrom {{ ref('claims_preprocessing__medical_claim') }}\nwhere place_of_service_code = '23'\n),\n\n\nurgent_care_institutional as (\nselect distinct\n    claim_id,\n    'urgent care' as encounter_type,\n    'urgent care - institutional' as encounter_type_detail\nfrom {{ ref('claims_preprocessing__medical_claim') }}\nwhere revenue_center_code in ('0456','0516','0526')\n),\n\n\nurgent_care_professional as (\nselect distinct\n    claim_id,\n    'urgent care' as encounter_type,\n    'urgent care - professional' as encounter_type_detail\nfrom {{ ref('claims_preprocessing__medical_claim') }}\nwhere place_of_service_code = '20'\n),\n\nhome_health_institutional as (\nselect distinct\n    claim_id,\n    'home health' as encounter_type,\n    'home health - institutional' as encounter_type_detail\nfrom {{ ref('claims_preprocessing__medical_claim') }}\nwhere left(bill_type_code,1) = '3'\n),\n\n\nhome_health_professional as (\nselect distinct\n    claim_id,\n    'home health' as encounter_type,\n    'home health - professional' as encounter_type_detail\nfrom {{ ref('claims_preprocessing__medical_claim') }}\nwhere place_of_service_code = '12'\n),\n\n\nhospice_institutional as (\nselect distinct\n    claim_id,\n    'hospice' as encounter_type,\n    'hospice - institutional' as encounter_type_detail\nfrom {{ ref('claims_preprocessing__medical_claim') }}\nwhere substring(bill_type_code, 1, 2) in ('81','82')\n),\n\n\nhospice_professional as (\nselect distinct\n    claim_id,\n    'hospice' as encounter_type,\n    'hospice - professional' as encounter_type_detail\nfrom {{ ref('claims_preprocessing__medical_claim') }}\nwhere place_of_service_code = '34'\n),\n\n\noutpatient_rehabilitation_institutional as (\nselect distinct\n    claim_id,\n    'outpatient rehabilitation' as encounter_type,\n    'outpatient rehabilitation - institutional' as encounter_type_detail\nfrom {{ ref('claims_preprocessing__medical_claim') }}\nwhere substring(bill_type_code, 1, 2) in ('74','75')\n),\n\n\noutpatient_rehabilitation_professional as (\nselect distinct\n    claim_id,\n    'outpatient rehabilitation' as encounter_type,\n    'outpatient rehabilitation - professional' as encounter_type_detail\nfrom {{ ref('claims_preprocessing__medical_claim') }}\nwhere place_of_service_code = '62'\n),\n\n\noutpatient_mental_health_institutional as (\nselect distinct\n    claim_id,\n    'outpatient mental health' as encounter_type,\n    'outpatient mental health - institutional' as encounter_type_detail\nfrom {{ ref('claims_preprocessing__medical_claim') }}\nwhere substring(bill_type_code, 1, 2) = '76'\n),\n\n\noutpatient_mental_health_professional as (\nselect distinct\n    claim_id,\n    'outpatient mental health' as encounter_type,\n    'outpatient mental health - professional' as encounter_type_detail\nfrom {{ ref('claims_preprocessing__medical_claim') }}\nwhere place_of_service_code = '53'\n),\n\n\noffice_visit as (\nselect distinct\n    claim_id,\n    'office visit' as encounter_type,\n    'office visit' as encounter_type_detail\nfrom {{ ref('claims_preprocessing__medical_claim') }}\nwhere place_of_service_code in ('11','17','49','50','71','72')\n),\n\n\ntelehealth as (\nselect distinct\n    claim_id,\n    'telehealth' as encounter_type,\n    'telehealth' as encounter_type_detail\nfrom {{ ref('claims_preprocessing__medical_claim') }}\nwhere place_of_service_code in ('02','10')\n),\n\n\nmapped_unioned as (\n    select * from acute_inpatient_institutional\n    union all\n    select * from acute_inpatient_professional\n    union all\n    select * from inpatient_rehabilitation_institutional\n    union all\n    select * from inpatient_rehabilitation_professional\n    union all\n    select * from inpatient_psychiatric_institutional\n    union all\n    select * from inpatient_psychiatric_professional\n    union all\n    select * from inpatient_substance_abuse_institutional\n    union all\n    select * from inpatient_substance_abuse_professional\n    union all\n    select * from skilled_nursing_institutional\n    union all\n    select * from skilled_nursing_professional\n    union all\n    select * from ambulatory_surgery_institutional\n    union all\n    select * from ambulatory_surgery_professional\n    union all\n    select * from dialysis_institutional\n    union all\n    select * from dialysis_professional\n    union all\n    select * from emergency_department_institutional\n    union all\n    select * from emergency_department_professional\n    union all\n    select * from urgent_care_institutional\n    union all\n    select * from urgent_care_professional\n    union all\n    select * from home_health_institutional\n    union all\n    select * from home_health_professional\n    union all\n    select * from hospice_institutional\n    union all\n    select * from hospice_professional\n    union all\n    select * from outpatient_rehabilitation_institutional\n    union all\n    select * from outpatient_rehabilitation_professional\n    union all\n    select * from outpatient_mental_health_institutional\n    union all\n    select * from outpatient_mental_health_professional\n    union all\n    select * from office_visit\n    union all\n    select * from telehealth\n)\n\n\nselect distinct\n    mc.claim_id,\n    coalesce(mu.encounter_type, 'unmapped') as encounter_type,\n    coalesce(mu.encounter_type_detail, 'unmapped') as encounter_type_detail\nfrom {{ ref('claims_preprocessing__medical_claim') }} mc\nleft join mapped_unioned mu\n    on mc.claim_id = mu.claim_id", "language": "sql", "package_name": "claims_preprocessing", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\claims_preprocessing", "path": "intermediate\\claims_preprocessing__encounter_type.sql", "original_file_path": "models\\intermediate\\claims_preprocessing__encounter_type.sql", "name": "claims_preprocessing__encounter_type", "alias": "intermediate_encounter_type", "checksum": {"name": "sha256", "checksum": "82597a2deb42e4e8e282a607aa7a3039e7052559aee03a5991c7343e8c0a569e"}, "tags": ["claims_preprocessing"], "refs": [["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["terminology__ms_drg"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"], ["claims_preprocessing__medical_claim"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": "#0f3d0b"}, "patch_path": "claims_preprocessing://models\\_models.yml", "compiled_path": "../target\\compiled\\claims_preprocessing\\models\\intermediate\\claims_preprocessing__encounter_type.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "intermediate_encounter_type", "tags": "claims_preprocessing", "enabled": true, "docs": {"show": false}}, "created_at": 1674073789.1098676, "compiled_code": "\n\n\n\n\n-- *************************************************\n-- This dbt model assigns an encounter type to every\n-- unique claim_id in the medical_claim table.\n-- *************************************************\n\n\n\n\n-- Lists unique claim_ids with 'Room & Board'\n-- revenue_center_codes:\nwith room_and_board as (\nselect distinct claim_id\nfrom tuva.core.staging_medical_claim\nwhere revenue_center_code in\n  ('0100','0101',\n   '0110','0111','0112','0113','0114','0116','0117','0118','0119',\n   '0120','0121','0122','0123','0124','0126','0127','0128','0129',\n   '0130','0131','0132','0133','0134','0136','0137','0138','0139',\n   '0140','0141','0142','0143','0144','0146','0147','0148','0149',\n   '0150','0151','0152','0153','0154','0156','0157','0158','0159',\n   '0160','0164','0167','0169',\n   '0170','0171','0172','0173','0174','0179',\n   '0190','0191','0192','0193','0194','0199',\n   '0200','0201','0202','0203','0204','0206','0207','0208','0209',\n   '0210','0211','0212','0213','0214','0219',\n   '1000','1001','1002')\n),\n\n\n-- Lists unique claim_ds with valid ms_drg:\nvalid_ms_drg as (\nselect distinct mc.claim_id\nfrom tuva.core.staging_medical_claim mc\ninner join  tuva.terminology.ms_drg as msdrg\n    on mc.ms_drg_code = msdrg.ms_drg_code\n),\n\n\n\n\n\n\n-- **************************************************\n-- Here we define all encounter types:\n-- **************************************************\n\n\n\n-- ****  'acute inpatient - institutional'  ****\n-- Lists unique claim_ids that meet the logic\n-- criteria for the\n-- 'acute inpatient - institutional' encounter type:\nacute_inpatient_institutional as (\nselect distinct\n  mc.claim_id,\n  'acute inpatient' as encounter_type,\n  'acute inpatient - institutional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim mc\ninner join room_and_board rb\n    on mc.claim_id = rb.claim_id\ninner join valid_ms_drg vms\n    on mc.claim_id = vms.claim_id\nwhere left(mc.bill_type_code,1) in ('1','4','8')\n),\n\n\n-- ****  'acute inpatient - professional'  ****\n-- Lists unique claim_ids that meet the logic\n-- criteria for the\n-- 'acute inpatient - professional' encounter type:\nacute_inpatient_professional as (\nselect distinct\n    claim_id,\n    'acute inpatient' as encounter_type,\n    'acute inpatient - professional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere place_of_service_code = '21'\n),\n\n\n-- ****  'inpatient rehabilitation - institutional'  ****\n-- Lists unique claim_ids that meet the logic\n-- criteria for the\n-- 'inpatient rehabilitation - institutional' encounter type:\ninpatient_rehabilitation_institutional as (\nselect distinct\n    claim_id,\n    'inpatient rehabilitation' as encounter_type,\n    'inpatient rehabilitation - institutional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere revenue_center_code in ('0024','0118','0128','0138','0148','0158')\n),\n\n\n-- ****  'inpatient rehabilitation - professional'  ****\n-- Lists unique claim_ids that meet the logic\n-- criteria for the\n-- 'inpatient rehabilitation - professional' encounter type:\ninpatient_rehabilitation_professional as (\nselect distinct\n    claim_id,\n    'inpatient rehabilitation' as encounter_type,\n    'inpatient rehabilitation - professional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere place_of_service_code = '61'\n),\n\n\ninpatient_psychiatric_institutional as (\nselect distinct\n    claim_id,\n    'inpatient psychiatric' as encounter_type,\n    'inpatient psychiatric - institutional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere revenue_center_code in\n  ('0114','0124','0134','0144',\n   '0154','0204','0513','1001')\n),\n\n\ninpatient_psychiatric_professional as (\nselect distinct\n    claim_id,\n    'inpatient psychiatric' as encounter_type,\n    'inpatient psychiatric - professional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere place_of_service_code in ('51','52','56')\n),\n\n\ninpatient_substance_abuse_institutional as (\nselect distinct\n    claim_id,\n    'inpatient substance abuse' as encounter_type,\n    'inpatient substance abuse - institutional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere revenue_center_code = '1002'\n),\n\n\ninpatient_substance_abuse_professional as (\nselect distinct\n    claim_id,\n    'inpatient substance abuse' as encounter_type,\n    'inpatient substance abuse - professional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere place_of_service_code in ('55','57','58')\n),\n\n\nskilled_nursing_institutional as (\nselect distinct\n    claim_id,\n    'skilled nursing' as encounter_type,\n    'skilled nursing - institutional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere left(bill_type_code,1) = '2'\n),\n\n\nskilled_nursing_professional as (\nselect distinct\n    claim_id,\n    'skilled nursing' as encounter_type,\n    'skilled nursing - professional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere place_of_service_code in ('31','32')\n),\n\n\nambulatory_surgery_institutional as (\nselect distinct claim_id,\n  'ambulatory surgery' as encounter_type,\n  'ambulatory surgery - institutional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere substring(bill_type_code, 1, 2) = '83'\n),\n\n\nambulatory_surgery_professional as (\nselect distinct\n    claim_id,\n    'ambulatory surgery' as encounter_type,\n    'ambulatory surgery - professional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere place_of_service_code = '24'\n),\n\n\ndialysis_institutional as (\nselect distinct\n    claim_id,\n    'dialysis' as encounter_type,\n    'dialysis - institutional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere substring(bill_type_code, 1, 2) = '72'\n),\n\n\ndialysis_professional as (\nselect distinct\n    claim_id,\n    'dialysis' as encounter_type,\n    'dialysis - professional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere place_of_service_code = '65'\n),\n\n\nemergency_department_institutional as (\nselect distinct\n    claim_id,\n    'emergency department' as encounter_type,\n    'emergency department - institutional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere revenue_center_code in ('0450','0451','0452','0459','0981')\n),\n\n\nemergency_department_professional as (\nselect distinct\n    claim_id,\n    'emergency department' as encounter_type,\n    'emergency department - professional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere place_of_service_code = '23'\n),\n\n\nurgent_care_institutional as (\nselect distinct\n    claim_id,\n    'urgent care' as encounter_type,\n    'urgent care - institutional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere revenue_center_code in ('0456','0516','0526')\n),\n\n\nurgent_care_professional as (\nselect distinct\n    claim_id,\n    'urgent care' as encounter_type,\n    'urgent care - professional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere place_of_service_code = '20'\n),\n\nhome_health_institutional as (\nselect distinct\n    claim_id,\n    'home health' as encounter_type,\n    'home health - institutional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere left(bill_type_code,1) = '3'\n),\n\n\nhome_health_professional as (\nselect distinct\n    claim_id,\n    'home health' as encounter_type,\n    'home health - professional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere place_of_service_code = '12'\n),\n\n\nhospice_institutional as (\nselect distinct\n    claim_id,\n    'hospice' as encounter_type,\n    'hospice - institutional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere substring(bill_type_code, 1, 2) in ('81','82')\n),\n\n\nhospice_professional as (\nselect distinct\n    claim_id,\n    'hospice' as encounter_type,\n    'hospice - professional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere place_of_service_code = '34'\n),\n\n\noutpatient_rehabilitation_institutional as (\nselect distinct\n    claim_id,\n    'outpatient rehabilitation' as encounter_type,\n    'outpatient rehabilitation - institutional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere substring(bill_type_code, 1, 2) in ('74','75')\n),\n\n\noutpatient_rehabilitation_professional as (\nselect distinct\n    claim_id,\n    'outpatient rehabilitation' as encounter_type,\n    'outpatient rehabilitation - professional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere place_of_service_code = '62'\n),\n\n\noutpatient_mental_health_institutional as (\nselect distinct\n    claim_id,\n    'outpatient mental health' as encounter_type,\n    'outpatient mental health - institutional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere substring(bill_type_code, 1, 2) = '76'\n),\n\n\noutpatient_mental_health_professional as (\nselect distinct\n    claim_id,\n    'outpatient mental health' as encounter_type,\n    'outpatient mental health - professional' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere place_of_service_code = '53'\n),\n\n\noffice_visit as (\nselect distinct\n    claim_id,\n    'office visit' as encounter_type,\n    'office visit' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere place_of_service_code in ('11','17','49','50','71','72')\n),\n\n\ntelehealth as (\nselect distinct\n    claim_id,\n    'telehealth' as encounter_type,\n    'telehealth' as encounter_type_detail\nfrom tuva.core.staging_medical_claim\nwhere place_of_service_code in ('02','10')\n),\n\n\nmapped_unioned as (\n    select * from acute_inpatient_institutional\n    union all\n    select * from acute_inpatient_professional\n    union all\n    select * from inpatient_rehabilitation_institutional\n    union all\n    select * from inpatient_rehabilitation_professional\n    union all\n    select * from inpatient_psychiatric_institutional\n    union all\n    select * from inpatient_psychiatric_professional\n    union all\n    select * from inpatient_substance_abuse_institutional\n    union all\n    select * from inpatient_substance_abuse_professional\n    union all\n    select * from skilled_nursing_institutional\n    union all\n    select * from skilled_nursing_professional\n    union all\n    select * from ambulatory_surgery_institutional\n    union all\n    select * from ambulatory_surgery_professional\n    union all\n    select * from dialysis_institutional\n    union all\n    select * from dialysis_professional\n    union all\n    select * from emergency_department_institutional\n    union all\n    select * from emergency_department_professional\n    union all\n    select * from urgent_care_institutional\n    union all\n    select * from urgent_care_professional\n    union all\n    select * from home_health_institutional\n    union all\n    select * from home_health_professional\n    union all\n    select * from hospice_institutional\n    union all\n    select * from hospice_professional\n    union all\n    select * from outpatient_rehabilitation_institutional\n    union all\n    select * from outpatient_rehabilitation_professional\n    union all\n    select * from outpatient_mental_health_institutional\n    union all\n    select * from outpatient_mental_health_professional\n    union all\n    select * from office_visit\n    union all\n    select * from telehealth\n)\n\n\nselect distinct\n    mc.claim_id,\n    coalesce(mu.encounter_type, 'unmapped') as encounter_type,\n    coalesce(mu.encounter_type_detail, 'unmapped') as encounter_type_detail\nfrom tuva.core.staging_medical_claim mc\nleft join mapped_unioned mu\n    on mc.claim_id = mu.claim_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.intermediate_encounter_type"}, "model.claims_preprocessing.claims_preprocessing__generate_institutional_encounter_id": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_preprocessing.claims_preprocessing__relevant_encounter_type_claims", "model.claims_preprocessing.claims_preprocessing__relevant_encounter_type_claims", "model.claims_preprocessing.claims_preprocessing__relevant_encounter_type_claims"]}, "config": {"enabled": true, "alias": "intermediate_generate_institutional_encounter_id", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": "#0f3d0b"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "intermediate", "claims_preprocessing__generate_institutional_encounter_id"], "unique_id": "model.claims_preprocessing.claims_preprocessing__generate_institutional_encounter_id", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))\n   )\n}}\n\n\n\n\n-- Here we select all rows from the medical_claim table\n-- that correspond to encounter types where the encounter\n-- may be composed of more than one claim_id.\n-- These encounter types are the ones that may have\n-- institutional claims.\n--\n-- Continuation of the logic started in claims_preprocessing__relevant_encounter_type_claims\n\nwith\njoin_every_row_to_all_later_closes as (\nselect\n  aa.patient_id as patient_id,\n  aa.claim_id as claim_id,\n  aa.encounter_type,\n  aa.encounter_type_detail,\n  aa.row_num as row_num,\n  bb.row_num as row_num_b\nfrom {{ ref('claims_preprocessing__relevant_encounter_type_claims') }}  aa\n     inner join\n     {{ ref('claims_preprocessing__relevant_encounter_type_claims') }}  bb\n     on aa.patient_id = bb.patient_id\n     and aa.encounter_type_detail = bb.encounter_type_detail\n     and aa.row_num <= bb.row_num\nwhere bb.close_flag = 1\n),\n\n\nfind_min_closing_line_for_every_claim_id as (\nselect\n  patient_id,\n  claim_id,\n  min(row_num_b) as min_closing_row\nfrom join_every_row_to_all_later_closes\ngroup by patient_id, claim_id\n),\n\n\nadd_min_closing_row_to_each_claim_id as (\nselect\n  aa.patient_id as patient_id,\n  aa.claim_id as claim_id,\n  aa.encounter_type as encounter_type,\n  aa.encounter_type_detail as encounter_type_detail,\n  aa.claim_start_date as claim_start_date,\n  aa.claim_end_date as claim_end_date,\n  aa.discharge_disposition_code as discharge_disposition_code,\n  aa.facility_npi as facility_npi,\n  aa.row_num as row_num,\n  aa.close_flag as close_flag,\n  bb.min_closing_row as min_closing_row\nfrom {{ ref('claims_preprocessing__relevant_encounter_type_claims') }}  aa\n     left join find_min_closing_line_for_every_claim_id bb\n     on aa.patient_id = bb.patient_id\n     and aa.claim_id = bb.claim_id\n),\n\n\nadd_encounter_id as (\nselect\n  aa.patient_id as patient_id,\n  aa.claim_id as claim_id,\n  aa.encounter_type as encounter_type,\n  aa.encounter_type_detail as encounter_type_detail,\n  aa.claim_start_date as claim_start_date,\n  aa.claim_end_date as claim_end_date,\n  aa.discharge_disposition_code as discharge_disposition_code,\n  aa.facility_npi as facility_npi,\n  aa.row_num as row_num,\n  aa.close_flag as close_flag,\n  aa.min_closing_row as min_closing_row,\n  bb.claim_id as encounter_id\nfrom add_min_closing_row_to_each_claim_id aa\n     left join add_min_closing_row_to_each_claim_id bb\n     on aa.patient_id = bb.patient_id\n     and aa.encounter_type_detail = bb.encounter_type_detail\n     and aa.min_closing_row = bb.row_num\n)\n\n\n\n\n\nselect\n  patient_id,\n  claim_id,\n  encounter_id,\n  encounter_type,\n  encounter_type_detail\nfrom add_encounter_id", "language": "sql", "package_name": "claims_preprocessing", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\claims_preprocessing", "path": "intermediate\\claims_preprocessing__generate_institutional_encounter_id.sql", "original_file_path": "models\\intermediate\\claims_preprocessing__generate_institutional_encounter_id.sql", "name": "claims_preprocessing__generate_institutional_encounter_id", "alias": "intermediate_generate_institutional_encounter_id", "checksum": {"name": "sha256", "checksum": "a796123247ff9ebd1b8234bd3c3a5b7ae825bb77c42f0812ae8bcef0af9cb54b"}, "tags": ["claims_preprocessing"], "refs": [["claims_preprocessing__relevant_encounter_type_claims"], ["claims_preprocessing__relevant_encounter_type_claims"], ["claims_preprocessing__relevant_encounter_type_claims"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": "#0f3d0b"}, "patch_path": "claims_preprocessing://models\\_models.yml", "compiled_path": "../target\\compiled\\claims_preprocessing\\models\\intermediate\\claims_preprocessing__generate_institutional_encounter_id.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "intermediate_generate_institutional_encounter_id", "tags": "claims_preprocessing", "enabled": true, "docs": {"show": false}}, "created_at": 1674073789.1193817, "compiled_code": "\n\n\n\n\n-- Here we select all rows from the medical_claim table\n-- that correspond to encounter types where the encounter\n-- may be composed of more than one claim_id.\n-- These encounter types are the ones that may have\n-- institutional claims.\n--\n-- Continuation of the logic started in claims_preprocessing__relevant_encounter_type_claims\n\nwith\njoin_every_row_to_all_later_closes as (\nselect\n  aa.patient_id as patient_id,\n  aa.claim_id as claim_id,\n  aa.encounter_type,\n  aa.encounter_type_detail,\n  aa.row_num as row_num,\n  bb.row_num as row_num_b\nfrom tuva.core.intermediate_relevant_encounter_type_claims  aa\n     inner join\n     tuva.core.intermediate_relevant_encounter_type_claims  bb\n     on aa.patient_id = bb.patient_id\n     and aa.encounter_type_detail = bb.encounter_type_detail\n     and aa.row_num <= bb.row_num\nwhere bb.close_flag = 1\n),\n\n\nfind_min_closing_line_for_every_claim_id as (\nselect\n  patient_id,\n  claim_id,\n  min(row_num_b) as min_closing_row\nfrom join_every_row_to_all_later_closes\ngroup by patient_id, claim_id\n),\n\n\nadd_min_closing_row_to_each_claim_id as (\nselect\n  aa.patient_id as patient_id,\n  aa.claim_id as claim_id,\n  aa.encounter_type as encounter_type,\n  aa.encounter_type_detail as encounter_type_detail,\n  aa.claim_start_date as claim_start_date,\n  aa.claim_end_date as claim_end_date,\n  aa.discharge_disposition_code as discharge_disposition_code,\n  aa.facility_npi as facility_npi,\n  aa.row_num as row_num,\n  aa.close_flag as close_flag,\n  bb.min_closing_row as min_closing_row\nfrom tuva.core.intermediate_relevant_encounter_type_claims  aa\n     left join find_min_closing_line_for_every_claim_id bb\n     on aa.patient_id = bb.patient_id\n     and aa.claim_id = bb.claim_id\n),\n\n\nadd_encounter_id as (\nselect\n  aa.patient_id as patient_id,\n  aa.claim_id as claim_id,\n  aa.encounter_type as encounter_type,\n  aa.encounter_type_detail as encounter_type_detail,\n  aa.claim_start_date as claim_start_date,\n  aa.claim_end_date as claim_end_date,\n  aa.discharge_disposition_code as discharge_disposition_code,\n  aa.facility_npi as facility_npi,\n  aa.row_num as row_num,\n  aa.close_flag as close_flag,\n  aa.min_closing_row as min_closing_row,\n  bb.claim_id as encounter_id\nfrom add_min_closing_row_to_each_claim_id aa\n     left join add_min_closing_row_to_each_claim_id bb\n     on aa.patient_id = bb.patient_id\n     and aa.encounter_type_detail = bb.encounter_type_detail\n     and aa.min_closing_row = bb.row_num\n)\n\n\n\n\n\nselect\n  patient_id,\n  claim_id,\n  encounter_id,\n  encounter_type,\n  encounter_type_detail\nfrom add_encounter_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.intermediate_generate_institutional_encounter_id"}, "model.claims_preprocessing.claims_preprocessing__institutional_encounter_start_and_end_dates": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__generate_institutional_encounter_id"]}, "config": {"enabled": true, "alias": "intermediate_institutional_encounter_start_and_end_dates", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": "#0f3d0b"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "intermediate", "claims_preprocessing__institutional_encounter_start_and_end_dates"], "unique_id": "model.claims_preprocessing.claims_preprocessing__institutional_encounter_start_and_end_dates", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))\n   )\n}}\n\n\n\n\nwith claims_for_institutional_encounters as (\nselect\n  aa.*,\n  bb.encounter_type as encounter_type,\n  bb.encounter_type_detail as encounter_type_detail,\n  bb.encounter_id as encounter_id\nfrom {{ ref('claims_preprocessing__medical_claim') }} aa\n     inner join {{ ref('claims_preprocessing__generate_institutional_encounter_id') }} bb\n     on aa.patient_id = bb.patient_id\n     and aa.claim_id = bb.claim_id\n),\n\n\ninstitutional_encounter_start_and_end_dates as (\nselect\n  patient_id,\n  encounter_id,\n  max(encounter_type) as encounter_type,\n  max(encounter_type_detail) as encounter_type_detail,\n  min(claim_start_date) as encounter_start_date,\n  max(claim_end_date) as encounter_end_date\nfrom claims_for_institutional_encounters\ngroup by patient_id, encounter_id\n)\n\n\nselect *\nfrom institutional_encounter_start_and_end_dates", "language": "sql", "package_name": "claims_preprocessing", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\claims_preprocessing", "path": "intermediate\\claims_preprocessing__institutional_encounter_start_and_end_dates.sql", "original_file_path": "models\\intermediate\\claims_preprocessing__institutional_encounter_start_and_end_dates.sql", "name": "claims_preprocessing__institutional_encounter_start_and_end_dates", "alias": "intermediate_institutional_encounter_start_and_end_dates", "checksum": {"name": "sha256", "checksum": "429a4aa128b11dd6acf44c5f0ce256726680800e76b8aacc7d1da30deffd4ef9"}, "tags": ["claims_preprocessing"], "refs": [["claims_preprocessing__medical_claim"], ["claims_preprocessing__generate_institutional_encounter_id"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": "#0f3d0b"}, "patch_path": "claims_preprocessing://models\\_models.yml", "compiled_path": "../target\\compiled\\claims_preprocessing\\models\\intermediate\\claims_preprocessing__institutional_encounter_start_and_end_dates.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "intermediate_institutional_encounter_start_and_end_dates", "tags": "claims_preprocessing", "enabled": true, "docs": {"show": false}}, "created_at": 1674073789.1364782, "compiled_code": "\n\n\n\n\nwith claims_for_institutional_encounters as (\nselect\n  aa.*,\n  bb.encounter_type as encounter_type,\n  bb.encounter_type_detail as encounter_type_detail,\n  bb.encounter_id as encounter_id\nfrom tuva.core.staging_medical_claim aa\n     inner join tuva.core.intermediate_generate_institutional_encounter_id bb\n     on aa.patient_id = bb.patient_id\n     and aa.claim_id = bb.claim_id\n),\n\n\ninstitutional_encounter_start_and_end_dates as (\nselect\n  patient_id,\n  encounter_id,\n  max(encounter_type) as encounter_type,\n  max(encounter_type_detail) as encounter_type_detail,\n  min(claim_start_date) as encounter_start_date,\n  max(claim_end_date) as encounter_end_date\nfrom claims_for_institutional_encounters\ngroup by patient_id, encounter_id\n)\n\n\nselect *\nfrom institutional_encounter_start_and_end_dates", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.intermediate_institutional_encounter_start_and_end_dates"}, "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__encounter_id"]}, "config": {"enabled": true, "alias": "intermediate_medical_claim_enhanced", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": "#0f3d0b"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "intermediate", "claims_preprocessing__medical_claim_enhanced"], "unique_id": "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))\n   )\n}}\n\n\n\n\nwith add_encounter_fields as (\nselect\n  aa.*,\n  bb.encounter_id as encounter_id,\n  bb.encounter_type as encounter_type,\n  bb.encounter_type_detail as encounter_type_detail,\n  bb.orphan_claim_flag as orphan_claim_flag\nfrom {{ ref('claims_preprocessing__medical_claim') }} aa\n     left join {{ ref('claims_preprocessing__encounter_id') }} bb\n     on aa.patient_id = bb.patient_id\n     and aa.claim_id = bb.claim_id\n),\n\n\nencounter_start_and_end_dates as (\nselect\n  encounter_id,\n  min(claim_start_date) as encounter_start_date,\n  max(claim_end_date) as encounter_end_date\nfrom add_encounter_fields\ngroup by encounter_id\n),\n\nadd_encounter_start_and_end_dates as (\nselect\n  aa.*,\n  bb.encounter_start_date,\n  bb.encounter_end_date\nfrom add_encounter_fields aa\n     left join encounter_start_and_end_dates bb\n     on aa.encounter_id = bb.encounter_id\n),\n\n\nadmit_codes as (\nselect\n  encounter_id,\n  max(admit_source_code) as encounter_admit_source_code,\n  max(admit_type_code) as encounter_admit_type_code\nfrom add_encounter_start_and_end_dates\nwhere claim_start_date = encounter_start_date\ngroup by encounter_id\n),\n\n\ndischarge_code as (\nselect\n  encounter_id,\n  max(discharge_disposition_code) as encounter_discharge_disposition_code\nfrom add_encounter_start_and_end_dates\nwhere claim_end_date = encounter_end_date\ngroup by encounter_id\n),\n\n\nadd_admit_and_discharge_codes as (\nselect\n  aa.*,\n  bb.encounter_admit_source_code,\n  bb.encounter_admit_type_code,\n  cc.encounter_discharge_disposition_code\nfrom add_encounter_start_and_end_dates aa\n     left join admit_codes bb on aa.encounter_id = bb.encounter_id\n     left join discharge_code cc on aa.encounter_id = cc.encounter_id\n)\n\n\nselect *\nfrom add_admit_and_discharge_codes", "language": "sql", "package_name": "claims_preprocessing", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\claims_preprocessing", "path": "intermediate\\claims_preprocessing__medical_claim_enhanced.sql", "original_file_path": "models\\intermediate\\claims_preprocessing__medical_claim_enhanced.sql", "name": "claims_preprocessing__medical_claim_enhanced", "alias": "intermediate_medical_claim_enhanced", "checksum": {"name": "sha256", "checksum": "e685bce7fc9c3c600416dd22bb19d49f14554dbb43847cccd3fab51acd1e6695"}, "tags": ["claims_preprocessing"], "refs": [["claims_preprocessing__medical_claim"], ["claims_preprocessing__encounter_id"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": "#0f3d0b"}, "patch_path": "claims_preprocessing://models\\_models.yml", "compiled_path": "../target\\compiled\\claims_preprocessing\\models\\intermediate\\claims_preprocessing__medical_claim_enhanced.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "intermediate_medical_claim_enhanced", "tags": "claims_preprocessing", "enabled": true, "docs": {"show": false}}, "created_at": 1674073789.1648412, "compiled_code": "\n\n\n\n\nwith add_encounter_fields as (\nselect\n  aa.*,\n  bb.encounter_id as encounter_id,\n  bb.encounter_type as encounter_type,\n  bb.encounter_type_detail as encounter_type_detail,\n  bb.orphan_claim_flag as orphan_claim_flag\nfrom tuva.core.staging_medical_claim aa\n     left join tuva.core.intermediate_encounter_id bb\n     on aa.patient_id = bb.patient_id\n     and aa.claim_id = bb.claim_id\n),\n\n\nencounter_start_and_end_dates as (\nselect\n  encounter_id,\n  min(claim_start_date) as encounter_start_date,\n  max(claim_end_date) as encounter_end_date\nfrom add_encounter_fields\ngroup by encounter_id\n),\n\nadd_encounter_start_and_end_dates as (\nselect\n  aa.*,\n  bb.encounter_start_date,\n  bb.encounter_end_date\nfrom add_encounter_fields aa\n     left join encounter_start_and_end_dates bb\n     on aa.encounter_id = bb.encounter_id\n),\n\n\nadmit_codes as (\nselect\n  encounter_id,\n  max(admit_source_code) as encounter_admit_source_code,\n  max(admit_type_code) as encounter_admit_type_code\nfrom add_encounter_start_and_end_dates\nwhere claim_start_date = encounter_start_date\ngroup by encounter_id\n),\n\n\ndischarge_code as (\nselect\n  encounter_id,\n  max(discharge_disposition_code) as encounter_discharge_disposition_code\nfrom add_encounter_start_and_end_dates\nwhere claim_end_date = encounter_end_date\ngroup by encounter_id\n),\n\n\nadd_admit_and_discharge_codes as (\nselect\n  aa.*,\n  bb.encounter_admit_source_code,\n  bb.encounter_admit_type_code,\n  cc.encounter_discharge_disposition_code\nfrom add_encounter_start_and_end_dates aa\n     left join admit_codes bb on aa.encounter_id = bb.encounter_id\n     left join discharge_code cc on aa.encounter_id = cc.encounter_id\n)\n\n\nselect *\nfrom add_admit_and_discharge_codes", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.intermediate_medical_claim_enhanced"}, "model.claims_preprocessing.claims_preprocessing__mutually_exclusive_encounter_type": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_preprocessing.claims_preprocessing__encounter_type"]}, "config": {"enabled": true, "alias": "intermediate_mutually_exclusive_encounter_type", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": "#0f3d0b"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "intermediate", "claims_preprocessing__mutually_exclusive_encounter_type"], "unique_id": "model.claims_preprocessing.claims_preprocessing__mutually_exclusive_encounter_type", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))\n   )\n}}\n\n\n\n\nwith encounter_ranking as (\nselect\n  claim_id,\n  encounter_type,\n  encounter_type_detail,\n  case\n    when encounter_type = 'acute inpatient' then 1\n    when encounter_type = 'skilled nursing' then 2\n    when encounter_type = 'emergency department' then 3\n    when encounter_type = 'urgent care' then 4\n    when encounter_type = 'inpatient rehabilitation' then 5\n    when encounter_type = 'inpatient psychiatric' then 6\n    when encounter_type = 'inpatient substance abuse' then 7\n    when encounter_type = 'ambulatory surgery' then 8\n    when encounter_type = 'dialysis' then 9\n    when encounter_type = 'hospice' then 10\n    when encounter_type = 'home health' then 11\n    when encounter_type = 'outpatient rehabilitation' then 12\n    when encounter_type = 'outpatient mental health' then 13\n    when encounter_type = 'office visit' then 14\n    when encounter_type = 'telehealth' then 15\n    when encounter_type = 'unmapped' then 16\n  end as encounter_rank\n  \nfrom {{ ref('claims_preprocessing__encounter_type') }}\n  \n),\n\n\nencounter_hierarchy as (\nselect\n  claim_id,\n  encounter_type,\n  encounter_type_detail\nfrom (\n    select\n        claim_id,\n        encounter_type,\n\tencounter_type_detail,\n\tencounter_rank,\n        row_number() over (\n            partition by claim_id order by encounter_rank\n        ) as row_num\n    from encounter_ranking\n)\nwhere row_num = 1\n)\n\n\nselect *\nfrom encounter_hierarchy", "language": "sql", "package_name": "claims_preprocessing", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\claims_preprocessing", "path": "intermediate\\claims_preprocessing__mutually_exclusive_encounter_type.sql", "original_file_path": "models\\intermediate\\claims_preprocessing__mutually_exclusive_encounter_type.sql", "name": "claims_preprocessing__mutually_exclusive_encounter_type", "alias": "intermediate_mutually_exclusive_encounter_type", "checksum": {"name": "sha256", "checksum": "d065a92dc725e409e0e661497339da43989b79538109b7b2cb0dc362eecfd429"}, "tags": ["claims_preprocessing"], "refs": [["claims_preprocessing__encounter_type"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": "#0f3d0b"}, "patch_path": "claims_preprocessing://models\\_models.yml", "compiled_path": "../target\\compiled\\claims_preprocessing\\models\\intermediate\\claims_preprocessing__mutually_exclusive_encounter_type.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "intermediate_mutually_exclusive_encounter_type", "tags": "claims_preprocessing", "enabled": true, "docs": {"show": false}}, "created_at": 1674073789.1734395, "compiled_code": "\n\n\n\n\nwith encounter_ranking as (\nselect\n  claim_id,\n  encounter_type,\n  encounter_type_detail,\n  case\n    when encounter_type = 'acute inpatient' then 1\n    when encounter_type = 'skilled nursing' then 2\n    when encounter_type = 'emergency department' then 3\n    when encounter_type = 'urgent care' then 4\n    when encounter_type = 'inpatient rehabilitation' then 5\n    when encounter_type = 'inpatient psychiatric' then 6\n    when encounter_type = 'inpatient substance abuse' then 7\n    when encounter_type = 'ambulatory surgery' then 8\n    when encounter_type = 'dialysis' then 9\n    when encounter_type = 'hospice' then 10\n    when encounter_type = 'home health' then 11\n    when encounter_type = 'outpatient rehabilitation' then 12\n    when encounter_type = 'outpatient mental health' then 13\n    when encounter_type = 'office visit' then 14\n    when encounter_type = 'telehealth' then 15\n    when encounter_type = 'unmapped' then 16\n  end as encounter_rank\n  \nfrom tuva.core.intermediate_encounter_type\n  \n),\n\n\nencounter_hierarchy as (\nselect\n  claim_id,\n  encounter_type,\n  encounter_type_detail\nfrom (\n    select\n        claim_id,\n        encounter_type,\n\tencounter_type_detail,\n\tencounter_rank,\n        row_number() over (\n            partition by claim_id order by encounter_rank\n        ) as row_num\n    from encounter_ranking\n)\nwhere row_num = 1\n)\n\n\nselect *\nfrom encounter_hierarchy", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.intermediate_mutually_exclusive_encounter_type"}, "model.claims_preprocessing.claims_preprocessing__professional_claims_in_institutional_encounters": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__mutually_exclusive_encounter_type", "model.claims_preprocessing.claims_preprocessing__institutional_encounter_start_and_end_dates"]}, "config": {"enabled": true, "alias": "intermediate_professional_claims_in_institutional_encounters", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": "#0f3d0b"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "intermediate", "claims_preprocessing__professional_claims_in_institutional_encounters"], "unique_id": "model.claims_preprocessing.claims_preprocessing__professional_claims_in_institutional_encounters", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))\n   )\n}}\n\n\n\n\nwith relevant_professional_encounter_rows_from_medical_claim as (\nselect\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date,\n  aa.claim_end_date,\n  bb.encounter_type,\n  bb.encounter_type_detail\n  \nfrom {{ ref('claims_preprocessing__medical_claim') }} aa\n     left join {{ ref('claims_preprocessing__mutually_exclusive_encounter_type') }} bb\n     on aa.claim_id = bb.claim_id\nwhere bb.encounter_type_detail\n\t\t   in ('acute inpatient - professional',\n                       'inpatient rehabilitation - professional',\n                       'inpatient psychiatric - professional',\n                       'inpatient substance abuse - professional',\n                       'skilled nursing - professional',\n                       'ambulatory surgery - professional',\n                       'dialysis - professional',\n                       'emergency department - professional',\n                       'urgent care - professional',\n                       'outpatient mental health - professional',\n                       'hospice - professional',\n                       'outpatient rehabilitation - professional',\n                       'home health - professional') \n),\n\n\nrelevant_professional_encounter_claims as (\nselect\n  claim_id,\n  patient_id,\n  min(claim_start_date) as claim_start_date,\n  max(claim_end_date) as claim_end_date,\n  max(encounter_type) as encounter_type,\n  max(encounter_type_detail) as encounter_type_detail\nfrom relevant_professional_encounter_rows_from_medical_claim\ngroup by patient_id, claim_id\n),\n\n\nfind_orphan_professional_claims as (\nselect\n  aa.patient_id,\n  aa.claim_id,\n  bb.encounter_id,\n  aa.encounter_type,\n  aa.encounter_type_detail,\n  case\n    when bb.encounter_id is null then 1\n    else 0\n  end as orphan_claim_flag\n  \nfrom relevant_professional_encounter_claims aa\n     left join\n     {{ ref('claims_preprocessing__institutional_encounter_start_and_end_dates') }} bb\n     on aa.patient_id = bb.patient_id\n     and aa.encounter_type = bb.encounter_type\n     and (aa.claim_start_date\n          between bb.encounter_start_date and bb.encounter_end_date)\n     and (aa.claim_end_date\n          between bb.encounter_start_date and bb.encounter_end_date)\n\t \n)\n\n\n\nselect *\nfrom find_orphan_professional_claims", "language": "sql", "package_name": "claims_preprocessing", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\claims_preprocessing", "path": "intermediate\\claims_preprocessing__professional_claims_in_institutional_encounters.sql", "original_file_path": "models\\intermediate\\claims_preprocessing__professional_claims_in_institutional_encounters.sql", "name": "claims_preprocessing__professional_claims_in_institutional_encounters", "alias": "intermediate_professional_claims_in_institutional_encounters", "checksum": {"name": "sha256", "checksum": "132ae73e5eff80db9ec9435f797f6b27ab35711f4eb4f69f0c2d4aa4932fa375"}, "tags": ["claims_preprocessing"], "refs": [["claims_preprocessing__medical_claim"], ["claims_preprocessing__mutually_exclusive_encounter_type"], ["claims_preprocessing__institutional_encounter_start_and_end_dates"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": "#0f3d0b"}, "patch_path": "claims_preprocessing://models\\_models.yml", "compiled_path": "../target\\compiled\\claims_preprocessing\\models\\intermediate\\claims_preprocessing__professional_claims_in_institutional_encounters.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "intermediate_professional_claims_in_institutional_encounters", "tags": "claims_preprocessing", "enabled": true, "docs": {"show": false}}, "created_at": 1674073789.1831894, "compiled_code": "\n\n\n\n\nwith relevant_professional_encounter_rows_from_medical_claim as (\nselect\n  aa.claim_id,\n  aa.patient_id,\n  aa.claim_start_date,\n  aa.claim_end_date,\n  bb.encounter_type,\n  bb.encounter_type_detail\n  \nfrom tuva.core.staging_medical_claim aa\n     left join tuva.core.intermediate_mutually_exclusive_encounter_type bb\n     on aa.claim_id = bb.claim_id\nwhere bb.encounter_type_detail\n\t\t   in ('acute inpatient - professional',\n                       'inpatient rehabilitation - professional',\n                       'inpatient psychiatric - professional',\n                       'inpatient substance abuse - professional',\n                       'skilled nursing - professional',\n                       'ambulatory surgery - professional',\n                       'dialysis - professional',\n                       'emergency department - professional',\n                       'urgent care - professional',\n                       'outpatient mental health - professional',\n                       'hospice - professional',\n                       'outpatient rehabilitation - professional',\n                       'home health - professional') \n),\n\n\nrelevant_professional_encounter_claims as (\nselect\n  claim_id,\n  patient_id,\n  min(claim_start_date) as claim_start_date,\n  max(claim_end_date) as claim_end_date,\n  max(encounter_type) as encounter_type,\n  max(encounter_type_detail) as encounter_type_detail\nfrom relevant_professional_encounter_rows_from_medical_claim\ngroup by patient_id, claim_id\n),\n\n\nfind_orphan_professional_claims as (\nselect\n  aa.patient_id,\n  aa.claim_id,\n  bb.encounter_id,\n  aa.encounter_type,\n  aa.encounter_type_detail,\n  case\n    when bb.encounter_id is null then 1\n    else 0\n  end as orphan_claim_flag\n  \nfrom relevant_professional_encounter_claims aa\n     left join\n     tuva.core.intermediate_institutional_encounter_start_and_end_dates bb\n     on aa.patient_id = bb.patient_id\n     and aa.encounter_type = bb.encounter_type\n     and (aa.claim_start_date\n          between bb.encounter_start_date and bb.encounter_end_date)\n     and (aa.claim_end_date\n          between bb.encounter_start_date and bb.encounter_end_date)\n\t \n)\n\n\n\nselect *\nfrom find_orphan_professional_claims", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.intermediate_professional_claims_in_institutional_encounters"}, "model.claims_preprocessing.claims_preprocessing__professional_encounters": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__mutually_exclusive_encounter_type"]}, "config": {"enabled": true, "alias": "intermediate_professional_encounters", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": "#0f3d0b"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "intermediate", "claims_preprocessing__professional_encounters"], "unique_id": "model.claims_preprocessing.claims_preprocessing__professional_encounters", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))\n   )\n}}\n\n\n\n\nwith relevant_rows_from_medical_claim as (\nselect\n  aa.patient_id,\n  aa.claim_id,\n  aa.claim_id as encounter_id,\n  bb.encounter_type,\n  bb.encounter_type_detail\nfrom {{ ref('claims_preprocessing__medical_claim') }} aa\n     left join {{ ref('claims_preprocessing__mutually_exclusive_encounter_type') }} bb\n     on aa.claim_id = bb.claim_id\nwhere bb.encounter_type_detail in ('office visit','telehealth','unmapped')\n)\n\n\nselect distinct *\nfrom relevant_rows_from_medical_claim", "language": "sql", "package_name": "claims_preprocessing", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\claims_preprocessing", "path": "intermediate\\claims_preprocessing__professional_encounters.sql", "original_file_path": "models\\intermediate\\claims_preprocessing__professional_encounters.sql", "name": "claims_preprocessing__professional_encounters", "alias": "intermediate_professional_encounters", "checksum": {"name": "sha256", "checksum": "315d26472ddccf1fef7ad9ce11f2fe13dac754a78dc13ce4db20b940a22448bf"}, "tags": ["claims_preprocessing"], "refs": [["claims_preprocessing__medical_claim"], ["claims_preprocessing__mutually_exclusive_encounter_type"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": "#0f3d0b"}, "patch_path": "claims_preprocessing://models\\_models.yml", "compiled_path": "../target\\compiled\\claims_preprocessing\\models\\intermediate\\claims_preprocessing__professional_encounters.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "intermediate_professional_encounters", "tags": "claims_preprocessing", "enabled": true, "docs": {"show": false}}, "created_at": 1674073789.1987278, "compiled_code": "\n\n\n\n\nwith relevant_rows_from_medical_claim as (\nselect\n  aa.patient_id,\n  aa.claim_id,\n  aa.claim_id as encounter_id,\n  bb.encounter_type,\n  bb.encounter_type_detail\nfrom tuva.core.staging_medical_claim aa\n     left join tuva.core.intermediate_mutually_exclusive_encounter_type bb\n     on aa.claim_id = bb.claim_id\nwhere bb.encounter_type_detail in ('office visit','telehealth','unmapped')\n)\n\n\nselect distinct *\nfrom relevant_rows_from_medical_claim", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.intermediate_professional_encounters"}, "model.claims_preprocessing.claims_preprocessing__relevant_encounter_type_claims": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__mutually_exclusive_encounter_type"]}, "config": {"enabled": true, "alias": "intermediate_relevant_encounter_type_claims", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": "#0f3d0b"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "intermediate", "claims_preprocessing__relevant_encounter_type_claims"], "unique_id": "model.claims_preprocessing.claims_preprocessing__relevant_encounter_type_claims", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))\n   )\n}}\n\n\n\n\n-- Here we select all rows from the medical_claim table\n-- that correspond to encounter types where the encounter\n-- may be composed of more than one claim_id.\n-- These encounter types are the ones that may have\n-- institutional claims.\n\n\nwith relevant_encounter_type_rows_from_medical_claim as (\nselect\n  aa.*,\n  bb.encounter_type as encounter_type,\n  bb.encounter_type_detail as encounter_type_detail\nfrom {{ ref('claims_preprocessing__medical_claim') }} aa\n     left join {{ ref('claims_preprocessing__mutually_exclusive_encounter_type') }} bb\n     on aa.claim_id = bb.claim_id\nwhere bb.encounter_type_detail\n\t\t   in ('acute inpatient - institutional',\n                       'inpatient rehabilitation - institutional',\n                       'inpatient psychiatric - institutional',\n                       'inpatient substance abuse - institutional',\n                       'skilled nursing - institutional',\n                       'ambulatory surgery - institutional',\n                       'dialysis - institutional',\n                       'emergency department - institutional',\n                       'urgent care - institutional',\n                       'outpatient mental health - institutional',\n                       'hospice - institutional',\n                       'outpatient rehabilitation - institutional',\n                       'home health - institutional')\n),\n\n\nkey_counts as (\nselect\n  claim_id,\n  count(distinct patient_id) as patient_id_count,\n  count(distinct claim_start_date) as claim_start_date_count,\n  count(distinct claim_end_date) as claim_end_date_count,\n  count(distinct discharge_disposition_code)\n                 as discharge_disposition_code_count,\n  count(distinct facility_npi) as facility_npi_count\n\nfrom relevant_encounter_type_rows_from_medical_claim\ngroup by claim_id\nhaving\n  patient_id_count = 1 and\n  discharge_disposition_code_count = 1 and\n  claim_start_date_count = 1 and\n  claim_end_date_count = 1 and\n  facility_npi_count = 1\n),\n\n\nrelevant_encounter_type_rows_that_meet_counts_requirement as (\nselect rel_enc_types.*\nfrom relevant_encounter_type_rows_from_medical_claim as rel_enc_types\n    left join key_counts\n        on rel_enc_types.claim_id = key_counts.claim_id\n),\n\n\nrelevant_encounter_type_claims as (\nselect\n  claim_id,\n  max(patient_id) as patient_id,\n  max(encounter_type) as encounter_type,\n  max(encounter_type_detail) as encounter_type_detail,\n  min(claim_start_date) as claim_start_date,\n  max(claim_end_date) as claim_end_date,\n  max(discharge_disposition_code) as discharge_disposition_code,\n  max(facility_npi) as facility_npi\nfrom relevant_encounter_type_rows_that_meet_counts_requirement\ngroup by claim_id\n),\n\n\n-- relevant_encounter_type_claims_that_meet_data_quality_requirements as (\n-- select *\n-- from relevant_encounter_type_claims\n-- where claim_start_date <= claim_end_date\n-- ),\n\n\nrelevant_encounter_type_claims_with_row_num as (\nselect\n  patient_id,\n  claim_id,\n  encounter_type,\n  encounter_type_detail,\n  claim_start_date,\n  claim_end_date,\n  discharge_disposition_code,\n  facility_npi,\n  row_number() over (\n    partition by patient_id, encounter_type\n    order by claim_end_date, claim_start_date, claim_id\n  ) as row_num\nfrom relevant_encounter_type_claims\nwhere claim_start_date <= claim_end_date\n),\n\ncheck_for_merges_with_larger_row_num as (\nselect\n  aa.patient_id,\n  aa.encounter_type,\n  aa.encounter_type_detail,\n  aa.claim_id as claim_id_a,\n  bb.claim_id as claim_id_b,\n  aa.row_num as row_num_a,\n  bb.row_num as row_num_b,\n  case\n    -- Claims have same claim_end_date and should be merged:\n    when (aa.claim_end_date = bb.claim_end_date\n          and aa.facility_npi = bb.facility_npi) then 1\n\n    -- Claims have different claim_end_date and are\n    -- adjacent and should be merged:\n    when (aa.claim_end_date + 1 = bb.claim_start_date\n          and aa.facility_npi = bb.facility_npi\n\t  and aa.discharge_disposition_code = '30') then 1\n\n    -- Claims have different claim_end_date and overlap\n    -- and should be merged:\n    when (aa.claim_end_date >= bb.claim_start_date\n          and aa.facility_npi = bb.facility_npi ) then 1\n    else 0\n  end as merge_flag\n\nfrom relevant_encounter_type_claims_with_row_num aa\n     inner join relevant_encounter_type_claims_with_row_num bb\n     on aa.patient_id = bb.patient_id\n     and aa.encounter_type_detail = bb.encounter_type_detail\n     and aa.row_num < bb.row_num\n),\n\n\nmerges_with_larger_row_num as (\nselect\n  patient_id,\n  encounter_type,\n  encounter_type_detail,\n  claim_id_a,\n  claim_id_b,\n  row_num_a,\n  row_num_b,\n  merge_flag\nfrom check_for_merges_with_larger_row_num\nwhere merge_flag = 1\n),\n\n\nclaim_ids_that_merge_with_a_larger_row_num as (\nselect distinct claim_id_a as claim_id\nfrom merges_with_larger_row_num\n),\n\n\nclaim_ids_having_a_smaller_row_num_merging_with_a_larger_row_num as (\nselect distinct aa.claim_id as claim_id\nfrom relevant_encounter_type_claims_with_row_num aa\n     inner join\n     merges_with_larger_row_num bb\n     on aa.patient_id = bb.patient_id\n     and aa.encounter_type_detail = bb.encounter_type_detail\n     and bb.row_num_a < aa.row_num\n     and bb.row_num_b > aa.row_num\n),\n\n\nrelevant_encounter_type_claims_with_row_num_and_close_flag as (\nselect\n  rel.patient_id,\n  rel.claim_id,\n  rel.encounter_type,\n  rel.encounter_type_detail,\n  rel.claim_start_date,\n  rel.claim_end_date,\n  rel.discharge_disposition_code,\n  rel.facility_npi,\n  rel.row_num ,\n  case when rel_w_lar.claim_id is null and rel_w_small.claim_id is null then 1\n    else 0\n  end as close_flag\nfrom relevant_encounter_type_claims_with_row_num as rel\nleft join claim_ids_that_merge_with_a_larger_row_num as rel_w_lar\n        on rel.claim_id = rel_w_lar.claim_id\nleft join claim_ids_having_a_smaller_row_num_merging_with_a_larger_row_num as rel_w_small\n        on rel.claim_id = rel_w_small.claim_id\n\n\n)\n    select * From relevant_encounter_type_claims_with_row_num_and_close_flag", "language": "sql", "package_name": "claims_preprocessing", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\claims_preprocessing", "path": "intermediate\\claims_preprocessing__relevant_encounter_type_claims.sql", "original_file_path": "models\\intermediate\\claims_preprocessing__relevant_encounter_type_claims.sql", "name": "claims_preprocessing__relevant_encounter_type_claims", "alias": "intermediate_relevant_encounter_type_claims", "checksum": {"name": "sha256", "checksum": "156e1be63a24b26363b884a9b84dd853bc126bfe7dcf0e7174d1e73188ff3fc9"}, "tags": ["claims_preprocessing"], "refs": [["claims_preprocessing__medical_claim"], ["claims_preprocessing__mutually_exclusive_encounter_type"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": "#0f3d0b"}, "patch_path": "claims_preprocessing://models\\_models.yml", "compiled_path": "../target\\compiled\\claims_preprocessing\\models\\intermediate\\claims_preprocessing__relevant_encounter_type_claims.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "intermediate_relevant_encounter_type_claims", "tags": "claims_preprocessing", "enabled": true, "docs": {"show": false}}, "created_at": 1674073789.208638, "compiled_code": "\n\n\n\n\n-- Here we select all rows from the medical_claim table\n-- that correspond to encounter types where the encounter\n-- may be composed of more than one claim_id.\n-- These encounter types are the ones that may have\n-- institutional claims.\n\n\nwith relevant_encounter_type_rows_from_medical_claim as (\nselect\n  aa.*,\n  bb.encounter_type as encounter_type,\n  bb.encounter_type_detail as encounter_type_detail\nfrom tuva.core.staging_medical_claim aa\n     left join tuva.core.intermediate_mutually_exclusive_encounter_type bb\n     on aa.claim_id = bb.claim_id\nwhere bb.encounter_type_detail\n\t\t   in ('acute inpatient - institutional',\n                       'inpatient rehabilitation - institutional',\n                       'inpatient psychiatric - institutional',\n                       'inpatient substance abuse - institutional',\n                       'skilled nursing - institutional',\n                       'ambulatory surgery - institutional',\n                       'dialysis - institutional',\n                       'emergency department - institutional',\n                       'urgent care - institutional',\n                       'outpatient mental health - institutional',\n                       'hospice - institutional',\n                       'outpatient rehabilitation - institutional',\n                       'home health - institutional')\n),\n\n\nkey_counts as (\nselect\n  claim_id,\n  count(distinct patient_id) as patient_id_count,\n  count(distinct claim_start_date) as claim_start_date_count,\n  count(distinct claim_end_date) as claim_end_date_count,\n  count(distinct discharge_disposition_code)\n                 as discharge_disposition_code_count,\n  count(distinct facility_npi) as facility_npi_count\n\nfrom relevant_encounter_type_rows_from_medical_claim\ngroup by claim_id\nhaving\n  patient_id_count = 1 and\n  discharge_disposition_code_count = 1 and\n  claim_start_date_count = 1 and\n  claim_end_date_count = 1 and\n  facility_npi_count = 1\n),\n\n\nrelevant_encounter_type_rows_that_meet_counts_requirement as (\nselect rel_enc_types.*\nfrom relevant_encounter_type_rows_from_medical_claim as rel_enc_types\n    left join key_counts\n        on rel_enc_types.claim_id = key_counts.claim_id\n),\n\n\nrelevant_encounter_type_claims as (\nselect\n  claim_id,\n  max(patient_id) as patient_id,\n  max(encounter_type) as encounter_type,\n  max(encounter_type_detail) as encounter_type_detail,\n  min(claim_start_date) as claim_start_date,\n  max(claim_end_date) as claim_end_date,\n  max(discharge_disposition_code) as discharge_disposition_code,\n  max(facility_npi) as facility_npi\nfrom relevant_encounter_type_rows_that_meet_counts_requirement\ngroup by claim_id\n),\n\n\n-- relevant_encounter_type_claims_that_meet_data_quality_requirements as (\n-- select *\n-- from relevant_encounter_type_claims\n-- where claim_start_date <= claim_end_date\n-- ),\n\n\nrelevant_encounter_type_claims_with_row_num as (\nselect\n  patient_id,\n  claim_id,\n  encounter_type,\n  encounter_type_detail,\n  claim_start_date,\n  claim_end_date,\n  discharge_disposition_code,\n  facility_npi,\n  row_number() over (\n    partition by patient_id, encounter_type\n    order by claim_end_date, claim_start_date, claim_id\n  ) as row_num\nfrom relevant_encounter_type_claims\nwhere claim_start_date <= claim_end_date\n),\n\ncheck_for_merges_with_larger_row_num as (\nselect\n  aa.patient_id,\n  aa.encounter_type,\n  aa.encounter_type_detail,\n  aa.claim_id as claim_id_a,\n  bb.claim_id as claim_id_b,\n  aa.row_num as row_num_a,\n  bb.row_num as row_num_b,\n  case\n    -- Claims have same claim_end_date and should be merged:\n    when (aa.claim_end_date = bb.claim_end_date\n          and aa.facility_npi = bb.facility_npi) then 1\n\n    -- Claims have different claim_end_date and are\n    -- adjacent and should be merged:\n    when (aa.claim_end_date + 1 = bb.claim_start_date\n          and aa.facility_npi = bb.facility_npi\n\t  and aa.discharge_disposition_code = '30') then 1\n\n    -- Claims have different claim_end_date and overlap\n    -- and should be merged:\n    when (aa.claim_end_date >= bb.claim_start_date\n          and aa.facility_npi = bb.facility_npi ) then 1\n    else 0\n  end as merge_flag\n\nfrom relevant_encounter_type_claims_with_row_num aa\n     inner join relevant_encounter_type_claims_with_row_num bb\n     on aa.patient_id = bb.patient_id\n     and aa.encounter_type_detail = bb.encounter_type_detail\n     and aa.row_num < bb.row_num\n),\n\n\nmerges_with_larger_row_num as (\nselect\n  patient_id,\n  encounter_type,\n  encounter_type_detail,\n  claim_id_a,\n  claim_id_b,\n  row_num_a,\n  row_num_b,\n  merge_flag\nfrom check_for_merges_with_larger_row_num\nwhere merge_flag = 1\n),\n\n\nclaim_ids_that_merge_with_a_larger_row_num as (\nselect distinct claim_id_a as claim_id\nfrom merges_with_larger_row_num\n),\n\n\nclaim_ids_having_a_smaller_row_num_merging_with_a_larger_row_num as (\nselect distinct aa.claim_id as claim_id\nfrom relevant_encounter_type_claims_with_row_num aa\n     inner join\n     merges_with_larger_row_num bb\n     on aa.patient_id = bb.patient_id\n     and aa.encounter_type_detail = bb.encounter_type_detail\n     and bb.row_num_a < aa.row_num\n     and bb.row_num_b > aa.row_num\n),\n\n\nrelevant_encounter_type_claims_with_row_num_and_close_flag as (\nselect\n  rel.patient_id,\n  rel.claim_id,\n  rel.encounter_type,\n  rel.encounter_type_detail,\n  rel.claim_start_date,\n  rel.claim_end_date,\n  rel.discharge_disposition_code,\n  rel.facility_npi,\n  rel.row_num ,\n  case when rel_w_lar.claim_id is null and rel_w_small.claim_id is null then 1\n    else 0\n  end as close_flag\nfrom relevant_encounter_type_claims_with_row_num as rel\nleft join claim_ids_that_merge_with_a_larger_row_num as rel_w_lar\n        on rel.claim_id = rel_w_lar.claim_id\nleft join claim_ids_having_a_smaller_row_num_merging_with_a_larger_row_num as rel_w_small\n        on rel.claim_id = rel_w_small.claim_id\n\n\n)\n    select * From relevant_encounter_type_claims_with_row_num_and_close_flag", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.intermediate_relevant_encounter_type_claims"}, "model.claims_preprocessing.claims_preprocessing__eligibility": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_data_model.eligibility"]}, "config": {"enabled": true, "alias": "staging_eligibility", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": "#0f3d0b"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "staging", "claims_preprocessing__eligibility"], "unique_id": "model.claims_preprocessing.claims_preprocessing__eligibility", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))\n   )\n}}\n\n\n\n\nselect *\nfrom {{ var('eligibility')}}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\claims_preprocessing", "path": "staging\\claims_preprocessing__eligibility.sql", "original_file_path": "models\\staging\\claims_preprocessing__eligibility.sql", "name": "claims_preprocessing__eligibility", "alias": "staging_eligibility", "checksum": {"name": "sha256", "checksum": "e3cb96dae62244ad587e885aa70c013bede7c2d828fffc370a38a41a7b171663"}, "tags": ["claims_preprocessing"], "refs": [["eligibility"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": "#0f3d0b"}, "patch_path": "claims_preprocessing://models\\_models.yml", "compiled_path": "../target\\compiled\\claims_preprocessing\\models\\staging\\claims_preprocessing__eligibility.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "staging_eligibility", "tags": "claims_preprocessing", "enabled": true, "docs": {"show": false}}, "created_at": 1674073789.0747285, "compiled_code": "\n\n\n\n\nselect *\nfrom tuva.the_tuva_project_input.eligibility", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.staging_eligibility"}, "model.claims_preprocessing.claims_preprocessing__medical_claim": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_data_model.medical_claim"]}, "config": {"enabled": true, "alias": "staging_medical_claim", "schema": "core", "database": "tuva", "tags": ["claims_preprocessing"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": "#0f3d0b"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "core", "fqn": ["claims_preprocessing", "staging", "claims_preprocessing__medical_claim"], "unique_id": "model.claims_preprocessing.claims_preprocessing__medical_claim", "raw_code": "{{ config(\n     enabled = var('claims_preprocessing_enabled',var('tuva_packages_enabled',True))\n   )\n}}\n\n\n\n\nselect *\nfrom {{ var('medical_claim')}}", "language": "sql", "package_name": "claims_preprocessing", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\claims_preprocessing", "path": "staging\\claims_preprocessing__medical_claim.sql", "original_file_path": "models\\staging\\claims_preprocessing__medical_claim.sql", "name": "claims_preprocessing__medical_claim", "alias": "staging_medical_claim", "checksum": {"name": "sha256", "checksum": "a60049ca50f87fe239a30a8c131e641cf302af71297c0f449d12028966878871"}, "tags": ["claims_preprocessing"], "refs": [["medical_claim"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": "#0f3d0b"}, "patch_path": "claims_preprocessing://models\\_models.yml", "compiled_path": "../target\\compiled\\claims_preprocessing\\models\\staging\\claims_preprocessing__medical_claim.sql", "build_path": null, "deferred": false, "unrendered_config": {"materialized": "table", "database": "tuva", "schema": "core", "alias": "staging_medical_claim", "tags": "claims_preprocessing", "enabled": true, "docs": {"show": false}}, "created_at": 1674073789.0903523, "compiled_code": "\n\n\n\n\nselect *\nfrom tuva.the_tuva_project_input.medical_claim", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.core.staging_medical_claim"}, "model.cms_chronic_conditions.cms_chronic_conditions__chronic_conditions_pivoted": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.get_column_values", "macro.dbt_utils.pivot"], "nodes": ["seed.terminology.terminology__cms_chronic_conditions", "model.cms_chronic_conditions.cms_chronic_conditions__chronic_conditions_unioned", "seed.terminology.terminology__cms_chronic_conditions"]}, "config": {"enabled": true, "alias": "chronic_conditions_pivoted", "schema": "cms_chronic_conditions", "database": "tuva", "tags": ["cms_chronic_conditions"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#2e0e0e"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "cms_chronic_conditions", "fqn": ["cms_chronic_conditions", "cms_chronic_conditions__chronic_conditions_pivoted"], "unique_id": "model.cms_chronic_conditions.cms_chronic_conditions__chronic_conditions_pivoted", "raw_code": "{{ config(enabled = var('cms_chronic_conditions_enabled',var('tuva_packages_enabled',True)) ) }}\n\nwith chronic_conditions as (\n\n    select distinct\n          condition\n        , condition_column_name\n    from {{ ref('terminology__cms_chronic_conditions') }}\n\n),\n\nconditions as (\n\n    select\n          chronic_conditions_unioned.patient_id\n        , chronic_conditions.condition_column_name\n        , 1 as condition_count\n    from {{ ref('cms_chronic_conditions__chronic_conditions_unioned') }} as chronic_conditions_unioned\n         inner join chronic_conditions as chronic_conditions\n             on chronic_conditions_unioned.condition =\n                chronic_conditions.condition\n\n)\n\n\n   select\n    patient_id\n    , {{ dbt_utils.pivot(\n          column='condition_column_name'\n        , values=dbt_utils.get_column_values(ref ('terminology__cms_chronic_conditions'), 'condition_column_name', order_by= 'condition_column_name')\n        , agg='max'\n        , then_value= 1\n        , else_value= 0\n      ) }}\nfrom conditions\ngroup by\n    patient_id", "language": "sql", "package_name": "cms_chronic_conditions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\cms_chronic_conditions", "path": "cms_chronic_conditions__chronic_conditions_pivoted.sql", "original_file_path": "models\\cms_chronic_conditions__chronic_conditions_pivoted.sql", "name": "cms_chronic_conditions__chronic_conditions_pivoted", "alias": "chronic_conditions_pivoted", "checksum": {"name": "sha256", "checksum": "f1ad488d047d693a4d81ff1ac69847f354b89493b236912b2ffdb3bcbe7b3aaa"}, "tags": ["cms_chronic_conditions"], "refs": [["terminology__cms_chronic_conditions"], ["cms_chronic_conditions__chronic_conditions_unioned"], ["terminology__cms_chronic_conditions"]], "sources": [], "metrics": [], "description": "This model pivots conditions on the patient level (i.e. one record per  patient) with flags for each chronic condition.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique ID for the patient.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "acute_myocardial_infarction": {"name": "acute_myocardial_infarction", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "adhd_conduct_disorders_and_hyperkinetic_syndrome": {"name": "adhd_conduct_disorders_and_hyperkinetic_syndrome", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alcohol_use_disorders": {"name": "alcohol_use_disorders", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "alzheimers_disease": {"name": "alzheimers_disease", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "anemia": {"name": "anemia", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "anxiety_disorders": {"name": "anxiety_disorders", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "asthma": {"name": "asthma", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "atrial_fibrillation_and_flutter": {"name": "atrial_fibrillation_and_flutter", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "autism_spectrum_disorders": {"name": "autism_spectrum_disorders", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "benign_prostatic_hyperplasia": {"name": "benign_prostatic_hyperplasia", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "bipolar_disorder": {"name": "bipolar_disorder", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancer_breast": {"name": "cancer_breast", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancer_colorectal": {"name": "cancer_colorectal", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancer_endometrial": {"name": "cancer_endometrial", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancer_lung": {"name": "cancer_lung", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancer_prostate": {"name": "cancer_prostate", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cancer_urologic_kidney_renal_pelvis_and_ureter": {"name": "cancer_urologic_kidney_renal_pelvis_and_ureter", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cataract": {"name": "cataract", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cerebral_palsy": {"name": "cerebral_palsy", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "chronic_kidney_disease": {"name": "chronic_kidney_disease", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "chronic_obstructive_pulmonary_disease": {"name": "chronic_obstructive_pulmonary_disease", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "cystic_fibrosis_and_other_metabolic_developmental_disorders": {"name": "cystic_fibrosis_and_other_metabolic_developmental_disorders", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depression_bipolar_or_other_depressive_mood_disorders": {"name": "depression_bipolar_or_other_depressive_mood_disorders", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "depressive_disorders": {"name": "depressive_disorders", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diabetes": {"name": "diabetes", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "drug_use_disorders": {"name": "drug_use_disorders", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "epilepsy": {"name": "epilepsy", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "fibromyalgia_and_chronic_pain_and_fatigue": {"name": "fibromyalgia_and_chronic_pain_and_fatigue", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "glaucoma": {"name": "glaucoma", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "heart_failure_and_non_ischemic_heart_disease": {"name": "heart_failure_and_non_ischemic_heart_disease", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hepatitis_a": {"name": "hepatitis_a", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hepatitis_b_acute_or_unspecified": {"name": "hepatitis_b_acute_or_unspecified", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hepatitis_b_chronic": {"name": "hepatitis_b_chronic", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hepatitis_c_acute": {"name": "hepatitis_c_acute", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hepatitis_c_chronic": {"name": "hepatitis_c_chronic", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hepatitis_c_unspecified": {"name": "hepatitis_c_unspecified", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hepatitis_d": {"name": "hepatitis_d", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hepatitis_e": {"name": "hepatitis_e", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hip_pelvic_fracture": {"name": "hip_pelvic_fracture", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "human_immunodeficiency_virus_and_or_acquired_immunodeficiency_syndrome_hiv_aids": {"name": "human_immunodeficiency_virus_and_or_acquired_immunodeficiency_syndrome_hiv_aids", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hyperlipidemia": {"name": "hyperlipidemia", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hypertension": {"name": "hypertension", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "hypothyroidism": {"name": "hypothyroidism", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "intellectual_disabilities_and_related_conditions": {"name": "intellectual_disabilities_and_related_conditions", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ischemic_heart_disease": {"name": "ischemic_heart_disease", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "learning_disabilities": {"name": "learning_disabilities", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "leukemias_and_lymphomas": {"name": "leukemias_and_lymphomas", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "liver_disease_cirrhosis_and_other_liver_conditions_except_viral_hepatitis": {"name": "liver_disease_cirrhosis_and_other_liver_conditions_except_viral_hepatitis", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "migraine_and_chronic_headache": {"name": "migraine_and_chronic_headache", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "mobility_impairments": {"name": "mobility_impairments", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "multiple_sclerosis_and_transverse_myelitis": {"name": "multiple_sclerosis_and_transverse_myelitis", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "muscular_dystrophy": {"name": "muscular_dystrophy", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "non_alzheimers_dementia": {"name": "non_alzheimers_dementia", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "obesity": {"name": "obesity", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "opioid_use_disorder_oud": {"name": "opioid_use_disorder_oud", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "osteoporosis_with_or_without_pathological_fracture": {"name": "osteoporosis_with_or_without_pathological_fracture", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "other_developmental_delays": {"name": "other_developmental_delays", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "parkinsons_disease_and_secondary_parkinsonism": {"name": "parkinsons_disease_and_secondary_parkinsonism", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "peripheral_vascular_disease_pvd": {"name": "peripheral_vascular_disease_pvd", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "personality_disorders": {"name": "personality_disorders", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pneumonia_all_cause": {"name": "pneumonia_all_cause", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "post_traumatic_stress_disorder_ptsd": {"name": "post_traumatic_stress_disorder_ptsd", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pressure_and_chronic_ulcers": {"name": "pressure_and_chronic_ulcers", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "rheumatoid_arthritis_osteoarthritis": {"name": "rheumatoid_arthritis_osteoarthritis", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schizophrenia": {"name": "schizophrenia", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "schizophrenia_and_other_psychotic_disorders": {"name": "schizophrenia_and_other_psychotic_disorders", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sensory_blindness_and_visual_impairment": {"name": "sensory_blindness_and_visual_impairment", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sensory_deafness_and_hearing_impairment": {"name": "sensory_deafness_and_hearing_impairment", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "sickle_cell_disease": {"name": "sickle_cell_disease", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spina_bifida_and_other_congenital_anomalies_of_the_nervous_system": {"name": "spina_bifida_and_other_congenital_anomalies_of_the_nervous_system", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spinal_cord_injury": {"name": "spinal_cord_injury", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "stroke_transient_ischemic_attack": {"name": "stroke_transient_ischemic_attack", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "tobacco_use": {"name": "tobacco_use", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "traumatic_brain_injury_and_nonpsychotic_mental_disorders_due_to_brain_damage": {"name": "traumatic_brain_injury_and_nonpsychotic_mental_disorders_due_to_brain_damage", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}, "viral_hepatitis_general": {"name": "viral_hepatitis_general", "description": "chronic condition flag 1 or 0", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": "#2e0e0e"}, "patch_path": "cms_chronic_conditions://models\\_models.yml", "compiled_path": "../target\\compiled\\cms_chronic_conditions\\models\\cms_chronic_conditions__chronic_conditions_pivoted.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "cms_chronic_conditions", "alias": "chronic_conditions_pivoted", "tags": "cms_chronic_conditions", "materialized": "table", "enabled": true, "docs": {"node_color": "#2e0e0e"}}, "created_at": 1674073789.2785397, "compiled_code": "\n\nwith chronic_conditions as (\n\n    select distinct\n          condition\n        , condition_column_name\n    from tuva.terminology.cms_chronic_conditions\n\n),\n\nconditions as (\n\n    select\n          chronic_conditions_unioned.patient_id\n        , chronic_conditions.condition_column_name\n        , 1 as condition_count\n    from tuva.cms_chronic_conditions.chronic_conditions_unioned as chronic_conditions_unioned\n         inner join chronic_conditions as chronic_conditions\n             on chronic_conditions_unioned.condition =\n                chronic_conditions.condition\n\n)\n\n\n   select\n    patient_id\n    , \n  \n    max(\n      \n      case\n      when condition_column_name = 'acute_myocardial_infarction'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"acute_myocardial_infarction\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'adhd_conduct_disorders_and_hyperkinetic_syndrome'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"adhd_conduct_disorders_and_hyperkinetic_syndrome\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'alcohol_use_disorders'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"alcohol_use_disorders\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'alzheimers_disease'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"alzheimers_disease\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'anemia'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"anemia\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'anxiety_disorders'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"anxiety_disorders\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'asthma'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"asthma\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'atrial_fibrillation_and_flutter'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"atrial_fibrillation_and_flutter\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'autism_spectrum_disorders'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"autism_spectrum_disorders\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'benign_prostatic_hyperplasia'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"benign_prostatic_hyperplasia\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'bipolar_disorder'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"bipolar_disorder\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'cancer_breast'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"cancer_breast\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'cancer_colorectal'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"cancer_colorectal\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'cancer_endometrial'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"cancer_endometrial\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'cancer_lung'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"cancer_lung\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'cancer_prostate'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"cancer_prostate\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'cancer_urologic_kidney_renal_pelvis_and_ureter'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"cancer_urologic_kidney_renal_pelvis_and_ureter\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'cataract'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"cataract\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'cerebral_palsy'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"cerebral_palsy\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'chronic_kidney_disease'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"chronic_kidney_disease\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'chronic_obstructive_pulmonary_disease'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"chronic_obstructive_pulmonary_disease\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'cystic_fibrosis_and_other_metabolic_developmental_disorders'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"cystic_fibrosis_and_other_metabolic_developmental_disorders\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'depression_bipolar_or_other_depressive_mood_disorders'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"depression_bipolar_or_other_depressive_mood_disorders\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'depressive_disorders'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"depressive_disorders\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'diabetes'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"diabetes\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'drug_use_disorders'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"drug_use_disorders\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'epilepsy'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"epilepsy\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'fibromyalgia_and_chronic_pain_and_fatigue'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"fibromyalgia_and_chronic_pain_and_fatigue\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'glaucoma'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"glaucoma\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'heart_failure_and_non_ischemic_heart_disease'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"heart_failure_and_non_ischemic_heart_disease\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hepatitis_a'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"hepatitis_a\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hepatitis_b_acute_or_unspecified'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"hepatitis_b_acute_or_unspecified\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hepatitis_b_chronic'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"hepatitis_b_chronic\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hepatitis_c_acute'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"hepatitis_c_acute\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hepatitis_c_chronic'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"hepatitis_c_chronic\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hepatitis_c_unspecified'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"hepatitis_c_unspecified\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hepatitis_d'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"hepatitis_d\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hepatitis_e'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"hepatitis_e\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hip_pelvic_fracture'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"hip_pelvic_fracture\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'human_immunodeficiency_virus_and_or_acquired_immunodeficiency_syndrome_hiv_aids'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"human_immunodeficiency_virus_and_or_acquired_immunodeficiency_syndrome_hiv_aids\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hyperlipidemia'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"hyperlipidemia\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hypertension'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"hypertension\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'hypothyroidism'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"hypothyroidism\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'intellectual_disabilities_and_related_conditions'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"intellectual_disabilities_and_related_conditions\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'ischemic_heart_disease'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"ischemic_heart_disease\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'learning_disabilities'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"learning_disabilities\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'leukemias_and_lymphomas'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"leukemias_and_lymphomas\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'liver_disease_cirrhosis_and_other_liver_conditions_except_viral_hepatitis'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"liver_disease_cirrhosis_and_other_liver_conditions_except_viral_hepatitis\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'migraine_and_chronic_headache'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"migraine_and_chronic_headache\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'mobility_impairments'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"mobility_impairments\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'multiple_sclerosis_and_transverse_myelitis'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"multiple_sclerosis_and_transverse_myelitis\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'muscular_dystrophy'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"muscular_dystrophy\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'non_alzheimers_dementia'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"non_alzheimers_dementia\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'obesity'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"obesity\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'opioid_use_disorder_oud'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"opioid_use_disorder_oud\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'osteoporosis_with_or_without_pathological_fracture'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"osteoporosis_with_or_without_pathological_fracture\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'other_developmental_delays'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"other_developmental_delays\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'parkinsons_disease_and_secondary_parkinsonism'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"parkinsons_disease_and_secondary_parkinsonism\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'peripheral_vascular_disease_pvd'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"peripheral_vascular_disease_pvd\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'personality_disorders'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"personality_disorders\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'pneumonia_all_cause'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"pneumonia_all_cause\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'post_traumatic_stress_disorder_ptsd'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"post_traumatic_stress_disorder_ptsd\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'pressure_and_chronic_ulcers'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"pressure_and_chronic_ulcers\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'rheumatoid_arthritis_osteoarthritis'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"rheumatoid_arthritis_osteoarthritis\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'schizophrenia'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"schizophrenia\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'schizophrenia_and_other_psychotic_disorders'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"schizophrenia_and_other_psychotic_disorders\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'sensory_blindness_and_visual_impairment'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"sensory_blindness_and_visual_impairment\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'sensory_deafness_and_hearing_impairment'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"sensory_deafness_and_hearing_impairment\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'sickle_cell_disease'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"sickle_cell_disease\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'spina_bifida_and_other_congenital_anomalies_of_the_nervous_system'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"spina_bifida_and_other_congenital_anomalies_of_the_nervous_system\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'spinal_cord_injury'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"spinal_cord_injury\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'stroke_transient_ischemic_attack'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"stroke_transient_ischemic_attack\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'tobacco_use'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tobacco_use\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'traumatic_brain_injury_and_nonpsychotic_mental_disorders_due_to_brain_damage'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"traumatic_brain_injury_and_nonpsychotic_mental_disorders_due_to_brain_damage\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when condition_column_name = 'viral_hepatitis_general'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"viral_hepatitis_general\"\n      \n    \n    \n  \n\nfrom conditions\ngroup by\n    patient_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.cms_chronic_conditions.chronic_conditions_pivoted"}, "model.cms_chronic_conditions.cms_chronic_conditions__chronic_conditions_unioned": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_all", "model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_hiv_aids", "model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_oud"]}, "config": {"enabled": true, "alias": "chronic_conditions_unioned", "schema": "cms_chronic_conditions", "database": "tuva", "tags": ["cms_chronic_conditions"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#2e0e0e"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "cms_chronic_conditions", "fqn": ["cms_chronic_conditions", "cms_chronic_conditions__chronic_conditions_unioned"], "unique_id": "model.cms_chronic_conditions.cms_chronic_conditions__chronic_conditions_unioned", "raw_code": "{{ config(enabled = var('cms_chronic_conditions_enabled',var('tuva_packages_enabled',True)) ) }}\n\nwith conditions_unioned as (\n\n    select *\n    from {{ ref('cms_chronic_conditions__stg_chronic_condition_all') }}\n\n    union distinct\n\n    select *\n    from {{ ref('cms_chronic_conditions__stg_chronic_condition_hiv_aids') }}\n\n    union distinct\n\n    select *\n    from {{ ref('cms_chronic_conditions__stg_chronic_condition_oud') }}\n\n)\n\nselect\n      patient_id\n    , encounter_id\n    , encounter_start_date\n    , chronic_condition_type\n    , condition_category\n    , condition\n    , data_source\nfrom conditions_unioned", "language": "sql", "package_name": "cms_chronic_conditions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\cms_chronic_conditions", "path": "cms_chronic_conditions__chronic_conditions_unioned.sql", "original_file_path": "models\\cms_chronic_conditions__chronic_conditions_unioned.sql", "name": "cms_chronic_conditions__chronic_conditions_unioned", "alias": "chronic_conditions_unioned", "checksum": {"name": "sha256", "checksum": "0da1a3a31dadf3d0c73dab88d669bc50fc1490e7c839e6b3c4d2b63be36e99d2"}, "tags": ["cms_chronic_conditions"], "refs": [["cms_chronic_conditions__stg_chronic_condition_all"], ["cms_chronic_conditions__stg_chronic_condition_hiv_aids"], ["cms_chronic_conditions__stg_chronic_condition_oud"]], "sources": [], "metrics": [], "description": "This model unions condition flags from the 3 upstream stage models that calculate them.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique ID for the patient.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "encounter_id": {"name": "encounter_id", "description": "Unique ID for each encounter (visit).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "encounter_start_date": {"name": "encounter_start_date", "description": "The date the encounter began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "chronic_condition_type": {"name": "chronic_condition_type", "description": "The type of chronic condition as defined by CMS.  ('Common' or 'Other chronic or potentially disabling conditions')\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "condition_category": {"name": "condition_category", "description": "The category of the condition (e.g. Cardiovascular Disease).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "condition": {"name": "condition", "description": "The name of the chronic condition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_source": {"name": "data_source", "description": "Indicates the name of the source dataset (e.g. Medicare Claims).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": "#2e0e0e"}, "patch_path": "cms_chronic_conditions://models\\_models.yml", "compiled_path": "../target\\compiled\\cms_chronic_conditions\\models\\cms_chronic_conditions__chronic_conditions_unioned.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "cms_chronic_conditions", "alias": "chronic_conditions_unioned", "tags": "cms_chronic_conditions", "materialized": "table", "enabled": true, "docs": {"node_color": "#2e0e0e"}}, "created_at": 1674073789.29538, "compiled_code": "\n\nwith conditions_unioned as (\n\n    select *\n    from tuva.cms_chronic_conditions.stg_chronic_condition_all\n\n    union distinct\n\n    select *\n    from tuva.cms_chronic_conditions.stg_chronic_condition_hiv_aids\n\n    union distinct\n\n    select *\n    from tuva.cms_chronic_conditions.stg_chronic_condition_oud\n\n)\n\nselect\n      patient_id\n    , encounter_id\n    , encounter_start_date\n    , chronic_condition_type\n    , condition_category\n    , condition\n    , data_source\nfrom conditions_unioned", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.cms_chronic_conditions.chronic_conditions_unioned"}, "model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_all": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.type_string"], "nodes": ["seed.terminology.terminology__cms_chronic_conditions", "model.claims_preprocessing.claims_preprocessing__encounter", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition"]}, "config": {"enabled": true, "alias": "stg_chronic_condition_all", "schema": "cms_chronic_conditions", "database": "tuva", "tags": ["cms_chronic_conditions"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": "#2e0e0e"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "cms_chronic_conditions", "fqn": ["cms_chronic_conditions", "staging", "cms_chronic_conditions__stg_chronic_condition_all"], "unique_id": "model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_all", "raw_code": "{{ config(enabled = var('cms_chronic_conditions_enabled',var('tuva_packages_enabled',True)) ) }}\n\nwith chronic_conditions as (\n\n    select * from {{ ref('terminology__cms_chronic_conditions') }}\n\n),\n\npatient_encounters as (\n\n    select\n          encounter.patient_id\n        , encounter.encounter_id\n        , encounter.encounter_start_date\n        , encounter.ms_drg_code\n        , encounter.data_source\n        , replace(condition.code,'.','') as condition_code\n        , condition.code_type as condition_code_type\n        , replace(procedure.code,'.','') as procedure_code\n        , procedure.code_type as procedure_code_type\n    from {{ var('encounter') }} as encounter\n         left join {{ var('condition') }} as condition\n             on encounter.encounter_id = condition.encounter_id\n         left join {{ var('procedure') }}  as procedure\n             on encounter.encounter_id = procedure.encounter_id\n\n),\n\ninclusions_diagnosis as (\n\n    select\n          patient_encounters.patient_id\n        , patient_encounters.encounter_id\n        , patient_encounters.encounter_start_date\n        , patient_encounters.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_encounters\n         inner join chronic_conditions\n             on patient_encounters.condition_code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'ICD-10-CM'\n    and chronic_conditions.additional_logic = 'None'\n\n),\n\ninclusions_procedure as (\n\n    select\n          patient_encounters.patient_id\n        , patient_encounters.encounter_id\n        , patient_encounters.encounter_start_date\n        , patient_encounters.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_encounters\n         inner join chronic_conditions\n             on patient_encounters.procedure_code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system in ('ICD-10-PCS', 'HCPCS')\n    and chronic_conditions.additional_logic = 'None'\n\n),\n\ninclusions_ms_drg as (\n\n    select\n          patient_encounters.patient_id\n        , patient_encounters.encounter_id\n        , patient_encounters.encounter_start_date\n        , patient_encounters.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_encounters\n         inner join chronic_conditions\n             on patient_encounters.ms_drg_code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'MS-DRG'\n    and chronic_conditions.additional_logic = 'None'\n\n),\n\nexclusions_diagnosis as (\n\n    select distinct\n          patient_encounters.encounter_id\n        , chronic_conditions.condition\n    from patient_encounters\n         inner join chronic_conditions\n             on patient_encounters.condition_code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Exclude'\n    and chronic_conditions.code_system = 'ICD-10-CM'\n\n),\n\ninclusions_unioned as (\n\n    select * from inclusions_diagnosis\n    union distinct\n    select * from inclusions_procedure\n    union distinct\n    select * from inclusions_ms_drg\n\n)\n\nselect distinct\n      cast(inclusions_unioned.patient_id as {{ dbt.type_string() }}) as patient_id\n    , cast(inclusions_unioned.encounter_id as {{ dbt.type_string() }}) as encounter_id\n    , cast(inclusions_unioned.encounter_start_date as date)\n      as encounter_start_date\n    , cast(inclusions_unioned.chronic_condition_type as {{ dbt.type_string() }})\n      as chronic_condition_type\n    , cast(inclusions_unioned.condition_category as {{ dbt.type_string() }})\n      as condition_category\n    , cast(inclusions_unioned.condition as {{ dbt.type_string() }}) as condition\n    , cast(inclusions_unioned.data_source as {{ dbt.type_string() }}) as data_source\nfrom inclusions_unioned\n     left join exclusions_diagnosis\n         on inclusions_unioned.encounter_id = exclusions_diagnosis.encounter_id\n         and inclusions_unioned.condition = exclusions_diagnosis.condition\nwhere exclusions_diagnosis.encounter_id is null", "language": "sql", "package_name": "cms_chronic_conditions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\cms_chronic_conditions", "path": "staging\\cms_chronic_conditions__stg_chronic_condition_all.sql", "original_file_path": "models\\staging\\cms_chronic_conditions__stg_chronic_condition_all.sql", "name": "cms_chronic_conditions__stg_chronic_condition_all", "alias": "stg_chronic_condition_all", "checksum": {"name": "sha256", "checksum": "f0c0d426efe6c37a90ab46272adcce116d7d6a83d49c0509391c84277813133d"}, "tags": ["cms_chronic_conditions"], "refs": [["terminology__cms_chronic_conditions"], ["claims_preprocessing__encounter"], ["claims_preprocessing__condition"], ["claims_preprocessing__condition"]], "sources": [], "metrics": [], "description": "This model contains logic for all chronic conditions where  additional_logic is not 'None'. This model includes standard exclusions and maps ICD-10-CM diagnosis codes, ICD-10-PCS procedure codes, HCPCS codes, and MS DRG codes to chronic conditions.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique ID for the patient.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "encounter_id": {"name": "encounter_id", "description": "Unique ID for each encounter (visit).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "encounter_start_date": {"name": "encounter_start_date", "description": "The date the encounter began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "chronic_condition_type": {"name": "chronic_condition_type", "description": "The type of chronic condition as defined by CMS.  ('Common' or 'Other chronic or potentially disabling conditions')\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "condition_category": {"name": "condition_category", "description": "The category of the condition (e.g. Cardiovascular Disease).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "condition": {"name": "condition", "description": "The name of the chronic condition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_source": {"name": "data_source", "description": "Indicates the name of the source dataset (e.g. Medicare Claims).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": false, "node_color": "#2e0e0e"}, "patch_path": "cms_chronic_conditions://models\\_models.yml", "compiled_path": "../target\\compiled\\cms_chronic_conditions\\models\\staging\\cms_chronic_conditions__stg_chronic_condition_all.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "cms_chronic_conditions", "alias": "stg_chronic_condition_all", "tags": "cms_chronic_conditions", "materialized": "table", "enabled": true, "docs": {"show": false}}, "created_at": 1674073789.3098063, "compiled_code": "\n\nwith chronic_conditions as (\n\n    select * from tuva.terminology.cms_chronic_conditions\n\n),\n\npatient_encounters as (\n\n    select\n          encounter.patient_id\n        , encounter.encounter_id\n        , encounter.encounter_start_date\n        , encounter.ms_drg_code\n        , encounter.data_source\n        , replace(condition.code,'.','') as condition_code\n        , condition.code_type as condition_code_type\n        , replace(procedure.code,'.','') as procedure_code\n        , procedure.code_type as procedure_code_type\n    from tuva.core.encounter as encounter\n         left join tuva.core.condition as condition\n             on encounter.encounter_id = condition.encounter_id\n         left join tuva.core.condition    as procedure\n             on encounter.encounter_id = procedure.encounter_id\n\n),\n\ninclusions_diagnosis as (\n\n    select\n          patient_encounters.patient_id\n        , patient_encounters.encounter_id\n        , patient_encounters.encounter_start_date\n        , patient_encounters.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_encounters\n         inner join chronic_conditions\n             on patient_encounters.condition_code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'ICD-10-CM'\n    and chronic_conditions.additional_logic = 'None'\n\n),\n\ninclusions_procedure as (\n\n    select\n          patient_encounters.patient_id\n        , patient_encounters.encounter_id\n        , patient_encounters.encounter_start_date\n        , patient_encounters.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_encounters\n         inner join chronic_conditions\n             on patient_encounters.procedure_code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system in ('ICD-10-PCS', 'HCPCS')\n    and chronic_conditions.additional_logic = 'None'\n\n),\n\ninclusions_ms_drg as (\n\n    select\n          patient_encounters.patient_id\n        , patient_encounters.encounter_id\n        , patient_encounters.encounter_start_date\n        , patient_encounters.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_encounters\n         inner join chronic_conditions\n             on patient_encounters.ms_drg_code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'MS-DRG'\n    and chronic_conditions.additional_logic = 'None'\n\n),\n\nexclusions_diagnosis as (\n\n    select distinct\n          patient_encounters.encounter_id\n        , chronic_conditions.condition\n    from patient_encounters\n         inner join chronic_conditions\n             on patient_encounters.condition_code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Exclude'\n    and chronic_conditions.code_system = 'ICD-10-CM'\n\n),\n\ninclusions_unioned as (\n\n    select * from inclusions_diagnosis\n    union distinct\n    select * from inclusions_procedure\n    union distinct\n    select * from inclusions_ms_drg\n\n)\n\nselect distinct\n      cast(inclusions_unioned.patient_id as TEXT) as patient_id\n    , cast(inclusions_unioned.encounter_id as TEXT) as encounter_id\n    , cast(inclusions_unioned.encounter_start_date as date)\n      as encounter_start_date\n    , cast(inclusions_unioned.chronic_condition_type as TEXT)\n      as chronic_condition_type\n    , cast(inclusions_unioned.condition_category as TEXT)\n      as condition_category\n    , cast(inclusions_unioned.condition as TEXT) as condition\n    , cast(inclusions_unioned.data_source as TEXT) as data_source\nfrom inclusions_unioned\n     left join exclusions_diagnosis\n         on inclusions_unioned.encounter_id = exclusions_diagnosis.encounter_id\n         and inclusions_unioned.condition = exclusions_diagnosis.condition\nwhere exclusions_diagnosis.encounter_id is null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.cms_chronic_conditions.stg_chronic_condition_all"}, "model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_hiv_aids": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.type_string"], "nodes": ["seed.terminology.terminology__cms_chronic_conditions", "model.claims_preprocessing.claims_preprocessing__encounter", "model.claims_preprocessing.claims_preprocessing__condition"]}, "config": {"enabled": true, "alias": "stg_chronic_condition_hiv_aids", "schema": "cms_chronic_conditions", "database": "tuva", "tags": ["cms_chronic_conditions"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": "#2e0e0e"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "cms_chronic_conditions", "fqn": ["cms_chronic_conditions", "staging", "cms_chronic_conditions__stg_chronic_condition_hiv_aids"], "unique_id": "model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_hiv_aids", "raw_code": "{{ config(enabled = var('cms_chronic_conditions_enabled',var('tuva_packages_enabled',True)) ) }}\n\n{%- set condition_filter = 'Human Immunodeficiency Virus and/or Acquired Immunodeficiency Syndrome (HIV/AIDS)' -%}\n\nwith chronic_conditions as (\n\n    select * from {{ ref('terminology__cms_chronic_conditions') }}\n    where condition = '{{ condition_filter }}'\n\n),\n\npatient_encounters as (\n\n    select\n          encounter.patient_id\n        , encounter.encounter_id\n        , encounter.encounter_start_date\n        , encounter.ms_drg_code\n        , encounter.data_source\n        , replace(condition.code,'.','') as condition_code\n        , condition.code_type as condition_code_type\n    from {{ var('encounter') }} as encounter\n         left join {{ var('condition') }} as condition\n             on encounter.encounter_id = condition.encounter_id\n\n),\n\n/*\n    Exception logic: a claim with the diagnosis code R75 requires a second\n    qualifying claim that is not R75 (a screening code)\n\n    This CTE excludes encounters with the exception code. Those encounters\n    will be evaluated separately.\n*/\ninclusions_diagnosis as (\n\n    select\n          patient_encounters.patient_id\n        , patient_encounters.encounter_id\n        , patient_encounters.encounter_start_date\n        , patient_encounters.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_encounters\n         inner join chronic_conditions\n             on patient_encounters.condition_code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'ICD-10-CM'\n    and chronic_conditions.code <> 'R75'\n\n),\n\ninclusions_ms_drg as (\n\n    select\n          patient_encounters.patient_id\n        , patient_encounters.encounter_id\n        , patient_encounters.encounter_start_date\n        , patient_encounters.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_encounters\n         inner join chronic_conditions\n             on patient_encounters.ms_drg_code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'MS-DRG'\n\n),\n\n/*\n    Exception logic: a claim with the diagnosis code R75 requires a second\n    qualifying claim that is not R75 (a screening code)\n\n    This CTE includes encounters with the exception code only where that\n    patient has another encounter that is not R75.\n*/\nexception_diagnosis as (\n\n    select\n          patient_encounters.patient_id\n        , patient_encounters.encounter_id\n        , patient_encounters.encounter_start_date\n        , patient_encounters.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_encounters\n         inner join chronic_conditions\n             on patient_encounters.condition_code = chronic_conditions.code\n         inner join inclusions_diagnosis\n             on patient_encounters.patient_id = inclusions_diagnosis.patient_id\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'ICD-10-CM'\n    and chronic_conditions.code = 'R75'\n\n),\n\ninclusions_unioned as (\n\n    select * from inclusions_diagnosis\n    union distinct\n    select * from inclusions_ms_drg\n    union distinct\n    select * from exception_diagnosis\n\n)\n\nselect distinct\n      cast(inclusions_unioned.patient_id as {{ dbt.type_string() }}) as patient_id\n    , cast(inclusions_unioned.encounter_id as {{ dbt.type_string() }}) as encounter_id\n    , cast(inclusions_unioned.encounter_start_date as date)\n      as encounter_start_date\n    , cast(inclusions_unioned.chronic_condition_type as {{ dbt.type_string() }})\n      as chronic_condition_type\n    , cast(inclusions_unioned.condition_category as {{ dbt.type_string() }})\n      as condition_category\n    , cast(inclusions_unioned.condition as {{ dbt.type_string() }}) as condition\n    , cast(inclusions_unioned.data_source as {{ dbt.type_string() }}) as data_source\nfrom inclusions_unioned", "language": "sql", "package_name": "cms_chronic_conditions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\cms_chronic_conditions", "path": "staging\\cms_chronic_conditions__stg_chronic_condition_hiv_aids.sql", "original_file_path": "models\\staging\\cms_chronic_conditions__stg_chronic_condition_hiv_aids.sql", "name": "cms_chronic_conditions__stg_chronic_condition_hiv_aids", "alias": "stg_chronic_condition_hiv_aids", "checksum": {"name": "sha256", "checksum": "7018e4ee23ef7d9a30e12b2b228f7f227de78b129d2fdfa4e63c0bc68385e3ad"}, "tags": ["cms_chronic_conditions"], "refs": [["terminology__cms_chronic_conditions"], ["claims_preprocessing__encounter"], ["claims_preprocessing__condition"]], "sources": [], "metrics": [], "description": "This model contains logic for the chronic condition Human Immunodeficiency Virus and/or Acquired Immunodeficiency Syndrome (HIV/AIDS). This model maps ICD-10-CM diagnosis codes and MS DRG codes to the chronic condition.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique ID for the patient.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "encounter_id": {"name": "encounter_id", "description": "Unique ID for each encounter (visit).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "encounter_start_date": {"name": "encounter_start_date", "description": "The date the encounter began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "chronic_condition_type": {"name": "chronic_condition_type", "description": "The type of chronic condition as defined by CMS.  ('Common' or 'Other chronic or potentially disabling conditions')\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "condition_category": {"name": "condition_category", "description": "The category of the condition (e.g. Other).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "condition": {"name": "condition", "description": "The name of the chronic condition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_source": {"name": "data_source", "description": "Indicates the name of the source dataset (e.g. Medicare Claims).\n", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": false, "node_color": "#2e0e0e"}, "patch_path": "cms_chronic_conditions://models\\_models.yml", "compiled_path": "../target\\compiled\\cms_chronic_conditions\\models\\staging\\cms_chronic_conditions__stg_chronic_condition_hiv_aids.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "cms_chronic_conditions", "alias": "stg_chronic_condition_hiv_aids", "tags": "cms_chronic_conditions", "materialized": "table", "enabled": true, "docs": {"show": false}}, "created_at": 1674073789.324822, "compiled_code": "with chronic_conditions as (\n\n    select * from tuva.terminology.cms_chronic_conditions\n    where condition = 'Human Immunodeficiency Virus and/or Acquired Immunodeficiency Syndrome (HIV/AIDS)'\n\n),\n\npatient_encounters as (\n\n    select\n          encounter.patient_id\n        , encounter.encounter_id\n        , encounter.encounter_start_date\n        , encounter.ms_drg_code\n        , encounter.data_source\n        , replace(condition.code,'.','') as condition_code\n        , condition.code_type as condition_code_type\n    from tuva.core.encounter as encounter\n         left join tuva.core.condition as condition\n             on encounter.encounter_id = condition.encounter_id\n\n),\n\n/*\n    Exception logic: a claim with the diagnosis code R75 requires a second\n    qualifying claim that is not R75 (a screening code)\n\n    This CTE excludes encounters with the exception code. Those encounters\n    will be evaluated separately.\n*/\ninclusions_diagnosis as (\n\n    select\n          patient_encounters.patient_id\n        , patient_encounters.encounter_id\n        , patient_encounters.encounter_start_date\n        , patient_encounters.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_encounters\n         inner join chronic_conditions\n             on patient_encounters.condition_code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'ICD-10-CM'\n    and chronic_conditions.code <> 'R75'\n\n),\n\ninclusions_ms_drg as (\n\n    select\n          patient_encounters.patient_id\n        , patient_encounters.encounter_id\n        , patient_encounters.encounter_start_date\n        , patient_encounters.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_encounters\n         inner join chronic_conditions\n             on patient_encounters.ms_drg_code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'MS-DRG'\n\n),\n\n/*\n    Exception logic: a claim with the diagnosis code R75 requires a second\n    qualifying claim that is not R75 (a screening code)\n\n    This CTE includes encounters with the exception code only where that\n    patient has another encounter that is not R75.\n*/\nexception_diagnosis as (\n\n    select\n          patient_encounters.patient_id\n        , patient_encounters.encounter_id\n        , patient_encounters.encounter_start_date\n        , patient_encounters.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_encounters\n         inner join chronic_conditions\n             on patient_encounters.condition_code = chronic_conditions.code\n         inner join inclusions_diagnosis\n             on patient_encounters.patient_id = inclusions_diagnosis.patient_id\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'ICD-10-CM'\n    and chronic_conditions.code = 'R75'\n\n),\n\ninclusions_unioned as (\n\n    select * from inclusions_diagnosis\n    union distinct\n    select * from inclusions_ms_drg\n    union distinct\n    select * from exception_diagnosis\n\n)\n\nselect distinct\n      cast(inclusions_unioned.patient_id as TEXT) as patient_id\n    , cast(inclusions_unioned.encounter_id as TEXT) as encounter_id\n    , cast(inclusions_unioned.encounter_start_date as date)\n      as encounter_start_date\n    , cast(inclusions_unioned.chronic_condition_type as TEXT)\n      as chronic_condition_type\n    , cast(inclusions_unioned.condition_category as TEXT)\n      as condition_category\n    , cast(inclusions_unioned.condition as TEXT) as condition\n    , cast(inclusions_unioned.data_source as TEXT) as data_source\nfrom inclusions_unioned", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.cms_chronic_conditions.stg_chronic_condition_hiv_aids"}, "model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_oud": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.type_string"], "nodes": ["model.claims_preprocessing.claims_preprocessing__prescription", "seed.terminology.terminology__cms_chronic_conditions", "model.claims_preprocessing.claims_preprocessing__encounter", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_all"]}, "config": {"enabled": true, "alias": "stg_chronic_condition_oud", "schema": "cms_chronic_conditions", "database": "tuva", "tags": ["cms_chronic_conditions"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": "#2e0e0e"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "cms_chronic_conditions", "fqn": ["cms_chronic_conditions", "staging", "cms_chronic_conditions__stg_chronic_condition_oud"], "unique_id": "model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_oud", "raw_code": "{{ config(enabled = var('cms_chronic_conditions_enabled',var('tuva_packages_enabled',True)) ) }}\n\n--depends_on: {{ var('prescription') }}\n\n{%- set condition_filter = 'Opioid Use Disorder (OUD)' -%}\n\n{%- set naltrexone_ndcs = (\n    '00056001122', '00056001130', '00056001170', '00056007950', '00056008050',\n    '00185003901', '00185003930', '00406009201', '00406009203', '00406117001',\n    '00406117003', '00555090201', '00555090202', '00904703604', '16729008101',\n    '16729008110', '42291063230', '43063059115', '47335032683', '47335032688',\n    '50090286600', '50436010501', '51224020630', '51224020650', '51285027501',\n    '51285027502', '52152010502', '52152010504', '52152010530', '54868557400',\n    '63459030042', '63629104601', '63629104701', '65694010003', '65694010010',\n    '65757030001', '65757030202', '68084029111', '68084029121', '68094085362',\n    '68115068030'\n    )\n-%}\n\n{#\n    Not all data sources have medications the below code block will set the\n    variable table_exists using the get_relation macro\n#}\n\n{%- set source_relation = adapter.get_relation(\n      database=var(\"input_database\",\"tuva\"),\n      schema=var(\"input_schema\",\"core\"),\n      identifier=\"prescription\"\n    ) -%}\n\n{%- set table_exists=source_relation is not none %}\n\nwith chronic_conditions as (\n\n    select * from {{ ref('terminology__cms_chronic_conditions') }}\n    where condition = '{{ condition_filter }}'\n\n),\n\npatient_encounters as (\n\n    select\n          encounter.patient_id\n        , encounter.encounter_id\n        , encounter.encounter_start_date\n        , encounter.ms_drg_code\n        , encounter.data_source\n        , replace(condition.code,'.','') as condition_code\n        , condition.code_type as condition_code_type\n        , replace(procedure.code,'.','') as procedure_code\n        , procedure.code_type as procedure_code_type\n    from {{ var('encounter') }} as encounter\n         left join {{ var('condition') }} as condition\n             on encounter.encounter_id = condition.encounter_id\n         left join {{ var('procedure') }}  as procedure\n             on encounter.encounter_id = procedure.encounter_id\n\n),\n\n/*\n    This code block creates an empty medication CTE if one is not found\n    using the table_exists variable, otherwise it uses the actual table\n*/\npatient_medications as (\n\n    {% if table_exists or project_name == 'data_profiling' %}\n\n    select\n        cast(null as varchar)  encounter_id,\n          patient_id\n        , cast(paid_date as date) as encounter_start_date\n        , replace(ndc_code,'.','') as ndc_code\n        , data_source\n    from {{ var('prescription') }}\n\n    {% else %}\n\n    select\n          cast(null as {{ dbt.type_string() }} ) as encounter_id\n        , cast(null as {{ dbt.type_string() }} ) as patient_id\n        , cast(null as date ) as encounter_start_date\n        , cast(null as {{ dbt.type_string() }} ) as ndc_code\n        , cast(null as {{ dbt.type_string() }} ) as data_source\n    limit 0\n\n    {% endif %}\n\n),\n\ninclusions_diagnosis as (\n\n    select\n          patient_encounters.patient_id\n        , patient_encounters.encounter_id\n        , patient_encounters.encounter_start_date\n        , patient_encounters.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_encounters\n         inner join chronic_conditions\n             on patient_encounters.condition_code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'ICD-10-CM'\n\n),\n\ninclusions_procedure as (\n\n    select\n          patient_encounters.patient_id\n        , patient_encounters.encounter_id\n        , patient_encounters.encounter_start_date\n        , patient_encounters.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_encounters\n         inner join chronic_conditions\n             on patient_encounters.procedure_code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system in ('ICD-10-PCS', 'HCPCS')\n\n),\n\n/*\n    Exclusion logic: Naltrexone NDCs are excluded if there is evidence of an\n    alcohol or other drug use disorder where opioid DX is not present\n\n    This CTE excludes medication encounters with the exception codes for\n    Naltrexone. Those encounters will be evaluated separately.\n*/\ninclusions_medication as (\n    select\n          patient_medications.patient_id\n        , patient_medications.encounter_id\n        , patient_medications.encounter_start_date\n        , patient_medications.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_medications\n         inner join chronic_conditions\n             on patient_medications.ndc_code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'NDC'\n    and chronic_conditions.code not in {{ naltrexone_ndcs }}\n\n),\n\n/*\n    Exclusion logic: Naltrexone NDCs are excluded if there is evidence of an\n    alcohol or other drug use disorder where opioid DX is not present\n\n    This CTE includes patients with evidence of the chronic conditions Alcohol\n    Use Disorders or Drug Use Disorders.\n*/\nexclusions_other_chronic_conditions as (\n\n    select distinct patient_id\n    from {{ ref('cms_chronic_conditions__stg_chronic_condition_all') }}\n    where condition in (\n          'Alcohol Use Disorders'\n        , 'Drug Use Disorders'\n    )\n\n),\n\n/*\n    Exclusion logic: Naltrexone NDCs are excluded if there is evidence of an\n    alcohol or other drug use disorder where opioid DX is not present\n\n    This CTE creates the exclusion list which consists of patients with\n    medication encounters for Naltrexone having Alcohol Use Disorder or Drug\n    Use Disorder and missing the Opioid Use Disorder diagnosis codes.\n*/\nexclusions_medication as (\n    select distinct\n          patient_medications.patient_id\n    from patient_medications\n         inner join chronic_conditions\n             on patient_medications.ndc_code = chronic_conditions.code\n         inner join exclusions_other_chronic_conditions\n             on patient_medications.patient_id =\n                exclusions_other_chronic_conditions.patient_id\n         left join inclusions_diagnosis\n             on patient_medications.patient_id =\n                inclusions_diagnosis.patient_id\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'NDC'\n    and chronic_conditions.code in {{ naltrexone_ndcs }}\n    and inclusions_diagnosis.patient_id is null\n\n),\n\ninclusions_unioned as (\n\n    select * from inclusions_diagnosis\n    union distinct\n    select * from inclusions_procedure\n    union distinct\n    select * from inclusions_medication\n\n)\n\nselect distinct\n      cast(inclusions_unioned.patient_id as {{ dbt.type_string() }}) as patient_id\n    , cast(inclusions_unioned.encounter_id as {{ dbt.type_string() }}) as encounter_id\n    , cast(inclusions_unioned.encounter_start_date as date)\n      as encounter_start_date\n    , cast(inclusions_unioned.chronic_condition_type as {{ dbt.type_string() }})\n      as chronic_condition_type\n    , cast(inclusions_unioned.condition_category as {{ dbt.type_string() }})\n      as condition_category\n    , cast(inclusions_unioned.condition as {{ dbt.type_string() }}) as condition\n    , cast(inclusions_unioned.data_source as {{ dbt.type_string() }}) as data_source\nfrom inclusions_unioned\n     left join exclusions_medication\n         on inclusions_unioned.patient_id = exclusions_medication.patient_id\nwhere exclusions_medication.patient_id is null", "language": "sql", "package_name": "cms_chronic_conditions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\cms_chronic_conditions", "path": "staging\\cms_chronic_conditions__stg_chronic_condition_oud.sql", "original_file_path": "models\\staging\\cms_chronic_conditions__stg_chronic_condition_oud.sql", "name": "cms_chronic_conditions__stg_chronic_condition_oud", "alias": "stg_chronic_condition_oud", "checksum": {"name": "sha256", "checksum": "e386fde6cc06d6c3633d619f9c2ca82322a9e8f0e006e9cff638e166671e43db"}, "tags": ["cms_chronic_conditions"], "refs": [["claims_preprocessing__prescription"], ["terminology__cms_chronic_conditions"], ["claims_preprocessing__encounter"], ["claims_preprocessing__condition"], ["claims_preprocessing__condition"], ["cms_chronic_conditions__stg_chronic_condition_all"]], "sources": [], "metrics": [], "description": "This model contains logic for the chronic condition Opioid Use Disorder  (OUD). This model maps ICD-10-CM diagnosis codes, ICD-10-PCS procedure codes, HCPCS codes, and NDC codes to the chronic condition.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique ID for the patient.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "encounter_id": {"name": "encounter_id", "description": "Unique ID for each encounter (visit).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "encounter_start_date": {"name": "encounter_start_date", "description": "The date the encounter began.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "chronic_condition_type": {"name": "chronic_condition_type", "description": "The type of chronic condition as defined by CMS.  ('Common' or 'Other chronic or potentially disabling conditions')\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "condition_category": {"name": "condition_category", "description": "The category of the condition (e.g. Substance Abuse).", "meta": {}, "data_type": null, "quote": null, "tags": []}, "condition": {"name": "condition", "description": "The name of the chronic condition.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "data_source": {"name": "data_source", "description": "Indicates the name of the source dataset (e.g. Medicare Claims).", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": false, "node_color": "#2e0e0e"}, "patch_path": "cms_chronic_conditions://models\\_models.yml", "compiled_path": "../target\\compiled\\cms_chronic_conditions\\models\\staging\\cms_chronic_conditions__stg_chronic_condition_oud.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "cms_chronic_conditions", "alias": "stg_chronic_condition_oud", "tags": "cms_chronic_conditions", "materialized": "table", "enabled": true, "docs": {"show": false}}, "created_at": 1674073789.3508523, "compiled_code": "\n\n--depends_on: tuva.core.prescription\n\nwith chronic_conditions as (\n\n    select * from tuva.terminology.cms_chronic_conditions\n    where condition = 'Opioid Use Disorder (OUD)'\n\n),\n\npatient_encounters as (\n\n    select\n          encounter.patient_id\n        , encounter.encounter_id\n        , encounter.encounter_start_date\n        , encounter.ms_drg_code\n        , encounter.data_source\n        , replace(condition.code,'.','') as condition_code\n        , condition.code_type as condition_code_type\n        , replace(procedure.code,'.','') as procedure_code\n        , procedure.code_type as procedure_code_type\n    from tuva.core.encounter as encounter\n         left join tuva.core.condition as condition\n             on encounter.encounter_id = condition.encounter_id\n         left join tuva.core.condition    as procedure\n             on encounter.encounter_id = procedure.encounter_id\n\n),\n\n/*\n    This code block creates an empty medication CTE if one is not found\n    using the table_exists variable, otherwise it uses the actual table\n*/\npatient_medications as (\n\n    \n\n    select\n        cast(null as varchar)  encounter_id,\n          patient_id\n        , cast(paid_date as date) as encounter_start_date\n        , replace(ndc_code,'.','') as ndc_code\n        , data_source\n    from tuva.core.prescription\n\n    \n\n),\n\ninclusions_diagnosis as (\n\n    select\n          patient_encounters.patient_id\n        , patient_encounters.encounter_id\n        , patient_encounters.encounter_start_date\n        , patient_encounters.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_encounters\n         inner join chronic_conditions\n             on patient_encounters.condition_code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'ICD-10-CM'\n\n),\n\ninclusions_procedure as (\n\n    select\n          patient_encounters.patient_id\n        , patient_encounters.encounter_id\n        , patient_encounters.encounter_start_date\n        , patient_encounters.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_encounters\n         inner join chronic_conditions\n             on patient_encounters.procedure_code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system in ('ICD-10-PCS', 'HCPCS')\n\n),\n\n/*\n    Exclusion logic: Naltrexone NDCs are excluded if there is evidence of an\n    alcohol or other drug use disorder where opioid DX is not present\n\n    This CTE excludes medication encounters with the exception codes for\n    Naltrexone. Those encounters will be evaluated separately.\n*/\ninclusions_medication as (\n    select\n          patient_medications.patient_id\n        , patient_medications.encounter_id\n        , patient_medications.encounter_start_date\n        , patient_medications.data_source\n        , chronic_conditions.chronic_condition_type\n        , chronic_conditions.condition_category\n        , chronic_conditions.condition\n    from patient_medications\n         inner join chronic_conditions\n             on patient_medications.ndc_code = chronic_conditions.code\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'NDC'\n    and chronic_conditions.code not in ('00056001122', '00056001130', '00056001170', '00056007950', '00056008050', '00185003901', '00185003930', '00406009201', '00406009203', '00406117001', '00406117003', '00555090201', '00555090202', '00904703604', '16729008101', '16729008110', '42291063230', '43063059115', '47335032683', '47335032688', '50090286600', '50436010501', '51224020630', '51224020650', '51285027501', '51285027502', '52152010502', '52152010504', '52152010530', '54868557400', '63459030042', '63629104601', '63629104701', '65694010003', '65694010010', '65757030001', '65757030202', '68084029111', '68084029121', '68094085362', '68115068030')\n\n),\n\n/*\n    Exclusion logic: Naltrexone NDCs are excluded if there is evidence of an\n    alcohol or other drug use disorder where opioid DX is not present\n\n    This CTE includes patients with evidence of the chronic conditions Alcohol\n    Use Disorders or Drug Use Disorders.\n*/\nexclusions_other_chronic_conditions as (\n\n    select distinct patient_id\n    from tuva.cms_chronic_conditions.stg_chronic_condition_all\n    where condition in (\n          'Alcohol Use Disorders'\n        , 'Drug Use Disorders'\n    )\n\n),\n\n/*\n    Exclusion logic: Naltrexone NDCs are excluded if there is evidence of an\n    alcohol or other drug use disorder where opioid DX is not present\n\n    This CTE creates the exclusion list which consists of patients with\n    medication encounters for Naltrexone having Alcohol Use Disorder or Drug\n    Use Disorder and missing the Opioid Use Disorder diagnosis codes.\n*/\nexclusions_medication as (\n    select distinct\n          patient_medications.patient_id\n    from patient_medications\n         inner join chronic_conditions\n             on patient_medications.ndc_code = chronic_conditions.code\n         inner join exclusions_other_chronic_conditions\n             on patient_medications.patient_id =\n                exclusions_other_chronic_conditions.patient_id\n         left join inclusions_diagnosis\n             on patient_medications.patient_id =\n                inclusions_diagnosis.patient_id\n    where chronic_conditions.inclusion_type = 'Include'\n    and chronic_conditions.code_system = 'NDC'\n    and chronic_conditions.code in ('00056001122', '00056001130', '00056001170', '00056007950', '00056008050', '00185003901', '00185003930', '00406009201', '00406009203', '00406117001', '00406117003', '00555090201', '00555090202', '00904703604', '16729008101', '16729008110', '42291063230', '43063059115', '47335032683', '47335032688', '50090286600', '50436010501', '51224020630', '51224020650', '51285027501', '51285027502', '52152010502', '52152010504', '52152010530', '54868557400', '63459030042', '63629104601', '63629104701', '65694010003', '65694010010', '65757030001', '65757030202', '68084029111', '68084029121', '68094085362', '68115068030')\n    and inclusions_diagnosis.patient_id is null\n\n),\n\ninclusions_unioned as (\n\n    select * from inclusions_diagnosis\n    union distinct\n    select * from inclusions_procedure\n    union distinct\n    select * from inclusions_medication\n\n)\n\nselect distinct\n      cast(inclusions_unioned.patient_id as TEXT) as patient_id\n    , cast(inclusions_unioned.encounter_id as TEXT) as encounter_id\n    , cast(inclusions_unioned.encounter_start_date as date)\n      as encounter_start_date\n    , cast(inclusions_unioned.chronic_condition_type as TEXT)\n      as chronic_condition_type\n    , cast(inclusions_unioned.condition_category as TEXT)\n      as condition_category\n    , cast(inclusions_unioned.condition as TEXT) as condition\n    , cast(inclusions_unioned.data_source as TEXT) as data_source\nfrom inclusions_unioned\n     left join exclusions_medication\n         on inclusions_unioned.patient_id = exclusions_medication.patient_id\nwhere exclusions_medication.patient_id is null", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.cms_chronic_conditions.stg_chronic_condition_oud"}, "model.data_profiling.data_profiling__claim_summary": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.data_profiling.sum_all_checks_in_table", "macro.data_profiling.current_date_or_timestamp"], "nodes": ["model.claims_data_model.eligibility", "model.claims_data_model.medical_claim", "model.claims_data_model.pharmacy_claim", "model.data_profiling.data_profiling__base_medical_claim", "model.data_profiling.data_profiling__base_medical_claim", "model.data_profiling.data_profiling__base_eligibility", "model.data_profiling.data_profiling__base_medical_claim", "model.data_profiling.data_profiling__base_pharmacy_claim", "model.data_profiling.data_profiling__eligibility_detail", "model.data_profiling.data_profiling__medical_claim_detail", "model.data_profiling.data_profiling__pharmacy_claim_detail", "seed.data_profiling.data_profiling__test_catalog", "model.data_profiling.data_profiling__eligibility_detail", "model.data_profiling.data_profiling__medical_claim_detail", "model.data_profiling.data_profiling__pharmacy_claim_detail", "model.claims_data_model.eligibility", "model.claims_data_model.eligibility", "model.claims_data_model.medical_claim", "model.claims_data_model.medical_claim", "model.claims_data_model.pharmacy_claim", "model.claims_data_model.pharmacy_claim"]}, "config": {"enabled": true, "alias": "claim_summary", "schema": "data_profiling", "database": "tuva", "tags": ["data_profiling"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#141161"}, "cluster_by": ["test_id"], "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "data_profiling", "fqn": ["data_profiling", "data_profiling__claim_summary"], "unique_id": "model.data_profiling.data_profiling__claim_summary", "raw_code": "-- depends on: {{ var('eligibility') }}\n-- depends on: {{ var('medical_claim') }}\n-- depends on: {{ var('pharmacy_claim') }}\n{% if target.type in ('redshift') -%}\n{{\n  config(\n    enabled=var('data_profiling_enabled',var('tuva_packages_enabled',True))\n    ,sort = ['test_id']\n  )\n}}\n{%- elif target.type in ('bigquery', 'snowflake') -%}\n{{\n  config(\n    enabled=var('data_profiling_enabled',var('tuva_packages_enabled',True))\n    ,cluster_by = ['test_id']\n  )\n}}\n{%- else -%}\n{%- endif -%}\n\n{#-\n    ***************************************************************\n    setting vars for unique counts, total counts, and test columns\n    ***************************************************************\n-#}\n\n{% set institutional_claim_count -%}\n    (select count(*)\n     from {{ ref('data_profiling__base_medical_claim') }}\n     where claim_type = 'institutional')\n{% endset -%}\n\n{% set professional_claim_count -%}\n    (select count(*)\n     from {{ ref('data_profiling__base_medical_claim') }}\n     where claim_type = 'professional')\n{% endset -%}\n\n{% set total_eligibility_count -%}\n    (select count(*)\n     from {{ ref('data_profiling__base_eligibility') }})\n{% endset -%}\n\n{% set total_med_claim_count -%}\n    (select count(*)\n     from {{ ref('data_profiling__base_medical_claim') }})\n{% endset -%}\n\n{% set total_pharm_claim_count -%}\n    (select count(*)\n     from {{ ref('data_profiling__base_pharmacy_claim') }})\n{% endset -%}\n\n{% set eligibility_column_list = [\n      'duplicate_eligibility_record'\n    , 'duplicate_patient_id'\n    , 'missing_eligibility_patient_id'\n    , 'missing_eligibility_member_id'\n    , 'missing_enrollment_start_date'\n    , 'invalid_enrollment_start_date'\n    , 'missing_enrollment_end_date'\n    , 'invalid_enrollment_end_date'\n    , 'invalid_enrollment_end_before_start'\n    , 'missing_birth_date'\n    , 'invalid_birth_date'\n    , 'missing_death_date'\n    , 'invalid_death_date'\n    , 'invalid_death_before_birth'\n    , 'missing_gender'\n    , 'invalid_gender'\n] -%}\n\n{% set medical_claim_column_list = [\n      'duplicate_med_claim_record'\n    , 'duplicate_med_claim_id'\n    , 'missing_med_claim_patient_id'\n    , 'missing_med_claim_patient_id_fk'\n    , 'missing_med_claim_id'\n    , 'missing_med_claim_line_number'\n    , 'missing_claim_type'\n    , 'invalid_claim_type'\n    , 'missing_claim_start_date'\n    , 'invalid_claim_start_date'\n    , 'missing_claim_end_date'\n    , 'invalid_claim_end_date'\n    , 'invalid_claim_end_before_start'\n    , 'missing_admission_date'\n    , 'invalid_admission_date'\n    , 'missing_discharge_date'\n    , 'invalid_discharge_date'\n    , 'invalid_discharge_before_admission'\n    , 'missing_med_claim_paid_date'\n    , 'invalid_med_claim_paid_date'\n    , 'missing_med_claim_paid_amount'\n    , 'missing_bill_type_code'\n    , 'invalid_bill_type_code'\n    , 'missing_place_of_service_code'\n    , 'invalid_place_of_service_code'\n    , 'missing_revenue_center_code'\n    , 'invalid_revenue_center_code'\n    , 'missing_diagnosis_code_1'\n    , 'invalid_diagnosis_code_1'\n    , 'missing_diagnosis_poa_1'\n    , 'invalid_diagnosis_poa_1'\n    , 'missing_hcpcs_code'\n    , 'invalid_discharge_disposition_code'\n    , 'invalid_ms_drg_code'\n    , 'missing_billing_npi'\n    , 'missing_facility_npi'\n    , 'missing_rendering_npi'\n] -%}\n\n{% set pharmacy_claim_column_list = [\n      'duplicate_pharm_claim_record'\n    , 'duplicate_pharm_claim_id'\n    , 'missing_pharm_claim_patient_id'\n    , 'missing_pharm_claim_patient_id_fk'\n    , 'missing_pharm_claim_id'\n    , 'missing_pharm_claim_line_number'\n    , 'missing_dispensing_date'\n    , 'invalid_dispensing_date'\n    , 'missing_pharm_claim_paid_date'\n    , 'invalid_pharm_claim_paid_date'\n    , 'missing_pharm_claim_paid_amount'\n    , 'missing_prescribing_provider_npi'\n    , 'missing_dispensing_provider_npi'\n    , 'missing_ndc_code'\n] -%}\n\nwith eligibility_detail as (\n\n    select * from {{ ref('data_profiling__eligibility_detail') }}\n\n),\n\nmedical_claim_detail as (\n\n    select * from {{ ref('data_profiling__medical_claim_detail') }}\n\n),\n\npharmacy_claim_detail as (\n\n    select * from {{ ref('data_profiling__pharmacy_claim_detail') }}\n\n),\n\nseed_test_catalog as (\n\n    select * from {{ ref('data_profiling__test_catalog') }}\n\n),\n\nsum_eligibility_detail as (\n\n    {{ sum_all_checks_in_table(builtins.ref('data_profiling__eligibility_detail'), eligibility_column_list) }}\n\n),\n\nsum_medical_claim_detail as (\n\n    {{ sum_all_checks_in_table(builtins.ref('data_profiling__medical_claim_detail'), medical_claim_column_list) }}\n\n),\n\nsum_pharmacy_claim_detail as (\n\n    {{ sum_all_checks_in_table(builtins.ref('data_profiling__pharmacy_claim_detail'), pharmacy_claim_column_list) }}\n\n),\n\n\n\n\nadd_denominator_eligibility_detail as (\n\n    select\n          table_name as test_table_name\n        , case when lower('{{ var(\"eligibility\") }}') = 'none' then 'No Eligibility Input' else '{{ var(\"eligibility\") }}' end as source_table_name\n        , test_name\n        , test_fail_numerator\n        , {{ total_eligibility_count }} as test_fail_denominator\n    from sum_eligibility_detail\n\n),\n\n\nadd_denominator_medical_claim_detail as (\n\n    select\n          table_name as test_table_name\n        , case when lower('{{ var(\"medical_claim\") }}') = 'none' then 'No Medical Claim Input' else '{{ var(\"medical_claim\") }}' end as source_table_name\n        , test_name\n        , test_fail_numerator\n        , case\n            when test_name in (\n                  'invalid_admission_date'\n                , 'invalid_discharge_date'\n                , 'missing_admission_date'\n                , 'missing_bill_type_code'\n                , 'missing_diagnosis_poa_1'\n                , 'missing_discharge_date'\n                , 'missing_facility_npi'\n                , 'missing_revenue_center_code'\n               ) then {{ institutional_claim_count }}\n            when test_name in (\n                  'missing_billing_npi'\n                , 'missing_hcpcs_code'\n                , 'missing_place_of_service_code'\n                ) then {{ professional_claim_count }}\n            else {{ total_med_claim_count }}\n          end as test_fail_denominator\n    from sum_medical_claim_detail\n\n),\n\nadd_denominator_pharmacy_claim_detail as (\n\n    select\n          table_name as test_table_name\n        , case when lower('{{ var(\"pharmacy_claim\") }}') = 'none' then 'No Pharmacy Claim Input' else '{{ var(\"pharmacy_claim\") }}' end as source_table_name\n        , test_name\n        , test_fail_numerator\n        , {{ total_pharm_claim_count }} as test_fail_denominator\n    from sum_pharmacy_claim_detail\n\n),\n\nadd_totals_eligibility_detail as (\n\n    select\n          test_table_name\n        , source_table_name\n        , test_name\n        , test_fail_numerator\n        , test_fail_denominator\n        , case when test_fail_denominator = 0 then 0 else  (round(test_fail_numerator / test_fail_denominator, 5)\n          )*100  end as test_fail_percentage\n    from add_denominator_eligibility_detail\n\n),\n\nadd_totals_medical_claim_detail as (\n\n    select\n          test_table_name\n        , source_table_name\n        , test_name\n        , test_fail_numerator\n        , test_fail_denominator\n        , case when test_fail_denominator = 0 then 0 else  (round(test_fail_numerator / test_fail_denominator, 5)\n          )*100  end  test_fail_percentage\n    from add_denominator_medical_claim_detail\n\n),\n\nadd_totals_pharmacy_claim_detail as (\n\n    select\n          test_table_name\n        , source_table_name\n        , test_name\n        , test_fail_numerator\n        , test_fail_denominator\n        , case when test_fail_denominator = 0 then 0 else  (round(test_fail_numerator / test_fail_denominator, 5)\n          )*100  end  as test_fail_percentage\n    from add_denominator_pharmacy_claim_detail\n\n),\n\nunion_details as (\n\n    select * from add_totals_eligibility_detail\n    union all\n    select * from add_totals_medical_claim_detail\n    union all\n    select * from add_totals_pharmacy_claim_detail\n\n),\n\nadd_catalog_details as (\n\n    select\n          union_details.test_table_name\n        , union_details.source_table_name\n        , union_details.test_name\n        , union_details.test_fail_numerator\n        , union_details.test_fail_denominator\n        , union_details.test_fail_percentage\n        , seed_test_catalog.columns\n        , seed_test_catalog.test_id\n        , seed_test_catalog.description as test_description\n        , seed_test_catalog.severity as test_severity\n    from union_details\n         left join seed_test_catalog\n         on union_details.test_name = seed_test_catalog.test_name\n\n)\n\nselect\n      test_id\n    , test_name\n    , source_table_name\n    , test_severity\n    , test_fail_percentage\n    , test_fail_numerator\n    , test_fail_denominator\n    , test_description\n    , test_table_name\n    , columns\n    , {{ current_date_or_timestamp('timestamp') }} as run_date\nfrom add_catalog_details", "language": "sql", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "data_profiling__claim_summary.sql", "original_file_path": "models\\data_profiling__claim_summary.sql", "name": "data_profiling__claim_summary", "alias": "claim_summary", "checksum": {"name": "sha256", "checksum": "8edbf37c2503fb3b5b194222f0cba053b492c84066dfe2397945de43a235d446"}, "tags": ["data_profiling"], "refs": [["eligibility"], ["medical_claim"], ["pharmacy_claim"], ["data_profiling__base_medical_claim"], ["data_profiling__base_medical_claim"], ["data_profiling__base_eligibility"], ["data_profiling__base_medical_claim"], ["data_profiling__base_pharmacy_claim"], ["data_profiling__eligibility_detail"], ["data_profiling__medical_claim_detail"], ["data_profiling__pharmacy_claim_detail"], ["data_profiling__test_catalog"], ["data_profiling__eligibility_detail"], ["data_profiling__medical_claim_detail"], ["data_profiling__pharmacy_claim_detail"], ["eligibility"], ["eligibility"], ["medical_claim"], ["medical_claim"], ["pharmacy_claim"], ["pharmacy_claim"]], "sources": [], "metrics": [], "description": "Summary of checks ran on every column in eligibility_detail, medical_claim_detail, and pharmacy_claim_detail.\n", "columns": {"test_id": {"name": "test_id", "description": "Unique identifier for the data profiling test", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_name": {"name": "test_name", "description": "Unique column name of the test. Join to test_catalog  on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_table_name": {"name": "source_table_name", "description": "The name of the source table the test is ran on", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_severity": {"name": "test_severity", "description": "Indicates the severity of a test failure if test_fail_numerator > 0\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_fail_percentage": {"name": "test_fail_percentage", "description": "Percentage of records that failed test", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_fail_numerator": {"name": "test_fail_numerator", "description": "Total count of records that failed the test", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_fail_denominator": {"name": "test_fail_denominator", "description": "Total count of records the test was applied to, in some cases this may be a claim type count (institutional claims,  professional claims)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_description": {"name": "test_description", "description": "Guideline or reasoning for the test", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_table_name": {"name": "test_table_name", "description": "The name of the data profiling detail table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "columns": {"name": "columns", "description": "List of column(s) the test runs on - makes it easy to filter test  results to certain columns\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_date": {"name": "run_date", "description": "Datetime the model was run used for snapshots", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": "#141161"}, "patch_path": "data_profiling://models\\_models.yml", "compiled_path": "../target\\compiled\\data_profiling\\models\\data_profiling__claim_summary.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "data_profiling", "materialized": "table", "alias": "claim_summary", "tags": "data_profiling", "enabled": true, "cluster_by": ["test_id"], "docs": {"node_color": "#141161"}}, "created_at": 1674073789.7155635, "compiled_code": "-- depends on: tuva.the_tuva_project_input.eligibility\n-- depends on: tuva.the_tuva_project_input.medical_claim\n-- depends on: tuva.the_tuva_project_input.pharmacy_claim\nwith eligibility_detail as (\n\n    select * from tuva.data_profiling.eligibility_detail\n\n),\n\nmedical_claim_detail as (\n\n    select * from tuva.data_profiling.medical_claim_detail\n\n),\n\npharmacy_claim_detail as (\n\n    select * from tuva.data_profiling.pharmacy_claim_detail\n\n),\n\nseed_test_catalog as (\n\n    select * from tuva.data_profiling.test_catalog\n\n),\n\nsum_eligibility_detail as (\n\n    \n\n        select\n              'eligibility_detail' as table_name\n            , 'duplicate_eligibility_record' as test_name\n            , coalesce(sum( DUPLICATE_ELIGIBILITY_RECORD ),0) as test_fail_numerator\n        from tuva.data_profiling.eligibility_detail\n\n        union all\n\n        select\n              'eligibility_detail' as table_name\n            , 'duplicate_patient_id' as test_name\n            , coalesce(sum( DUPLICATE_PATIENT_ID ),0) as test_fail_numerator\n        from tuva.data_profiling.eligibility_detail\n\n        union all\n\n        select\n              'eligibility_detail' as table_name\n            , 'missing_eligibility_patient_id' as test_name\n            , coalesce(sum( MISSING_ELIGIBILITY_PATIENT_ID ),0) as test_fail_numerator\n        from tuva.data_profiling.eligibility_detail\n\n        union all\n\n        select\n              'eligibility_detail' as table_name\n            , 'missing_eligibility_member_id' as test_name\n            , coalesce(sum( MISSING_ELIGIBILITY_MEMBER_ID ),0) as test_fail_numerator\n        from tuva.data_profiling.eligibility_detail\n\n        union all\n\n        select\n              'eligibility_detail' as table_name\n            , 'missing_enrollment_start_date' as test_name\n            , coalesce(sum( MISSING_ENROLLMENT_START_DATE ),0) as test_fail_numerator\n        from tuva.data_profiling.eligibility_detail\n\n        union all\n\n        select\n              'eligibility_detail' as table_name\n            , 'invalid_enrollment_start_date' as test_name\n            , coalesce(sum( INVALID_ENROLLMENT_START_DATE ),0) as test_fail_numerator\n        from tuva.data_profiling.eligibility_detail\n\n        union all\n\n        select\n              'eligibility_detail' as table_name\n            , 'missing_enrollment_end_date' as test_name\n            , coalesce(sum( MISSING_ENROLLMENT_END_DATE ),0) as test_fail_numerator\n        from tuva.data_profiling.eligibility_detail\n\n        union all\n\n        select\n              'eligibility_detail' as table_name\n            , 'invalid_enrollment_end_date' as test_name\n            , coalesce(sum( INVALID_ENROLLMENT_END_DATE ),0) as test_fail_numerator\n        from tuva.data_profiling.eligibility_detail\n\n        union all\n\n        select\n              'eligibility_detail' as table_name\n            , 'invalid_enrollment_end_before_start' as test_name\n            , coalesce(sum( INVALID_ENROLLMENT_END_BEFORE_START ),0) as test_fail_numerator\n        from tuva.data_profiling.eligibility_detail\n\n        union all\n\n        select\n              'eligibility_detail' as table_name\n            , 'missing_birth_date' as test_name\n            , coalesce(sum( MISSING_BIRTH_DATE ),0) as test_fail_numerator\n        from tuva.data_profiling.eligibility_detail\n\n        union all\n\n        select\n              'eligibility_detail' as table_name\n            , 'invalid_birth_date' as test_name\n            , coalesce(sum( INVALID_BIRTH_DATE ),0) as test_fail_numerator\n        from tuva.data_profiling.eligibility_detail\n\n        union all\n\n        select\n              'eligibility_detail' as table_name\n            , 'missing_death_date' as test_name\n            , coalesce(sum( MISSING_DEATH_DATE ),0) as test_fail_numerator\n        from tuva.data_profiling.eligibility_detail\n\n        union all\n\n        select\n              'eligibility_detail' as table_name\n            , 'invalid_death_date' as test_name\n            , coalesce(sum( INVALID_DEATH_DATE ),0) as test_fail_numerator\n        from tuva.data_profiling.eligibility_detail\n\n        union all\n\n        select\n              'eligibility_detail' as table_name\n            , 'invalid_death_before_birth' as test_name\n            , coalesce(sum( INVALID_DEATH_BEFORE_BIRTH ),0) as test_fail_numerator\n        from tuva.data_profiling.eligibility_detail\n\n        union all\n\n        select\n              'eligibility_detail' as table_name\n            , 'missing_gender' as test_name\n            , coalesce(sum( MISSING_GENDER ),0) as test_fail_numerator\n        from tuva.data_profiling.eligibility_detail\n\n        union all\n\n        select\n              'eligibility_detail' as table_name\n            , 'invalid_gender' as test_name\n            , coalesce(sum( INVALID_GENDER ),0) as test_fail_numerator\n        from tuva.data_profiling.eligibility_detail\n\n        \n\n),\n\nsum_medical_claim_detail as (\n\n    \n\n        select\n              'medical_claim_detail' as table_name\n            , 'duplicate_med_claim_record' as test_name\n            , coalesce(sum( DUPLICATE_MED_CLAIM_RECORD ),0) as test_fail_numerator\n        from tuva.data_profiling.medical_claim_detail\n\n        union all\n\n        select\n              'medical_claim_detail' as table_name\n            , 'duplicate_med_claim_id' as test_name\n            , coalesce(sum( DUPLICATE_MED_CLAIM_ID ),0) as test_fail_numerator\n        from tuva.data_profiling.medical_claim_detail\n\n        union all\n\n        select\n              'medical_claim_detail' as table_name\n            , 'missing_med_claim_patient_id' as test_name\n            , coalesce(sum( MISSING_MED_CLAIM_PATIENT_ID ),0) as test_fail_numerator\n        from tuva.data_profiling.medical_claim_detail\n\n        union all\n\n        select\n              'medical_claim_detail' as table_name\n            , 'missing_med_claim_patient_id_fk' as test_name\n            , coalesce(sum( MISSING_MED_CLAIM_PATIENT_ID_FK ),0) as test_fail_numerator\n        from tuva.data_profiling.medical_claim_detail\n\n        union all\n\n        select\n              'medical_claim_detail' as table_name\n            , 'missing_med_claim_id' as test_name\n            , coalesce(sum( MISSING_MED_CLAIM_ID ),0) as test_fail_numerator\n        from tuva.data_profiling.medical_claim_detail\n\n        union all\n\n        select\n              'medical_claim_detail' as table_name\n            , 'missing_med_claim_line_number' as test_name\n            , coalesce(sum( MISSING_MED_CLAIM_LINE_NUMBER ),0) as test_fail_numerator\n        from tuva.data_profiling.medical_claim_detail\n\n        union all\n\n        select\n              'medical_claim_detail' as table_name\n            , 'missing_claim_type' as test_name\n            , coalesce(sum( MISSING_CLAIM_TYPE ),0) as test_fail_numerator\n        from tuva.data_profiling.medical_claim_detail\n\n        union all\n\n        select\n              'medical_claim_detail' as table_name\n            , 'invalid_claim_type' as test_name\n            , coalesce(sum( INVALID_CLAIM_TYPE ),0) as test_fail_numerator\n        from tuva.data_profiling.medical_claim_detail\n\n        union all\n\n        select\n              'medical_claim_detail' as table_name\n            , 'missing_claim_start_date' as test_name\n            , coalesce(sum( MISSING_CLAIM_START_DATE ),0) as test_fail_numerator\n        from tuva.data_profiling.medical_claim_detail\n\n        union all\n\n        select\n              'medical_claim_detail' as table_name\n            , 'invalid_claim_start_date' as test_name\n            , coalesce(sum( INVALID_CLAIM_START_DATE ),0) as test_fail_numerator\n        from tuva.data_profiling.medical_claim_detail\n\n        union all\n\n        select\n              'medical_claim_detail' as table_name\n            , 'missing_claim_end_date' as test_name\n            , coalesce(sum( MISSING_CLAIM_END_DATE ),0) as test_fail_numerator\n        from tuva.data_profiling.medical_claim_detail\n\n        union all\n\n        select\n              'medical_claim_detail' as table_name\n            , 'invalid_claim_end_date' as test_name\n            , coalesce(sum( INVALID_CLAIM_END_DATE ),0) as test_fail_numerator\n        from tuva.data_profiling.medical_claim_detail\n\n        union all\n\n        select\n              'medical_claim_detail' as table_name\n            , 'invalid_claim_end_before_start' as test_name\n            , coalesce(sum( INVALID_CLAIM_END_BEFORE_START ),0) as test_fail_numerator\n        from tuva.data_profiling.medical_claim_detail\n\n        union all\n\n        select\n              'medical_claim_detail' as table_name\n            , 'missing_admission_date' as test_name\n            , coalesce(sum( MISSING_ADMISSION_DATE ),0) as test_fail_numerator\n        from tuva.data_profiling.medical_claim_detail\n\n        union all\n\n        select\n              'medical_claim_detail' as table_name\n            , 'invalid_admission_date' as test_name\n            , coalesce(sum( INVALID_ADMISSION_DATE ),0) as test_fail_numerator\n        from tuva.data_profiling.medical_claim_detail\n\n        union all\n\n        select\n              'medical_claim_detail' as table_name\n            , 'missing_discharge_date' as test_name\n            , coalesce(sum( MISSING_DISCHARGE_DATE ),0) as test_fail_numerator\n        from tuva.data_profiling.medical_claim_detail\n\n        union all\n\n        select\n              'medical_claim_detail' as table_name\n            , 'invalid_discharge_date' as test_name\n            , coalesce(sum( INVALID_DISCHARGE_DATE ),0) as test_fail_numerator\n        from tuva.data_profiling.medical_claim_detail\n\n        union all\n\n        select\n              'medical_claim_detail' as table_name\n            , 'invalid_discharge_before_admission' as test_name\n            , coalesce(sum( INVALID_DISCHARGE_BEFORE_ADMISSION ),0) as test_fail_numerator\n        from tuva.data_profiling.medical_claim_detail\n\n        union all\n\n        select\n              'medical_claim_detail' as table_name\n            , 'missing_med_claim_paid_date' as test_name\n            , coalesce(sum( MISSING_MED_CLAIM_PAID_DATE ),0) as test_fail_numerator\n        from tuva.data_profiling.medical_claim_detail\n\n        union all\n\n        select\n              'medical_claim_detail' as table_name\n            , 'invalid_med_claim_paid_date' as test_name\n            , coalesce(sum( INVALID_MED_CLAIM_PAID_DATE ),0) as test_fail_numerator\n        from tuva.data_profiling.medical_claim_detail\n\n        union all\n\n        select\n              'medical_claim_detail' as table_name\n            , 'missing_med_claim_paid_amount' as test_name\n            , coalesce(sum( MISSING_MED_CLAIM_PAID_AMOUNT ),0) as test_fail_numerator\n        from tuva.data_profiling.medical_claim_detail\n\n        union all\n\n        select\n              'medical_claim_detail' as table_name\n            , 'missing_bill_type_code' as test_name\n            , coalesce(sum( MISSING_BILL_TYPE_CODE ),0) as test_fail_numerator\n        from tuva.data_profiling.medical_claim_detail\n\n        union all\n\n        select\n              'medical_claim_detail' as table_name\n            , 'invalid_bill_type_code' as test_name\n            , coalesce(sum( INVALID_BILL_TYPE_CODE ),0) as test_fail_numerator\n        from tuva.data_profiling.medical_claim_detail\n\n        union all\n\n        select\n              'medical_claim_detail' as table_name\n            , 'missing_place_of_service_code' as test_name\n            , coalesce(sum( MISSING_PLACE_OF_SERVICE_CODE ),0) as test_fail_numerator\n        from tuva.data_profiling.medical_claim_detail\n\n        union all\n\n        select\n              'medical_claim_detail' as table_name\n            , 'invalid_place_of_service_code' as test_name\n            , coalesce(sum( INVALID_PLACE_OF_SERVICE_CODE ),0) as test_fail_numerator\n        from tuva.data_profiling.medical_claim_detail\n\n        union all\n\n        select\n              'medical_claim_detail' as table_name\n            , 'missing_revenue_center_code' as test_name\n            , coalesce(sum( MISSING_REVENUE_CENTER_CODE ),0) as test_fail_numerator\n        from tuva.data_profiling.medical_claim_detail\n\n        union all\n\n        select\n              'medical_claim_detail' as table_name\n            , 'invalid_revenue_center_code' as test_name\n            , coalesce(sum( INVALID_REVENUE_CENTER_CODE ),0) as test_fail_numerator\n        from tuva.data_profiling.medical_claim_detail\n\n        union all\n\n        select\n              'medical_claim_detail' as table_name\n            , 'missing_diagnosis_code_1' as test_name\n            , coalesce(sum( MISSING_DIAGNOSIS_CODE_1 ),0) as test_fail_numerator\n        from tuva.data_profiling.medical_claim_detail\n\n        union all\n\n        select\n              'medical_claim_detail' as table_name\n            , 'invalid_diagnosis_code_1' as test_name\n            , coalesce(sum( INVALID_DIAGNOSIS_CODE_1 ),0) as test_fail_numerator\n        from tuva.data_profiling.medical_claim_detail\n\n        union all\n\n        select\n              'medical_claim_detail' as table_name\n            , 'missing_diagnosis_poa_1' as test_name\n            , coalesce(sum( MISSING_DIAGNOSIS_POA_1 ),0) as test_fail_numerator\n        from tuva.data_profiling.medical_claim_detail\n\n        union all\n\n        select\n              'medical_claim_detail' as table_name\n            , 'invalid_diagnosis_poa_1' as test_name\n            , coalesce(sum( INVALID_DIAGNOSIS_POA_1 ),0) as test_fail_numerator\n        from tuva.data_profiling.medical_claim_detail\n\n        union all\n\n        select\n              'medical_claim_detail' as table_name\n            , 'missing_hcpcs_code' as test_name\n            , coalesce(sum( MISSING_HCPCS_CODE ),0) as test_fail_numerator\n        from tuva.data_profiling.medical_claim_detail\n\n        union all\n\n        select\n              'medical_claim_detail' as table_name\n            , 'invalid_discharge_disposition_code' as test_name\n            , coalesce(sum( INVALID_DISCHARGE_DISPOSITION_CODE ),0) as test_fail_numerator\n        from tuva.data_profiling.medical_claim_detail\n\n        union all\n\n        select\n              'medical_claim_detail' as table_name\n            , 'invalid_ms_drg_code' as test_name\n            , coalesce(sum( INVALID_MS_DRG_CODE ),0) as test_fail_numerator\n        from tuva.data_profiling.medical_claim_detail\n\n        union all\n\n        select\n              'medical_claim_detail' as table_name\n            , 'missing_billing_npi' as test_name\n            , coalesce(sum( MISSING_BILLING_NPI ),0) as test_fail_numerator\n        from tuva.data_profiling.medical_claim_detail\n\n        union all\n\n        select\n              'medical_claim_detail' as table_name\n            , 'missing_facility_npi' as test_name\n            , coalesce(sum( MISSING_FACILITY_NPI ),0) as test_fail_numerator\n        from tuva.data_profiling.medical_claim_detail\n\n        union all\n\n        select\n              'medical_claim_detail' as table_name\n            , 'missing_rendering_npi' as test_name\n            , coalesce(sum( MISSING_RENDERING_NPI ),0) as test_fail_numerator\n        from tuva.data_profiling.medical_claim_detail\n\n        \n\n),\n\nsum_pharmacy_claim_detail as (\n\n    \n\n        select\n              'pharmacy_claim_detail' as table_name\n            , 'duplicate_pharm_claim_record' as test_name\n            , coalesce(sum( DUPLICATE_PHARM_CLAIM_RECORD ),0) as test_fail_numerator\n        from tuva.data_profiling.pharmacy_claim_detail\n\n        union all\n\n        select\n              'pharmacy_claim_detail' as table_name\n            , 'duplicate_pharm_claim_id' as test_name\n            , coalesce(sum( DUPLICATE_PHARM_CLAIM_ID ),0) as test_fail_numerator\n        from tuva.data_profiling.pharmacy_claim_detail\n\n        union all\n\n        select\n              'pharmacy_claim_detail' as table_name\n            , 'missing_pharm_claim_patient_id' as test_name\n            , coalesce(sum( MISSING_PHARM_CLAIM_PATIENT_ID ),0) as test_fail_numerator\n        from tuva.data_profiling.pharmacy_claim_detail\n\n        union all\n\n        select\n              'pharmacy_claim_detail' as table_name\n            , 'missing_pharm_claim_patient_id_fk' as test_name\n            , coalesce(sum( MISSING_PHARM_CLAIM_PATIENT_ID_FK ),0) as test_fail_numerator\n        from tuva.data_profiling.pharmacy_claim_detail\n\n        union all\n\n        select\n              'pharmacy_claim_detail' as table_name\n            , 'missing_pharm_claim_id' as test_name\n            , coalesce(sum( MISSING_PHARM_CLAIM_ID ),0) as test_fail_numerator\n        from tuva.data_profiling.pharmacy_claim_detail\n\n        union all\n\n        select\n              'pharmacy_claim_detail' as table_name\n            , 'missing_pharm_claim_line_number' as test_name\n            , coalesce(sum( MISSING_PHARM_CLAIM_LINE_NUMBER ),0) as test_fail_numerator\n        from tuva.data_profiling.pharmacy_claim_detail\n\n        union all\n\n        select\n              'pharmacy_claim_detail' as table_name\n            , 'missing_dispensing_date' as test_name\n            , coalesce(sum( MISSING_DISPENSING_DATE ),0) as test_fail_numerator\n        from tuva.data_profiling.pharmacy_claim_detail\n\n        union all\n\n        select\n              'pharmacy_claim_detail' as table_name\n            , 'invalid_dispensing_date' as test_name\n            , coalesce(sum( INVALID_DISPENSING_DATE ),0) as test_fail_numerator\n        from tuva.data_profiling.pharmacy_claim_detail\n\n        union all\n\n        select\n              'pharmacy_claim_detail' as table_name\n            , 'missing_pharm_claim_paid_date' as test_name\n            , coalesce(sum( MISSING_PHARM_CLAIM_PAID_DATE ),0) as test_fail_numerator\n        from tuva.data_profiling.pharmacy_claim_detail\n\n        union all\n\n        select\n              'pharmacy_claim_detail' as table_name\n            , 'invalid_pharm_claim_paid_date' as test_name\n            , coalesce(sum( INVALID_PHARM_CLAIM_PAID_DATE ),0) as test_fail_numerator\n        from tuva.data_profiling.pharmacy_claim_detail\n\n        union all\n\n        select\n              'pharmacy_claim_detail' as table_name\n            , 'missing_pharm_claim_paid_amount' as test_name\n            , coalesce(sum( MISSING_PHARM_CLAIM_PAID_AMOUNT ),0) as test_fail_numerator\n        from tuva.data_profiling.pharmacy_claim_detail\n\n        union all\n\n        select\n              'pharmacy_claim_detail' as table_name\n            , 'missing_prescribing_provider_npi' as test_name\n            , coalesce(sum( MISSING_PRESCRIBING_PROVIDER_NPI ),0) as test_fail_numerator\n        from tuva.data_profiling.pharmacy_claim_detail\n\n        union all\n\n        select\n              'pharmacy_claim_detail' as table_name\n            , 'missing_dispensing_provider_npi' as test_name\n            , coalesce(sum( MISSING_DISPENSING_PROVIDER_NPI ),0) as test_fail_numerator\n        from tuva.data_profiling.pharmacy_claim_detail\n\n        union all\n\n        select\n              'pharmacy_claim_detail' as table_name\n            , 'missing_ndc_code' as test_name\n            , coalesce(sum( MISSING_NDC_CODE ),0) as test_fail_numerator\n        from tuva.data_profiling.pharmacy_claim_detail\n\n        \n\n),\n\n\n\n\nadd_denominator_eligibility_detail as (\n\n    select\n          table_name as test_table_name\n        , case when lower('tuva.the_tuva_project_input.eligibility') = 'none' then 'No Eligibility Input' else 'tuva.the_tuva_project_input.eligibility' end as source_table_name\n        , test_name\n        , test_fail_numerator\n        , (select count(*)\n     from tuva.data_profiling.base_eligibility)\n as test_fail_denominator\n    from sum_eligibility_detail\n\n),\n\n\nadd_denominator_medical_claim_detail as (\n\n    select\n          table_name as test_table_name\n        , case when lower('tuva.the_tuva_project_input.medical_claim') = 'none' then 'No Medical Claim Input' else 'tuva.the_tuva_project_input.medical_claim' end as source_table_name\n        , test_name\n        , test_fail_numerator\n        , case\n            when test_name in (\n                  'invalid_admission_date'\n                , 'invalid_discharge_date'\n                , 'missing_admission_date'\n                , 'missing_bill_type_code'\n                , 'missing_diagnosis_poa_1'\n                , 'missing_discharge_date'\n                , 'missing_facility_npi'\n                , 'missing_revenue_center_code'\n               ) then (select count(*)\n     from tuva.data_profiling.base_medical_claim\n     where claim_type = 'institutional')\n\n            when test_name in (\n                  'missing_billing_npi'\n                , 'missing_hcpcs_code'\n                , 'missing_place_of_service_code'\n                ) then (select count(*)\n     from tuva.data_profiling.base_medical_claim\n     where claim_type = 'professional')\n\n            else (select count(*)\n     from tuva.data_profiling.base_medical_claim)\n\n          end as test_fail_denominator\n    from sum_medical_claim_detail\n\n),\n\nadd_denominator_pharmacy_claim_detail as (\n\n    select\n          table_name as test_table_name\n        , case when lower('tuva.the_tuva_project_input.pharmacy_claim') = 'none' then 'No Pharmacy Claim Input' else 'tuva.the_tuva_project_input.pharmacy_claim' end as source_table_name\n        , test_name\n        , test_fail_numerator\n        , (select count(*)\n     from tuva.data_profiling.base_pharmacy_claim)\n as test_fail_denominator\n    from sum_pharmacy_claim_detail\n\n),\n\nadd_totals_eligibility_detail as (\n\n    select\n          test_table_name\n        , source_table_name\n        , test_name\n        , test_fail_numerator\n        , test_fail_denominator\n        , case when test_fail_denominator = 0 then 0 else  (round(test_fail_numerator / test_fail_denominator, 5)\n          )*100  end as test_fail_percentage\n    from add_denominator_eligibility_detail\n\n),\n\nadd_totals_medical_claim_detail as (\n\n    select\n          test_table_name\n        , source_table_name\n        , test_name\n        , test_fail_numerator\n        , test_fail_denominator\n        , case when test_fail_denominator = 0 then 0 else  (round(test_fail_numerator / test_fail_denominator, 5)\n          )*100  end  test_fail_percentage\n    from add_denominator_medical_claim_detail\n\n),\n\nadd_totals_pharmacy_claim_detail as (\n\n    select\n          test_table_name\n        , source_table_name\n        , test_name\n        , test_fail_numerator\n        , test_fail_denominator\n        , case when test_fail_denominator = 0 then 0 else  (round(test_fail_numerator / test_fail_denominator, 5)\n          )*100  end  as test_fail_percentage\n    from add_denominator_pharmacy_claim_detail\n\n),\n\nunion_details as (\n\n    select * from add_totals_eligibility_detail\n    union all\n    select * from add_totals_medical_claim_detail\n    union all\n    select * from add_totals_pharmacy_claim_detail\n\n),\n\nadd_catalog_details as (\n\n    select\n          union_details.test_table_name\n        , union_details.source_table_name\n        , union_details.test_name\n        , union_details.test_fail_numerator\n        , union_details.test_fail_denominator\n        , union_details.test_fail_percentage\n        , seed_test_catalog.columns\n        , seed_test_catalog.test_id\n        , seed_test_catalog.description as test_description\n        , seed_test_catalog.severity as test_severity\n    from union_details\n         left join seed_test_catalog\n         on union_details.test_name = seed_test_catalog.test_name\n\n)\n\nselect\n      test_id\n    , test_name\n    , source_table_name\n    , test_severity\n    , test_fail_percentage\n    , test_fail_numerator\n    , test_fail_denominator\n    , test_description\n    , test_table_name\n    , columns\n    , \n\n    cast(current_timestamp() as timestamp) as run_date\nfrom add_catalog_details", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.data_profiling.claim_summary"}, "model.data_profiling.data_profiling__eligibility_detail": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.data_profiling.missing_field_check", "macro.data_profiling.valid_claim_date_check", "macro.data_profiling.valid_birth_or_death_date_check", "macro.data_profiling.cast_string_or_varchar", "macro.data_profiling.current_date_or_timestamp"], "nodes": ["model.data_profiling.data_profiling__base_eligibility", "seed.terminology.terminology__gender", "model.data_profiling.data_profiling__base_medical_claim"]}, "config": {"enabled": true, "alias": "eligibility_detail", "schema": "data_profiling", "database": "tuva", "tags": ["data_profiling"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#141161"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "data_profiling", "fqn": ["data_profiling", "data_profiling__eligibility_detail"], "unique_id": "model.data_profiling.data_profiling__eligibility_detail", "raw_code": "{{ config(\n    enabled=var('data_profiling_enabled',var('tuva_packages_enabled',True))\n) }}\n\n\nwith eligibility as (\n\n    select * from {{ ref('data_profiling__base_eligibility') }}\n\n),\n\nseed_gender as (\n\n    select * from {{ ref('terminology__gender') }}\n\n),\n\ndeaths_from_claims as (\n\n    select distinct patient_id\n    from {{ ref('data_profiling__base_medical_claim') }}\n    where discharge_disposition_code  = '20'\n\n),\n\nduplicate_record as (\n\n    select row_hash\n    from eligibility\n    group by row_hash\n    having count (*) > 1\n\n),\n\nduplicate_patient_id as (\n\n    select distinct patient_id\n    from (\n        select\n              patient_id\n            , member_id\n            , enrollment_start_date\n            , enrollment_end_date\n            , payer\n            , payer_type\n        from eligibility\n        group by\n              patient_id\n            , member_id\n            , enrollment_start_date\n            , enrollment_end_date\n            , payer\n            , payer_type\n        having count(*) > 1\n    )\n\n),\n\njoined as (\n\n    select\n          eligibility.patient_id\n        , eligibility.member_id\n        , eligibility.enrollment_start_date\n        , eligibility.enrollment_end_date\n        , eligibility.payer\n        , eligibility.payer_type\n        , case\n            when duplicate_record.row_hash is null then 0\n            else 1\n          end as duplicate_eligibility_record\n        , case\n            when duplicate_patient_id.patient_id is null then 0\n            else 1\n          end as duplicate_patient_id\n        , {{ missing_field_check('eligibility.patient_id') }} as missing_eligibility_patient_id\n        , {{ missing_field_check('eligibility.member_id') }} as missing_eligibility_member_id\n        , {{ missing_field_check('eligibility.enrollment_start_date') }} as missing_enrollment_start_date\n        , {{ valid_claim_date_check('eligibility.enrollment_start_date') }} as invalid_enrollment_start_date\n        , {{ missing_field_check('eligibility.enrollment_end_date') }} as missing_enrollment_end_date\n        , {{ valid_claim_date_check('eligibility.enrollment_end_date') }} as invalid_enrollment_end_date\n        , case\n            when eligibility.enrollment_end_date is null then 0\n            when eligibility.enrollment_end_date is not null\n              and eligibility.enrollment_end_date > eligibility.enrollment_start_date\n              then 0\n            else 1\n          end as invalid_enrollment_end_before_start\n        , {{ missing_field_check('eligibility.birth_date') }} as missing_birth_date\n        , {{ valid_birth_or_death_date_check('eligibility.birth_date') }} as invalid_birth_date\n        , case\n            when eligibility.death_date is null\n              and eligibility.death_flag is not null\n              then 1\n            when eligibility.death_date is null\n              and deaths_from_claims.patient_id is not null\n              then 1\n            else 0\n          end as missing_death_date\n        , {{ valid_birth_or_death_date_check('eligibility.death_date') }} as invalid_death_date\n        , case\n            when eligibility.death_date is null then 0\n            when eligibility.death_date is not null\n              and eligibility.death_date > eligibility.birth_date\n              then 0\n            else 1\n          end as invalid_death_before_birth\n        , {{ missing_field_check('eligibility.gender') }} as missing_gender\n        , case\n            when eligibility.gender is null then 0\n            when seed_gender.gender is not null then 0\n            else 1\n          end as invalid_gender\n    from eligibility\n         left join duplicate_record\n            on eligibility.row_hash = duplicate_record.row_hash\n         left join duplicate_patient_id\n            on eligibility.patient_id = duplicate_patient_id.patient_id\n         left join seed_gender\n            on eligibility.gender = seed_gender.gender\n         left join deaths_from_claims\n            on eligibility.patient_id = deaths_from_claims.patient_id\n\n)\n\n/* casting fields used as unique key in snapshot */\nselect\n      {{ cast_string_or_varchar('patient_id') }} as patient_id\n    , {{ cast_string_or_varchar('member_id') }} as member_id\n    , {{ cast_string_or_varchar('enrollment_start_date') }} as enrollment_start_date\n    , {{ cast_string_or_varchar('enrollment_end_date') }} as enrollment_end_date\n    , {{ cast_string_or_varchar('payer') }} as payer\n    , {{ cast_string_or_varchar('payer_type') }} as payer_type\n    , duplicate_eligibility_record\n    , duplicate_patient_id\n    , missing_eligibility_patient_id\n    , missing_eligibility_member_id\n    , missing_enrollment_start_date\n    , invalid_enrollment_start_date\n    , missing_enrollment_end_date\n    , invalid_enrollment_end_date\n    , invalid_enrollment_end_before_start\n    , missing_birth_date\n    , invalid_birth_date\n    , missing_death_date\n    , invalid_death_date\n    , invalid_death_before_birth\n    , missing_gender\n    , invalid_gender\n    , {{ current_date_or_timestamp('timestamp') }} as run_date\nfrom joined", "language": "sql", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "data_profiling__eligibility_detail.sql", "original_file_path": "models\\data_profiling__eligibility_detail.sql", "name": "data_profiling__eligibility_detail", "alias": "eligibility_detail", "checksum": {"name": "sha256", "checksum": "c87e2ffc5aa71de0190b74568860803fcc2d0c24667ec5d48e1e25503d07f837"}, "tags": ["data_profiling"], "refs": [["data_profiling__base_eligibility"], ["terminology__gender"], ["data_profiling__base_medical_claim"]], "sources": [], "metrics": [], "description": "Data profiling on eligibility source data with columns for source  primary keys and every data quality check performed.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Primary key for grain - value from source file", "meta": {}, "data_type": null, "quote": null, "tags": []}, "member_id": {"name": "member_id", "description": "Primary key for grain - value from source file", "meta": {}, "data_type": null, "quote": null, "tags": []}, "enrollment_start_date": {"name": "enrollment_start_date", "description": "Primary key for grain - value from source file", "meta": {}, "data_type": null, "quote": null, "tags": []}, "enrollment_end_date": {"name": "enrollment_end_date", "description": "Primary key for grain - value from source file", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payer": {"name": "payer", "description": "Primary key for grain - value from source file", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payer_type": {"name": "payer_type", "description": "Primary key for grain - value from source file", "meta": {}, "data_type": null, "quote": null, "tags": []}, "duplicate_eligibility_record": {"name": "duplicate_eligibility_record", "description": "See test_catalog seed table and join on test_name  for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "duplicate_patient_id": {"name": "duplicate_patient_id", "description": "See test_catalog seed table and join on test_name  for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_eligibility_patient_id": {"name": "missing_eligibility_patient_id", "description": "See test_catalog seed table and join on test_name  for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_eligibility_member_id": {"name": "missing_eligibility_member_id", "description": "See test_catalog seed table and join on test_name  for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_enrollment_start_date": {"name": "missing_enrollment_start_date", "description": "See test_catalog seed table and join on test_name  for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_enrollment_start_date": {"name": "invalid_enrollment_start_date", "description": "See test_catalog seed table and join on test_name  for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_enrollment_end_date": {"name": "missing_enrollment_end_date", "description": "See test_catalog seed table and join on test_name  for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_enrollment_end_date": {"name": "invalid_enrollment_end_date", "description": "See test_catalog seed table and join on test_name  for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_enrollment_end_before_start": {"name": "invalid_enrollment_end_before_start", "description": "See test_catalog seed table and join on test_name  for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_birth_date": {"name": "missing_birth_date", "description": "See test_catalog seed table and join on test_name  for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_birth_date": {"name": "invalid_birth_date", "description": "See test_catalog seed table and join on test_name  for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_death_date": {"name": "missing_death_date", "description": "See test_catalog seed table and join on test_name  for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_death_date": {"name": "invalid_death_date", "description": "See test_catalog seed table and join on test_name  for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_death_before_birth": {"name": "invalid_death_before_birth", "description": "See test_catalog seed table and join on test_name  for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_gender": {"name": "missing_gender", "description": "See test_catalog seed table and join on test_name  for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_gender": {"name": "invalid_gender", "description": "See test_catalog seed table and join on test_name  for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_date": {"name": "run_date", "description": "Datetime the model was run used for snapshots", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": "#141161"}, "patch_path": "data_profiling://models\\_models.yml", "compiled_path": "../target\\compiled\\data_profiling\\models\\data_profiling__eligibility_detail.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "data_profiling", "materialized": "table", "alias": "eligibility_detail", "tags": "data_profiling", "enabled": true, "docs": {"node_color": "#141161"}}, "created_at": 1674073789.5912273, "compiled_code": "\n\n\nwith eligibility as (\n\n    select * from tuva.data_profiling.base_eligibility\n\n),\n\nseed_gender as (\n\n    select * from tuva.terminology.gender\n\n),\n\ndeaths_from_claims as (\n\n    select distinct patient_id\n    from tuva.data_profiling.base_medical_claim\n    where discharge_disposition_code  = '20'\n\n),\n\nduplicate_record as (\n\n    select row_hash\n    from eligibility\n    group by row_hash\n    having count (*) > 1\n\n),\n\nduplicate_patient_id as (\n\n    select distinct patient_id\n    from (\n        select\n              patient_id\n            , member_id\n            , enrollment_start_date\n            , enrollment_end_date\n            , payer\n            , payer_type\n        from eligibility\n        group by\n              patient_id\n            , member_id\n            , enrollment_start_date\n            , enrollment_end_date\n            , payer\n            , payer_type\n        having count(*) > 1\n    )\n\n),\n\njoined as (\n\n    select\n          eligibility.patient_id\n        , eligibility.member_id\n        , eligibility.enrollment_start_date\n        , eligibility.enrollment_end_date\n        , eligibility.payer\n        , eligibility.payer_type\n        , case\n            when duplicate_record.row_hash is null then 0\n            else 1\n          end as duplicate_eligibility_record\n        , case\n            when duplicate_patient_id.patient_id is null then 0\n            else 1\n          end as duplicate_patient_id\n        , \n\n    case\n      when eligibility.patient_id is null or cast(eligibility.patient_id as string) = '' then 1\n      else 0\n    end as missing_eligibility_patient_id\n        , \n\n    case\n      when eligibility.member_id is null or cast(eligibility.member_id as string) = '' then 1\n      else 0\n    end as missing_eligibility_member_id\n        , \n\n    case\n      when eligibility.enrollment_start_date is null or cast(eligibility.enrollment_start_date as string) = '' then 1\n      else 0\n    end as missing_enrollment_start_date\n        , case\n      when eligibility.enrollment_start_date is null then 0\n      when try_cast(eligibility.enrollment_start_date as date) is not null\n        and try_cast(eligibility.enrollment_start_date as date) between '2000-01-01' and \n\n    cast(current_timestamp() as date)\n        then 0\n      else 1\n    end as invalid_enrollment_start_date\n        , \n\n    case\n      when eligibility.enrollment_end_date is null or cast(eligibility.enrollment_end_date as string) = '' then 1\n      else 0\n    end as missing_enrollment_end_date\n        , case\n      when eligibility.enrollment_end_date is null then 0\n      when try_cast(eligibility.enrollment_end_date as date) is not null\n        and try_cast(eligibility.enrollment_end_date as date) between '2000-01-01' and \n\n    cast(current_timestamp() as date)\n        then 0\n      else 1\n    end as invalid_enrollment_end_date\n        , case\n            when eligibility.enrollment_end_date is null then 0\n            when eligibility.enrollment_end_date is not null\n              and eligibility.enrollment_end_date > eligibility.enrollment_start_date\n              then 0\n            else 1\n          end as invalid_enrollment_end_before_start\n        , \n\n    case\n      when eligibility.birth_date is null or cast(eligibility.birth_date as string) = '' then 1\n      else 0\n    end as missing_birth_date\n        , case\n      when eligibility.birth_date is null then 0\n      when try_cast(eligibility.birth_date as date) is not null\n        and try_cast(eligibility.birth_date as date) between '1900-01-01' and \n\n    cast(current_timestamp() as date)\n        then 0\n      else 1\n    end as invalid_birth_date\n        , case\n            when eligibility.death_date is null\n              and eligibility.death_flag is not null\n              then 1\n            when eligibility.death_date is null\n              and deaths_from_claims.patient_id is not null\n              then 1\n            else 0\n          end as missing_death_date\n        , case\n      when eligibility.death_date is null then 0\n      when try_cast(eligibility.death_date as date) is not null\n        and try_cast(eligibility.death_date as date) between '1900-01-01' and \n\n    cast(current_timestamp() as date)\n        then 0\n      else 1\n    end as invalid_death_date\n        , case\n            when eligibility.death_date is null then 0\n            when eligibility.death_date is not null\n              and eligibility.death_date > eligibility.birth_date\n              then 0\n            else 1\n          end as invalid_death_before_birth\n        , \n\n    case\n      when eligibility.gender is null or cast(eligibility.gender as string) = '' then 1\n      else 0\n    end as missing_gender\n        , case\n            when eligibility.gender is null then 0\n            when seed_gender.gender is not null then 0\n            else 1\n          end as invalid_gender\n    from eligibility\n         left join duplicate_record\n            on eligibility.row_hash = duplicate_record.row_hash\n         left join duplicate_patient_id\n            on eligibility.patient_id = duplicate_patient_id.patient_id\n         left join seed_gender\n            on eligibility.gender = seed_gender.gender\n         left join deaths_from_claims\n            on eligibility.patient_id = deaths_from_claims.patient_id\n\n)\n\n/* casting fields used as unique key in snapshot */\nselect\n      \n\n    cast( patient_id as string ) as patient_id\n    , \n\n    cast( member_id as string ) as member_id\n    , \n\n    cast( enrollment_start_date as string ) as enrollment_start_date\n    , \n\n    cast( enrollment_end_date as string ) as enrollment_end_date\n    , \n\n    cast( payer as string ) as payer\n    , \n\n    cast( payer_type as string ) as payer_type\n    , duplicate_eligibility_record\n    , duplicate_patient_id\n    , missing_eligibility_patient_id\n    , missing_eligibility_member_id\n    , missing_enrollment_start_date\n    , invalid_enrollment_start_date\n    , missing_enrollment_end_date\n    , invalid_enrollment_end_date\n    , invalid_enrollment_end_before_start\n    , missing_birth_date\n    , invalid_birth_date\n    , missing_death_date\n    , invalid_death_date\n    , invalid_death_before_birth\n    , missing_gender\n    , invalid_gender\n    , \n\n    cast(current_timestamp() as timestamp) as run_date\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.data_profiling.eligibility_detail"}, "model.data_profiling.data_profiling__medical_claim_detail": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.data_profiling.missing_field_check", "macro.data_profiling.valid_claim_date_check", "macro.data_profiling.cast_string_or_varchar", "macro.data_profiling.current_date_or_timestamp"], "nodes": ["model.data_profiling.data_profiling__base_medical_claim", "seed.terminology.terminology__bill_type", "seed.terminology.terminology__claim_type", "seed.terminology.terminology__discharge_disposition", "seed.terminology.terminology__icd_10_cm", "seed.terminology.terminology__ms_drg", "seed.terminology.terminology__place_of_service", "seed.terminology.terminology__present_on_admission", "seed.terminology.terminology__revenue_center", "model.data_profiling.data_profiling__base_eligibility"]}, "config": {"enabled": true, "alias": "medical_claim_detail", "schema": "data_profiling", "database": "tuva", "tags": ["data_profiling"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#141161"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "data_profiling", "fqn": ["data_profiling", "data_profiling__medical_claim_detail"], "unique_id": "model.data_profiling.data_profiling__medical_claim_detail", "raw_code": "{{ config(\n    enabled=var('data_profiling_enabled',var('tuva_packages_enabled',True))\n) }}\n\n\nwith medical_claim as (\n\n    select * from {{ ref('data_profiling__base_medical_claim') }}\n\n),\n\nseed_bill_type as (\n\n    select * from {{ ref('terminology__bill_type') }}\n\n),\n\nseed_claim_type as (\n\n    select * from {{ ref('terminology__claim_type') }}\n\n),\n\nseed_discharge_disposition as (\n\n    select * from {{ ref('terminology__discharge_disposition') }}\n\n),\n\nseed_icd_10_cm as (\n\n    select * from {{ ref('terminology__icd_10_cm') }}\n\n),\n\nseed_ms_drg as (\n\n    select * from {{ ref('terminology__ms_drg') }}\n\n),\n\nseed_place_of_service as (\n\n    select * from {{ ref('terminology__place_of_service') }}\n\n),\n\nseed_present_on_admission as (\n\n    select * from {{ ref('terminology__present_on_admission') }}\n\n),\n\nseed_revenue_center as (\n\n    select * from {{ ref('terminology__revenue_center') }}\n\n),\n\nduplicate_record as (\n\n    select row_hash\n    from medical_claim\n    group by row_hash\n    having count (*) > 1\n\n),\n\nduplicate_claim_id as (\n\n    select distinct claim_id\n    from (\n        select\n              claim_id\n            , claim_line_number\n        from medical_claim\n        group by\n              claim_id\n            , claim_line_number\n        having count (*) > 1\n    )\n\n),\n\nmissing_fk_patient_id as (\n\n    select distinct medical_claim.row_hash\n    from medical_claim\n         left join {{ ref('data_profiling__base_eligibility') }} as eligibility\n         on medical_claim.patient_id = eligibility.patient_id\n    where eligibility.patient_id is null\n\n),\n\njoined as (\n\n    select\n          medical_claim.claim_id\n        , medical_claim.claim_line_number\n        , case\n            when duplicate_record.row_hash is null then 0\n            else 1\n          end as duplicate_med_claim_record\n        , case\n            when duplicate_claim_id.claim_id is null then 0\n            else 1\n          end as duplicate_med_claim_id\n        , {{ missing_field_check('medical_claim.patient_id') }} as missing_med_claim_patient_id\n        , case\n            when missing_fk_patient_id.row_hash is null then 0\n            else 1\n          end as missing_med_claim_patient_id_fk\n        , {{ missing_field_check('medical_claim.claim_id') }} as missing_med_claim_id\n        , {{ missing_field_check('medical_claim.claim_line_number') }} as missing_med_claim_line_number\n        , {{ missing_field_check('medical_claim.claim_type') }} as missing_claim_type\n        , case\n            when medical_claim.claim_type is null then 0\n            when seed_claim_type.claim_type is not null then 0\n            else 1\n          end as invalid_claim_type\n        , {{ missing_field_check('medical_claim.claim_start_date') }} as missing_claim_start_date\n        , {{ valid_claim_date_check('medical_claim.claim_start_date') }} as invalid_claim_start_date\n        , {{ missing_field_check('medical_claim.claim_end_date') }} as missing_claim_end_date\n        , {{ valid_claim_date_check('medical_claim.claim_end_date') }} as invalid_claim_end_date\n        , case\n            when medical_claim.claim_end_date is null then 0\n            when medical_claim.claim_end_date is not null\n              and medical_claim.claim_end_date >= medical_claim.claim_start_date\n              then 0\n            else 1\n          end as invalid_claim_end_before_start\n        , case\n            when medical_claim.claim_type = 'institutional'\n            then {{ missing_field_check('medical_claim.admission_date') }}\n            else 0\n          end as missing_admission_date\n        , case\n            when medical_claim.claim_type = 'institutional'\n            then {{ valid_claim_date_check('medical_claim.admission_date') }}\n            else 0\n          end as invalid_admission_date\n        , case\n            when medical_claim.claim_type = 'institutional'\n            then {{ missing_field_check('medical_claim.discharge_date') }}\n            else 0\n          end as missing_discharge_date\n        , case\n            when medical_claim.claim_type = 'institutional'\n            then {{ valid_claim_date_check('medical_claim.discharge_date') }}\n            else 0\n          end as invalid_discharge_date\n        , case\n            when medical_claim.discharge_date is null then 0\n            when medical_claim.discharge_date is not null\n              and medical_claim.discharge_date >= medical_claim.admission_date\n              then 0\n            else 1\n          end as invalid_discharge_before_admission\n        , {{ missing_field_check('medical_claim.paid_date') }} as missing_med_claim_paid_date\n        , {{ valid_claim_date_check('medical_claim.paid_date') }} as invalid_med_claim_paid_date\n        , {{ missing_field_check('medical_claim.paid_amount') }} as missing_med_claim_paid_amount\n        , case\n            when medical_claim.claim_type = 'institutional'\n            then {{ missing_field_check('medical_claim.bill_type_code') }}\n            else 0\n          end as missing_bill_type_code\n        , case\n            when medical_claim.bill_type_code is null then 0\n            when seed_bill_type.bill_type_code is not null then 0\n            else 1\n          end as invalid_bill_type_code\n        , case\n            when medical_claim.claim_type = 'professional'\n            then {{ missing_field_check('medical_claim.place_of_service_code') }}\n            else 0\n          end as missing_place_of_service_code\n        , case\n            when medical_claim.place_of_service_code is null then 0\n            when seed_place_of_service.place_of_service_code is not null then 0\n            else 1\n          end invalid_place_of_service_code\n        , case\n            when medical_claim.claim_type = 'institutional'\n            then {{ missing_field_check('medical_claim.revenue_center_code') }}\n            else 0\n          end as missing_revenue_center_code\n        , case\n            when medical_claim.revenue_center_code is null then 0\n            when seed_revenue_center.revenue_center_code is not null then 0\n            else 1\n          end invalid_revenue_center_code\n        , {{ missing_field_check('medical_claim.diagnosis_code_1') }} as missing_diagnosis_code_1\n        , case\n            when medical_claim.diagnosis_code_1 is null then 0\n            when seed_icd_10_cm.icd_10_cm is not null then 0\n            else 1\n          end invalid_diagnosis_code_1\n       , case\n            when medical_claim.claim_type = 'institutional'\n            then {{ missing_field_check('medical_claim.diagnosis_poa_1') }}\n            else 0\n          end as missing_diagnosis_poa_1\n       , case\n            when medical_claim.diagnosis_poa_1 is null then 0\n            when seed_present_on_admission.present_on_admit_code is not null then 0\n            else 1\n          end invalid_diagnosis_poa_1\n        , case\n            when medical_claim.claim_type = 'professional'\n            then {{ missing_field_check('medical_claim.hcpcs_code') }}\n            else 0\n          end as missing_hcpcs_code\n        , case\n            when medical_claim.discharge_disposition_code is null then 0\n            when seed_discharge_disposition.discharge_disposition_code is not null then 0\n            else 1\n          end invalid_discharge_disposition_code\n        , case\n            when medical_claim.ms_drg_code is null then 0\n            when seed_ms_drg.ms_drg_code is not null then 0\n            else 1\n          end invalid_ms_drg_code\n        , case\n            when medical_claim.claim_type = 'professional'\n            then {{ missing_field_check('medical_claim.billing_npi') }}\n            else 0\n          end as missing_billing_npi\n        , case\n            when medical_claim.claim_type = 'institutional'\n            then {{ missing_field_check('medical_claim.facility_npi') }}\n            else 0\n          end as missing_facility_npi\n        , {{ missing_field_check('medical_claim.rendering_npi') }} as missing_rendering_npi\n    from medical_claim\n         left join duplicate_record\n            on medical_claim.row_hash = duplicate_record.row_hash\n         left join duplicate_claim_id\n            on medical_claim.claim_id = duplicate_claim_id.claim_id\n         left join missing_fk_patient_id\n            on medical_claim.row_hash = missing_fk_patient_id.row_hash\n         left join seed_bill_type\n            on medical_claim.bill_type_code = seed_bill_type.bill_type_code\n         left join seed_claim_type\n            on medical_claim.claim_type = seed_claim_type.claim_type\n         left join seed_discharge_disposition\n            on medical_claim.discharge_disposition_code = seed_discharge_disposition.discharge_disposition_code\n         left join seed_icd_10_cm\n            on medical_claim.diagnosis_code_1 = seed_icd_10_cm.icd_10_cm\n         left join seed_ms_drg\n            on medical_claim.ms_drg_code = seed_ms_drg.ms_drg_code\n         left join seed_place_of_service\n            on medical_claim.place_of_service_code = seed_place_of_service.place_of_service_code\n         left join seed_present_on_admission\n            on medical_claim.diagnosis_poa_1 = seed_present_on_admission.present_on_admit_code\n         left join seed_revenue_center\n            on medical_claim.revenue_center_code = seed_revenue_center.revenue_center_code\n\n)\n\n/* casting fields used as unique key in snapshot */\nselect\n      {{ cast_string_or_varchar('claim_id') }} as claim_id\n    , {{ cast_string_or_varchar('claim_line_number') }} as claim_line_number\n    , duplicate_med_claim_record\n    , duplicate_med_claim_id\n    , missing_med_claim_patient_id\n    , missing_med_claim_patient_id_fk\n    , missing_med_claim_id\n    , missing_med_claim_line_number\n    , missing_claim_type\n    , invalid_claim_type\n    , missing_claim_start_date\n    , invalid_claim_start_date\n    , missing_claim_end_date\n    , invalid_claim_end_date\n    , invalid_claim_end_before_start\n    , missing_admission_date\n    , invalid_admission_date\n    , missing_discharge_date\n    , invalid_discharge_date\n    , invalid_discharge_before_admission\n    , missing_med_claim_paid_date\n    , invalid_med_claim_paid_date\n    , missing_med_claim_paid_amount\n    , missing_bill_type_code\n    , invalid_bill_type_code\n    , missing_place_of_service_code\n    , invalid_place_of_service_code\n    , missing_revenue_center_code\n    , invalid_revenue_center_code\n    , missing_diagnosis_code_1\n    , invalid_diagnosis_code_1\n    , missing_diagnosis_poa_1\n    , invalid_diagnosis_poa_1\n    , missing_hcpcs_code\n    , invalid_discharge_disposition_code\n    , invalid_ms_drg_code\n    , missing_billing_npi\n    , missing_facility_npi\n    , missing_rendering_npi\n    , {{ current_date_or_timestamp('timestamp') }} as run_date\nfrom joined", "language": "sql", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "data_profiling__medical_claim_detail.sql", "original_file_path": "models\\data_profiling__medical_claim_detail.sql", "name": "data_profiling__medical_claim_detail", "alias": "medical_claim_detail", "checksum": {"name": "sha256", "checksum": "15c8cd5ae474dc995e1aeedd6c614b880d091d67111eec93f42261222a064dd4"}, "tags": ["data_profiling"], "refs": [["data_profiling__base_medical_claim"], ["terminology__bill_type"], ["terminology__claim_type"], ["terminology__discharge_disposition"], ["terminology__icd_10_cm"], ["terminology__ms_drg"], ["terminology__place_of_service"], ["terminology__present_on_admission"], ["terminology__revenue_center"], ["data_profiling__base_eligibility"]], "sources": [], "metrics": [], "description": "Data profiling on medical claim line source data with columns for  source primary keys and every data quality check performed.\n", "columns": {"claim_id": {"name": "claim_id", "description": "Primary key for grain - value from source file", "meta": {}, "data_type": null, "quote": null, "tags": []}, "claim_line_number": {"name": "claim_line_number", "description": "Primary key for grain - value from source file", "meta": {}, "data_type": null, "quote": null, "tags": []}, "duplicate_med_claim_record": {"name": "duplicate_med_claim_record", "description": "See test_catalog seed table and join on test_name  for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "duplicate_med_claim_id": {"name": "duplicate_med_claim_id", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_med_claim_patient_id": {"name": "missing_med_claim_patient_id", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_med_claim_patient_id_fk": {"name": "missing_med_claim_patient_id_fk", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_med_claim_id": {"name": "missing_med_claim_id", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_med_claim_line_number": {"name": "missing_med_claim_line_number", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_claim_type": {"name": "missing_claim_type", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_claim_type": {"name": "invalid_claim_type", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_claim_start_date": {"name": "missing_claim_start_date", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_claim_start_date": {"name": "invalid_claim_start_date", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_claim_end_date": {"name": "missing_claim_end_date", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_claim_end_date": {"name": "invalid_claim_end_date", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_claim_end_before_start": {"name": "invalid_claim_end_before_start", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_admission_date": {"name": "missing_admission_date", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_admission_date": {"name": "invalid_admission_date", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_discharge_date": {"name": "missing_discharge_date", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_discharge_date": {"name": "invalid_discharge_date", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_discharge_before_admission": {"name": "invalid_discharge_before_admission", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_med_claim_paid_date": {"name": "missing_med_claim_paid_date", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_med_claim_paid_date": {"name": "invalid_med_claim_paid_date", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_med_claim_paid_amount": {"name": "missing_med_claim_paid_amount", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_bill_type_code": {"name": "missing_bill_type_code", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_bill_type_code": {"name": "invalid_bill_type_code", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_place_of_service_code": {"name": "missing_place_of_service_code", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_place_of_service_code": {"name": "invalid_place_of_service_code", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_revenue_center_code": {"name": "missing_revenue_center_code", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_revenue_center_code": {"name": "invalid_revenue_center_code", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_diagnosis_code_1": {"name": "missing_diagnosis_code_1", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_diagnosis_code_1": {"name": "invalid_diagnosis_code_1", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_diagnosis_poa_1": {"name": "missing_diagnosis_poa_1", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_diagnosis_poa_1": {"name": "invalid_diagnosis_poa_1", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_hcpcs_code": {"name": "missing_hcpcs_code", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_discharge_disposition_code": {"name": "invalid_discharge_disposition_code", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_ms_drg": {"name": "invalid_ms_drg", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_billing_npi": {"name": "missing_billing_npi", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_facility_npi": {"name": "missing_facility_npi", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_rendering_npi": {"name": "missing_rendering_npi", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_date": {"name": "run_date", "description": "Datetime the model was run used for snapshots", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": "#141161"}, "patch_path": "data_profiling://models\\_models.yml", "compiled_path": "../target\\compiled\\data_profiling\\models\\data_profiling__medical_claim_detail.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "data_profiling", "materialized": "table", "alias": "medical_claim_detail", "tags": "data_profiling", "enabled": true, "docs": {"node_color": "#141161"}}, "created_at": 1674073789.662315, "compiled_code": "\n\n\nwith medical_claim as (\n\n    select * from tuva.data_profiling.base_medical_claim\n\n),\n\nseed_bill_type as (\n\n    select * from tuva.terminology.bill_type\n\n),\n\nseed_claim_type as (\n\n    select * from tuva.terminology.claim_type\n\n),\n\nseed_discharge_disposition as (\n\n    select * from tuva.terminology.discharge_disposition\n\n),\n\nseed_icd_10_cm as (\n\n    select * from tuva.terminology.icd_10_cm\n\n),\n\nseed_ms_drg as (\n\n    select * from tuva.terminology.ms_drg\n\n),\n\nseed_place_of_service as (\n\n    select * from tuva.terminology.place_of_service\n\n),\n\nseed_present_on_admission as (\n\n    select * from tuva.terminology.present_on_admission\n\n),\n\nseed_revenue_center as (\n\n    select * from tuva.terminology.revenue_center\n\n),\n\nduplicate_record as (\n\n    select row_hash\n    from medical_claim\n    group by row_hash\n    having count (*) > 1\n\n),\n\nduplicate_claim_id as (\n\n    select distinct claim_id\n    from (\n        select\n              claim_id\n            , claim_line_number\n        from medical_claim\n        group by\n              claim_id\n            , claim_line_number\n        having count (*) > 1\n    )\n\n),\n\nmissing_fk_patient_id as (\n\n    select distinct medical_claim.row_hash\n    from medical_claim\n         left join tuva.data_profiling.base_eligibility as eligibility\n         on medical_claim.patient_id = eligibility.patient_id\n    where eligibility.patient_id is null\n\n),\n\njoined as (\n\n    select\n          medical_claim.claim_id\n        , medical_claim.claim_line_number\n        , case\n            when duplicate_record.row_hash is null then 0\n            else 1\n          end as duplicate_med_claim_record\n        , case\n            when duplicate_claim_id.claim_id is null then 0\n            else 1\n          end as duplicate_med_claim_id\n        , \n\n    case\n      when medical_claim.patient_id is null or cast(medical_claim.patient_id as string) = '' then 1\n      else 0\n    end as missing_med_claim_patient_id\n        , case\n            when missing_fk_patient_id.row_hash is null then 0\n            else 1\n          end as missing_med_claim_patient_id_fk\n        , \n\n    case\n      when medical_claim.claim_id is null or cast(medical_claim.claim_id as string) = '' then 1\n      else 0\n    end as missing_med_claim_id\n        , \n\n    case\n      when medical_claim.claim_line_number is null or cast(medical_claim.claim_line_number as string) = '' then 1\n      else 0\n    end as missing_med_claim_line_number\n        , \n\n    case\n      when medical_claim.claim_type is null or cast(medical_claim.claim_type as string) = '' then 1\n      else 0\n    end as missing_claim_type\n        , case\n            when medical_claim.claim_type is null then 0\n            when seed_claim_type.claim_type is not null then 0\n            else 1\n          end as invalid_claim_type\n        , \n\n    case\n      when medical_claim.claim_start_date is null or cast(medical_claim.claim_start_date as string) = '' then 1\n      else 0\n    end as missing_claim_start_date\n        , case\n      when medical_claim.claim_start_date is null then 0\n      when try_cast(medical_claim.claim_start_date as date) is not null\n        and try_cast(medical_claim.claim_start_date as date) between '2000-01-01' and \n\n    cast(current_timestamp() as date)\n        then 0\n      else 1\n    end as invalid_claim_start_date\n        , \n\n    case\n      when medical_claim.claim_end_date is null or cast(medical_claim.claim_end_date as string) = '' then 1\n      else 0\n    end as missing_claim_end_date\n        , case\n      when medical_claim.claim_end_date is null then 0\n      when try_cast(medical_claim.claim_end_date as date) is not null\n        and try_cast(medical_claim.claim_end_date as date) between '2000-01-01' and \n\n    cast(current_timestamp() as date)\n        then 0\n      else 1\n    end as invalid_claim_end_date\n        , case\n            when medical_claim.claim_end_date is null then 0\n            when medical_claim.claim_end_date is not null\n              and medical_claim.claim_end_date >= medical_claim.claim_start_date\n              then 0\n            else 1\n          end as invalid_claim_end_before_start\n        , case\n            when medical_claim.claim_type = 'institutional'\n            then \n\n    case\n      when medical_claim.admission_date is null or cast(medical_claim.admission_date as string) = '' then 1\n      else 0\n    end\n            else 0\n          end as missing_admission_date\n        , case\n            when medical_claim.claim_type = 'institutional'\n            then case\n      when medical_claim.admission_date is null then 0\n      when try_cast(medical_claim.admission_date as date) is not null\n        and try_cast(medical_claim.admission_date as date) between '2000-01-01' and \n\n    cast(current_timestamp() as date)\n        then 0\n      else 1\n    end\n            else 0\n          end as invalid_admission_date\n        , case\n            when medical_claim.claim_type = 'institutional'\n            then \n\n    case\n      when medical_claim.discharge_date is null or cast(medical_claim.discharge_date as string) = '' then 1\n      else 0\n    end\n            else 0\n          end as missing_discharge_date\n        , case\n            when medical_claim.claim_type = 'institutional'\n            then case\n      when medical_claim.discharge_date is null then 0\n      when try_cast(medical_claim.discharge_date as date) is not null\n        and try_cast(medical_claim.discharge_date as date) between '2000-01-01' and \n\n    cast(current_timestamp() as date)\n        then 0\n      else 1\n    end\n            else 0\n          end as invalid_discharge_date\n        , case\n            when medical_claim.discharge_date is null then 0\n            when medical_claim.discharge_date is not null\n              and medical_claim.discharge_date >= medical_claim.admission_date\n              then 0\n            else 1\n          end as invalid_discharge_before_admission\n        , \n\n    case\n      when medical_claim.paid_date is null or cast(medical_claim.paid_date as string) = '' then 1\n      else 0\n    end as missing_med_claim_paid_date\n        , case\n      when medical_claim.paid_date is null then 0\n      when try_cast(medical_claim.paid_date as date) is not null\n        and try_cast(medical_claim.paid_date as date) between '2000-01-01' and \n\n    cast(current_timestamp() as date)\n        then 0\n      else 1\n    end as invalid_med_claim_paid_date\n        , \n\n    case\n      when medical_claim.paid_amount is null or cast(medical_claim.paid_amount as string) = '' then 1\n      else 0\n    end as missing_med_claim_paid_amount\n        , case\n            when medical_claim.claim_type = 'institutional'\n            then \n\n    case\n      when medical_claim.bill_type_code is null or cast(medical_claim.bill_type_code as string) = '' then 1\n      else 0\n    end\n            else 0\n          end as missing_bill_type_code\n        , case\n            when medical_claim.bill_type_code is null then 0\n            when seed_bill_type.bill_type_code is not null then 0\n            else 1\n          end as invalid_bill_type_code\n        , case\n            when medical_claim.claim_type = 'professional'\n            then \n\n    case\n      when medical_claim.place_of_service_code is null or cast(medical_claim.place_of_service_code as string) = '' then 1\n      else 0\n    end\n            else 0\n          end as missing_place_of_service_code\n        , case\n            when medical_claim.place_of_service_code is null then 0\n            when seed_place_of_service.place_of_service_code is not null then 0\n            else 1\n          end invalid_place_of_service_code\n        , case\n            when medical_claim.claim_type = 'institutional'\n            then \n\n    case\n      when medical_claim.revenue_center_code is null or cast(medical_claim.revenue_center_code as string) = '' then 1\n      else 0\n    end\n            else 0\n          end as missing_revenue_center_code\n        , case\n            when medical_claim.revenue_center_code is null then 0\n            when seed_revenue_center.revenue_center_code is not null then 0\n            else 1\n          end invalid_revenue_center_code\n        , \n\n    case\n      when medical_claim.diagnosis_code_1 is null or cast(medical_claim.diagnosis_code_1 as string) = '' then 1\n      else 0\n    end as missing_diagnosis_code_1\n        , case\n            when medical_claim.diagnosis_code_1 is null then 0\n            when seed_icd_10_cm.icd_10_cm is not null then 0\n            else 1\n          end invalid_diagnosis_code_1\n       , case\n            when medical_claim.claim_type = 'institutional'\n            then \n\n    case\n      when medical_claim.diagnosis_poa_1 is null or cast(medical_claim.diagnosis_poa_1 as string) = '' then 1\n      else 0\n    end\n            else 0\n          end as missing_diagnosis_poa_1\n       , case\n            when medical_claim.diagnosis_poa_1 is null then 0\n            when seed_present_on_admission.present_on_admit_code is not null then 0\n            else 1\n          end invalid_diagnosis_poa_1\n        , case\n            when medical_claim.claim_type = 'professional'\n            then \n\n    case\n      when medical_claim.hcpcs_code is null or cast(medical_claim.hcpcs_code as string) = '' then 1\n      else 0\n    end\n            else 0\n          end as missing_hcpcs_code\n        , case\n            when medical_claim.discharge_disposition_code is null then 0\n            when seed_discharge_disposition.discharge_disposition_code is not null then 0\n            else 1\n          end invalid_discharge_disposition_code\n        , case\n            when medical_claim.ms_drg_code is null then 0\n            when seed_ms_drg.ms_drg_code is not null then 0\n            else 1\n          end invalid_ms_drg_code\n        , case\n            when medical_claim.claim_type = 'professional'\n            then \n\n    case\n      when medical_claim.billing_npi is null or cast(medical_claim.billing_npi as string) = '' then 1\n      else 0\n    end\n            else 0\n          end as missing_billing_npi\n        , case\n            when medical_claim.claim_type = 'institutional'\n            then \n\n    case\n      when medical_claim.facility_npi is null or cast(medical_claim.facility_npi as string) = '' then 1\n      else 0\n    end\n            else 0\n          end as missing_facility_npi\n        , \n\n    case\n      when medical_claim.rendering_npi is null or cast(medical_claim.rendering_npi as string) = '' then 1\n      else 0\n    end as missing_rendering_npi\n    from medical_claim\n         left join duplicate_record\n            on medical_claim.row_hash = duplicate_record.row_hash\n         left join duplicate_claim_id\n            on medical_claim.claim_id = duplicate_claim_id.claim_id\n         left join missing_fk_patient_id\n            on medical_claim.row_hash = missing_fk_patient_id.row_hash\n         left join seed_bill_type\n            on medical_claim.bill_type_code = seed_bill_type.bill_type_code\n         left join seed_claim_type\n            on medical_claim.claim_type = seed_claim_type.claim_type\n         left join seed_discharge_disposition\n            on medical_claim.discharge_disposition_code = seed_discharge_disposition.discharge_disposition_code\n         left join seed_icd_10_cm\n            on medical_claim.diagnosis_code_1 = seed_icd_10_cm.icd_10_cm\n         left join seed_ms_drg\n            on medical_claim.ms_drg_code = seed_ms_drg.ms_drg_code\n         left join seed_place_of_service\n            on medical_claim.place_of_service_code = seed_place_of_service.place_of_service_code\n         left join seed_present_on_admission\n            on medical_claim.diagnosis_poa_1 = seed_present_on_admission.present_on_admit_code\n         left join seed_revenue_center\n            on medical_claim.revenue_center_code = seed_revenue_center.revenue_center_code\n\n)\n\n/* casting fields used as unique key in snapshot */\nselect\n      \n\n    cast( claim_id as string ) as claim_id\n    , \n\n    cast( claim_line_number as string ) as claim_line_number\n    , duplicate_med_claim_record\n    , duplicate_med_claim_id\n    , missing_med_claim_patient_id\n    , missing_med_claim_patient_id_fk\n    , missing_med_claim_id\n    , missing_med_claim_line_number\n    , missing_claim_type\n    , invalid_claim_type\n    , missing_claim_start_date\n    , invalid_claim_start_date\n    , missing_claim_end_date\n    , invalid_claim_end_date\n    , invalid_claim_end_before_start\n    , missing_admission_date\n    , invalid_admission_date\n    , missing_discharge_date\n    , invalid_discharge_date\n    , invalid_discharge_before_admission\n    , missing_med_claim_paid_date\n    , invalid_med_claim_paid_date\n    , missing_med_claim_paid_amount\n    , missing_bill_type_code\n    , invalid_bill_type_code\n    , missing_place_of_service_code\n    , invalid_place_of_service_code\n    , missing_revenue_center_code\n    , invalid_revenue_center_code\n    , missing_diagnosis_code_1\n    , invalid_diagnosis_code_1\n    , missing_diagnosis_poa_1\n    , invalid_diagnosis_poa_1\n    , missing_hcpcs_code\n    , invalid_discharge_disposition_code\n    , invalid_ms_drg_code\n    , missing_billing_npi\n    , missing_facility_npi\n    , missing_rendering_npi\n    , \n\n    cast(current_timestamp() as timestamp) as run_date\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.data_profiling.medical_claim_detail"}, "model.data_profiling.data_profiling__pharmacy_claim_detail": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.data_profiling.missing_field_check", "macro.data_profiling.valid_claim_date_check", "macro.data_profiling.cast_string_or_varchar", "macro.data_profiling.current_date_or_timestamp"], "nodes": ["model.data_profiling.data_profiling__base_pharmacy_claim", "model.data_profiling.data_profiling__base_eligibility"]}, "config": {"enabled": true, "alias": "pharmacy_claim_detail", "schema": "data_profiling", "database": "tuva", "tags": ["data_profiling"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#141161"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "data_profiling", "fqn": ["data_profiling", "data_profiling__pharmacy_claim_detail"], "unique_id": "model.data_profiling.data_profiling__pharmacy_claim_detail", "raw_code": "{{ config(\n    enabled=var('data_profiling_enabled',var('tuva_packages_enabled',True))\n) }}\n\nwith pharmacy_claim as (\n\n    select * from {{ ref('data_profiling__base_pharmacy_claim') }}\n\n),\n\nduplicate_record as (\n\n    select row_hash\n    from pharmacy_claim\n    group by row_hash\n    having count (*) > 1\n\n),\n\nduplicate_claim_id as (\n\n    select distinct claim_id\n    from (\n        select\n              claim_id\n            , claim_line_number\n        from pharmacy_claim\n        group by\n              claim_id\n            , claim_line_number\n        having count (*) > 1\n    )\n\n),\n\nmissing_fk_patient_id as (\n\n    select distinct pharmacy_claim.row_hash\n    from pharmacy_claim\n         left join {{ ref('data_profiling__base_eligibility') }} as eligibility\n         on pharmacy_claim.patient_id = eligibility.patient_id\n    where eligibility.patient_id is null\n\n),\n\njoined as (\n\n    select\n          pharmacy_claim.claim_id\n        , pharmacy_claim.claim_line_number\n        , case\n            when duplicate_record.row_hash is null then 0\n            else 1\n          end as duplicate_pharm_claim_record\n        , case\n            when duplicate_claim_id.claim_id is null then 0\n            else 1\n          end as duplicate_pharm_claim_id\n        , {{ missing_field_check('pharmacy_claim.patient_id') }} as missing_pharm_claim_patient_id\n        , case\n            when missing_fk_patient_id.row_hash is null then 0\n            else 1\n          end as missing_pharm_claim_patient_id_fk\n        , {{ missing_field_check('pharmacy_claim.claim_id') }} as missing_pharm_claim_id\n        , {{ missing_field_check('pharmacy_claim.claim_line_number') }} as missing_pharm_claim_line_number\n        , {{ missing_field_check('pharmacy_claim.dispensing_date') }} as missing_dispensing_date\n        , {{ valid_claim_date_check('pharmacy_claim.dispensing_date') }} as invalid_dispensing_date\n        , {{ missing_field_check('pharmacy_claim.paid_date') }} as missing_pharm_claim_paid_date\n        , {{ valid_claim_date_check('pharmacy_claim.paid_date') }} as invalid_pharm_claim_paid_date\n        , {{ missing_field_check('pharmacy_claim.paid_amount') }} as missing_pharm_claim_paid_amount\n        , {{ missing_field_check('pharmacy_claim.prescribing_provider_npi') }} as missing_prescribing_provider_npi\n        , {{ missing_field_check('pharmacy_claim.dispensing_provider_npi') }} as missing_dispensing_provider_npi\n        , {{ missing_field_check('pharmacy_claim.ndc_code') }} as missing_ndc_code\n    from pharmacy_claim\n         left join duplicate_record\n            on pharmacy_claim.row_hash = duplicate_record.row_hash\n         left join duplicate_claim_id\n            on pharmacy_claim.claim_id = duplicate_claim_id.claim_id\n         left join missing_fk_patient_id\n            on pharmacy_claim.row_hash = missing_fk_patient_id.row_hash\n\n)\n\nselect\n      {{ cast_string_or_varchar('claim_id') }} as claim_id\n    , {{ cast_string_or_varchar('claim_line_number') }} as claim_line_number\n    , duplicate_pharm_claim_record\n    , duplicate_pharm_claim_id\n    , missing_pharm_claim_patient_id\n    , missing_pharm_claim_patient_id_fk\n    , missing_pharm_claim_id\n    , missing_pharm_claim_line_number\n    , missing_dispensing_date\n    , invalid_dispensing_date\n    , missing_pharm_claim_paid_date\n    , invalid_pharm_claim_paid_date\n    , missing_pharm_claim_paid_amount\n    , missing_prescribing_provider_npi\n    , missing_dispensing_provider_npi\n    , missing_ndc_code\n    , {{ current_date_or_timestamp('timestamp') }} as run_date\nfrom joined", "language": "sql", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "data_profiling__pharmacy_claim_detail.sql", "original_file_path": "models\\data_profiling__pharmacy_claim_detail.sql", "name": "data_profiling__pharmacy_claim_detail", "alias": "pharmacy_claim_detail", "checksum": {"name": "sha256", "checksum": "7586f52d62dabf59adeaeffcd98ca0a04896d0cd623b9fc711a49926a02ab29b"}, "tags": ["data_profiling"], "refs": [["data_profiling__base_pharmacy_claim"], ["data_profiling__base_eligibility"]], "sources": [], "metrics": [], "description": "Data profiling on pharmacy claim line source data with columns for  source primary keys and every data quality check performed.\n", "columns": {"claim_id": {"name": "claim_id", "description": "Primary key for grain - value from source file", "meta": {}, "data_type": null, "quote": null, "tags": []}, "claim_line_number": {"name": "claim_line_number", "description": "Primary key for grain - value from source file", "meta": {}, "data_type": null, "quote": null, "tags": []}, "duplicate_record_pharm": {"name": "duplicate_record_pharm", "description": "See test_catalog seed table and join on test_name  for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "duplicate_pharm_claim_record": {"name": "duplicate_pharm_claim_record", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "duplicate_pharm_claim_id": {"name": "duplicate_pharm_claim_id", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_pharm_claim_patient_id": {"name": "missing_pharm_claim_patient_id", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_pharm_claim_patient_id_fk": {"name": "missing_pharm_claim_patient_id_fk", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_pharm_claim_id": {"name": "missing_pharm_claim_id", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_pharm_claim_line_number": {"name": "missing_pharm_claim_line_number", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_dispensing_date": {"name": "missing_dispensing_date", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_dispensing_date": {"name": "invalid_dispensing_date", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_pharm_claim_paid_date": {"name": "missing_pharm_claim_paid_date", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_pharm_claim_paid_date": {"name": "invalid_pharm_claim_paid_date", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_pharm_claim_paid_amount": {"name": "missing_pharm_claim_paid_amount", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_prescribing_provider_npi": {"name": "missing_prescribing_provider_npi", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_dispensing_provider_npi": {"name": "missing_dispensing_provider_npi", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_ndc": {"name": "missing_ndc", "description": "See test_catalog seed table and join on test_name for more details.\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "run_date": {"name": "run_date", "description": "Datetime the model was run used for snapshots", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": "#141161"}, "patch_path": "data_profiling://models\\_models.yml", "compiled_path": "../target\\compiled\\data_profiling\\models\\data_profiling__pharmacy_claim_detail.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "data_profiling", "materialized": "table", "alias": "pharmacy_claim_detail", "tags": "data_profiling", "enabled": true, "docs": {"node_color": "#141161"}}, "created_at": 1674073789.6823406, "compiled_code": "\n\nwith pharmacy_claim as (\n\n    select * from tuva.data_profiling.base_pharmacy_claim\n\n),\n\nduplicate_record as (\n\n    select row_hash\n    from pharmacy_claim\n    group by row_hash\n    having count (*) > 1\n\n),\n\nduplicate_claim_id as (\n\n    select distinct claim_id\n    from (\n        select\n              claim_id\n            , claim_line_number\n        from pharmacy_claim\n        group by\n              claim_id\n            , claim_line_number\n        having count (*) > 1\n    )\n\n),\n\nmissing_fk_patient_id as (\n\n    select distinct pharmacy_claim.row_hash\n    from pharmacy_claim\n         left join tuva.data_profiling.base_eligibility as eligibility\n         on pharmacy_claim.patient_id = eligibility.patient_id\n    where eligibility.patient_id is null\n\n),\n\njoined as (\n\n    select\n          pharmacy_claim.claim_id\n        , pharmacy_claim.claim_line_number\n        , case\n            when duplicate_record.row_hash is null then 0\n            else 1\n          end as duplicate_pharm_claim_record\n        , case\n            when duplicate_claim_id.claim_id is null then 0\n            else 1\n          end as duplicate_pharm_claim_id\n        , \n\n    case\n      when pharmacy_claim.patient_id is null or cast(pharmacy_claim.patient_id as string) = '' then 1\n      else 0\n    end as missing_pharm_claim_patient_id\n        , case\n            when missing_fk_patient_id.row_hash is null then 0\n            else 1\n          end as missing_pharm_claim_patient_id_fk\n        , \n\n    case\n      when pharmacy_claim.claim_id is null or cast(pharmacy_claim.claim_id as string) = '' then 1\n      else 0\n    end as missing_pharm_claim_id\n        , \n\n    case\n      when pharmacy_claim.claim_line_number is null or cast(pharmacy_claim.claim_line_number as string) = '' then 1\n      else 0\n    end as missing_pharm_claim_line_number\n        , \n\n    case\n      when pharmacy_claim.dispensing_date is null or cast(pharmacy_claim.dispensing_date as string) = '' then 1\n      else 0\n    end as missing_dispensing_date\n        , case\n      when pharmacy_claim.dispensing_date is null then 0\n      when try_cast(pharmacy_claim.dispensing_date as date) is not null\n        and try_cast(pharmacy_claim.dispensing_date as date) between '2000-01-01' and \n\n    cast(current_timestamp() as date)\n        then 0\n      else 1\n    end as invalid_dispensing_date\n        , \n\n    case\n      when pharmacy_claim.paid_date is null or cast(pharmacy_claim.paid_date as string) = '' then 1\n      else 0\n    end as missing_pharm_claim_paid_date\n        , case\n      when pharmacy_claim.paid_date is null then 0\n      when try_cast(pharmacy_claim.paid_date as date) is not null\n        and try_cast(pharmacy_claim.paid_date as date) between '2000-01-01' and \n\n    cast(current_timestamp() as date)\n        then 0\n      else 1\n    end as invalid_pharm_claim_paid_date\n        , \n\n    case\n      when pharmacy_claim.paid_amount is null or cast(pharmacy_claim.paid_amount as string) = '' then 1\n      else 0\n    end as missing_pharm_claim_paid_amount\n        , \n\n    case\n      when pharmacy_claim.prescribing_provider_npi is null or cast(pharmacy_claim.prescribing_provider_npi as string) = '' then 1\n      else 0\n    end as missing_prescribing_provider_npi\n        , \n\n    case\n      when pharmacy_claim.dispensing_provider_npi is null or cast(pharmacy_claim.dispensing_provider_npi as string) = '' then 1\n      else 0\n    end as missing_dispensing_provider_npi\n        , \n\n    case\n      when pharmacy_claim.ndc_code is null or cast(pharmacy_claim.ndc_code as string) = '' then 1\n      else 0\n    end as missing_ndc_code\n    from pharmacy_claim\n         left join duplicate_record\n            on pharmacy_claim.row_hash = duplicate_record.row_hash\n         left join duplicate_claim_id\n            on pharmacy_claim.claim_id = duplicate_claim_id.claim_id\n         left join missing_fk_patient_id\n            on pharmacy_claim.row_hash = missing_fk_patient_id.row_hash\n\n)\n\nselect\n      \n\n    cast( claim_id as string ) as claim_id\n    , \n\n    cast( claim_line_number as string ) as claim_line_number\n    , duplicate_pharm_claim_record\n    , duplicate_pharm_claim_id\n    , missing_pharm_claim_patient_id\n    , missing_pharm_claim_patient_id_fk\n    , missing_pharm_claim_id\n    , missing_pharm_claim_line_number\n    , missing_dispensing_date\n    , invalid_dispensing_date\n    , missing_pharm_claim_paid_date\n    , invalid_pharm_claim_paid_date\n    , missing_pharm_claim_paid_amount\n    , missing_prescribing_provider_npi\n    , missing_dispensing_provider_npi\n    , missing_ndc_code\n    , \n\n    cast(current_timestamp() as timestamp) as run_date\nfrom joined", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.data_profiling.pharmacy_claim_detail"}, "model.data_profiling.data_profiling__base_eligibility": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.claims_data_model.eligibility", "model.claims_data_model.eligibility"]}, "config": {"enabled": true, "alias": "base_eligibility", "schema": "data_profiling", "database": "tuva", "tags": ["data_profiling"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": "#141161"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "data_profiling", "fqn": ["data_profiling", "staging", "data_profiling__base_eligibility"], "unique_id": "model.data_profiling.data_profiling__base_eligibility", "raw_code": "{{ config(\n    enabled=var('data_profiling_enabled',var('tuva_packages_enabled',True))\n) }}\n\n/*\n    Not all data sources may exist. This block of code uses the relation_exists\n    macro to check if a source exists. If the source does not exist it is logged\n    and an empty eligibility table is used instead.\n*/\n\n{% if builtins.var('eligibility')|lower == \"none\" %}\n{% set source_exists = false %}\n{% else %}\n{% set source_exists = true %}\n{% endif %}\n\nwith eligibility_src as (\n\n\n    {% if source_exists %}\n    select * from {{var('eligibility')}}\n\n\n    {% else %}\n    {% if execute %}\n    {{- log(\"eligibility soruce does not exist, using empty table.\", info=true) -}}\n    {% endif %}\n\n\n\n    /*\n        casting fields used in joins and tests to correct data types\n        casting other fields to varchar to prevent unknown type errors\n    */\n    select\n          {{ cast_string_or_varchar('null') }} as patient_id\n        , {{ cast_string_or_varchar('null') }} as member_id\n        , {{ cast_string_or_varchar('null') }} as gender\n        , {{ cast_string_or_varchar('null') }} as race\n        , cast(null as date) as birth_date\n        , cast(null as date) as death_date\n        , {{ cast_string_or_varchar('null') }} as death_flag\n        , cast(null as date) as enrollment_start_date\n        , cast(null as date) as enrollment_end_date\n        , {{ cast_string_or_varchar('null') }} as payer\n        , {{ cast_string_or_varchar('null') }} as payer_type\n        , {{ cast_string_or_varchar('null') }} as dual_status_code\n        , {{ cast_string_or_varchar('null') }} as medicare_status_code\n        , {{ cast_string_or_varchar('null') }} as first_name\n        , {{ cast_string_or_varchar('null') }} as last_name\n        , {{ cast_string_or_varchar('null') }} as address\n        , {{ cast_string_or_varchar('null') }} as city\n        , {{ cast_string_or_varchar('null') }} as state\n        , {{ cast_string_or_varchar('null') }} as zip_code\n        , {{ cast_string_or_varchar('null') }} as phone\n        , {{ cast_string_or_varchar('null') }} as data_source\n    limit 0\n\n    {%- endif %}\n\n),\n\neligibility_with_row_hash as (\n\n    select *\n         , {{ dbt_utils.surrogate_key([\n                  'patient_id'\n                , 'member_id'\n                , 'gender'\n                , 'race'\n                , 'birth_date'\n                , 'death_date'\n                , 'death_flag'\n                , 'enrollment_start_date'\n                , 'enrollment_end_date'\n                , 'payer'\n                , 'payer_type'\n                , 'dual_status_code'\n                , 'medicare_status_code'\n                , 'first_name'\n                , 'last_name'\n                , 'address'\n                , 'city'\n                , 'state'\n                , 'zip_code'\n                , 'phone'\n                , 'data_source'\n               ]) }}\n           as row_hash\n    from eligibility_src\n\n)\n\nselect * from eligibility_with_row_hash", "language": "sql", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "staging\\data_profiling__base_eligibility.sql", "original_file_path": "models\\staging\\data_profiling__base_eligibility.sql", "name": "data_profiling__base_eligibility", "alias": "base_eligibility", "checksum": {"name": "sha256", "checksum": "0f1ad4fccc5a103224b8cf75d57879733229f42771d798dbe0cc89d1f511daf9"}, "tags": ["data_profiling"], "refs": [["eligibility"], ["eligibility"]], "sources": [], "metrics": [], "description": "Base model for eligibility source data. Includes logic to create an empty table if the source is missing and adds a row_hash column.\n", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": "#141161"}, "patch_path": "data_profiling://models\\_models.yml", "compiled_path": "../target\\compiled\\data_profiling\\models\\staging\\data_profiling__base_eligibility.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "data_profiling", "materialized": "table", "alias": "base_eligibility", "tags": "data_profiling", "enabled": true, "docs": {"show": false}}, "created_at": 1674073789.561208, "compiled_code": "\n\n/*\n    Not all data sources may exist. This block of code uses the relation_exists\n    macro to check if a source exists. If the source does not exist it is logged\n    and an empty eligibility table is used instead.\n*/\n\n\n\n\n\nwith eligibility_src as (\n\n\n    \n    select * from tuva.the_tuva_project_input.eligibility\n\n\n    \n\n),\n\neligibility_with_row_hash as (\n\n    select *\n         , md5(cast(coalesce(cast(patient_id as TEXT), '') || '-' || coalesce(cast(member_id as TEXT), '') || '-' || coalesce(cast(gender as TEXT), '') || '-' || coalesce(cast(race as TEXT), '') || '-' || coalesce(cast(birth_date as TEXT), '') || '-' || coalesce(cast(death_date as TEXT), '') || '-' || coalesce(cast(death_flag as TEXT), '') || '-' || coalesce(cast(enrollment_start_date as TEXT), '') || '-' || coalesce(cast(enrollment_end_date as TEXT), '') || '-' || coalesce(cast(payer as TEXT), '') || '-' || coalesce(cast(payer_type as TEXT), '') || '-' || coalesce(cast(dual_status_code as TEXT), '') || '-' || coalesce(cast(medicare_status_code as TEXT), '') || '-' || coalesce(cast(first_name as TEXT), '') || '-' || coalesce(cast(last_name as TEXT), '') || '-' || coalesce(cast(address as TEXT), '') || '-' || coalesce(cast(city as TEXT), '') || '-' || coalesce(cast(state as TEXT), '') || '-' || coalesce(cast(zip_code as TEXT), '') || '-' || coalesce(cast(phone as TEXT), '') || '-' || coalesce(cast(data_source as TEXT), '') as TEXT))\n           as row_hash\n    from eligibility_src\n\n)\n\nselect * from eligibility_with_row_hash", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.data_profiling.base_eligibility"}, "model.data_profiling.data_profiling__base_medical_claim": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.claims_data_model.medical_claim", "model.claims_data_model.medical_claim"]}, "config": {"enabled": true, "alias": "base_medical_claim", "schema": "data_profiling", "database": "tuva", "tags": ["data_profiling"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": "#141161"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "data_profiling", "fqn": ["data_profiling", "staging", "data_profiling__base_medical_claim"], "unique_id": "model.data_profiling.data_profiling__base_medical_claim", "raw_code": "{{ config(\n    enabled=var('data_profiling_enabled',var('tuva_packages_enabled',True))\n) }}\n\n/*\n    Not all data sources may exist. This block of code uses the relation_exists\n    macro to check if a source exists. If the source does not exist it is logged\n    and an empty medical claim table is used instead.\n*/\n\n{% if builtins.var('medical_claim')|lower == \"none\" %}\n{% set source_exists = false %}\n{% else %}\n{% set source_exists = true %}\n{% endif %}\n\n\nwith medical_claim_src as (\n\n\n    {% if source_exists %}\n    select * from {{var('medical_claim')}}\n\n    {% else %}\n\n    {% if execute %}\n    {{- log(\"medical claim soruce does not exist, using empty table.\", info=true) -}}\n    {% endif %}\n\n    /*\n        casting fields used in joins and tests to correct data types\n        casting other fields to varchar to prevent unknown type errors\n    */\n\n    select\n          {{ cast_string_or_varchar('null') }} as claim_id\n        , {{ cast_string_or_varchar('null') }} as claim_line_number\n        , {{ cast_string_or_varchar('null') }} as claim_type\n        , {{ cast_string_or_varchar('null') }} as patient_id\n        , {{ cast_string_or_varchar('null') }} as member_id\n        , cast(null as date) as claim_start_date\n        , cast(null as date) as claim_end_date\n        , cast(null as date) as claim_line_start_date\n        , cast(null as date) as claim_line_end_date\n        , cast(null as date) as admission_date\n        , cast(null as date) as discharge_date\n        , {{ cast_string_or_varchar('null') }} as admit_source_code\n        , {{ cast_string_or_varchar('null') }} as admit_type_code\n        , {{ cast_string_or_varchar('null') }} as discharge_disposition_code\n        , {{ cast_string_or_varchar('null') }} as place_of_service_code\n        , {{ cast_string_or_varchar('null') }} as bill_type_code\n        , {{ cast_string_or_varchar('null') }} as ms_drg_code\n        , {{ cast_string_or_varchar('null') }} as revenue_center_code\n        , {{ cast_string_or_varchar('null') }} as service_unit_quantity\n        , {{ cast_string_or_varchar('null') }} as hcpcs_code\n        , {{ cast_string_or_varchar('null') }} as hcpcs_modifier_1\n        , {{ cast_string_or_varchar('null') }} as hcpcs_modifier_2\n        , {{ cast_string_or_varchar('null') }} as hcpcs_modifier_3\n        , {{ cast_string_or_varchar('null') }} as hcpcs_modifier_4\n        , {{ cast_string_or_varchar('null') }} as hcpcs_modifier_5\n        , {{ cast_string_or_varchar('null') }} as rendering_npi\n        , {{ cast_string_or_varchar('null') }} as billing_npi\n        , {{ cast_string_or_varchar('null') }} as facility_npi\n        , cast(null as date) as paid_date\n        , {{ cast_string_or_varchar('null') }} as paid_amount\n        , {{ cast_string_or_varchar('null') }} as allowed_amount\n        , {{ cast_string_or_varchar('null') }} as charge_amount\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_type\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_1\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_2\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_3\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_4\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_5\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_6\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_7\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_8\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_9\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_10\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_11\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_12\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_13\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_14\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_15\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_16\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_17\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_18\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_19\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_20\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_21\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_22\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_23\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_24\n        , {{ cast_string_or_varchar('null') }} as diagnosis_code_25\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_1\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_2\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_3\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_4\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_5\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_6\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_7\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_8\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_9\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_10\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_11\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_12\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_13\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_14\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_15\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_16\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_17\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_18\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_19\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_20\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_21\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_22\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_23\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_24\n        , {{ cast_string_or_varchar('null') }} as diagnosis_poa_25\n        , {{ cast_string_or_varchar('null') }} as procedure_code_type\n        , {{ cast_string_or_varchar('null') }} as procedure_code_1\n        , {{ cast_string_or_varchar('null') }} as procedure_code_2\n        , {{ cast_string_or_varchar('null') }} as procedure_code_3\n        , {{ cast_string_or_varchar('null') }} as procedure_code_4\n        , {{ cast_string_or_varchar('null') }} as procedure_code_5\n        , {{ cast_string_or_varchar('null') }} as procedure_code_6\n        , {{ cast_string_or_varchar('null') }} as procedure_code_7\n        , {{ cast_string_or_varchar('null') }} as procedure_code_8\n        , {{ cast_string_or_varchar('null') }} as procedure_code_9\n        , {{ cast_string_or_varchar('null') }} as procedure_code_10\n        , {{ cast_string_or_varchar('null') }} as procedure_code_11\n        , {{ cast_string_or_varchar('null') }} as procedure_code_12\n        , {{ cast_string_or_varchar('null') }} as procedure_code_13\n        , {{ cast_string_or_varchar('null') }} as procedure_code_14\n        , {{ cast_string_or_varchar('null') }} as procedure_code_15\n        , {{ cast_string_or_varchar('null') }} as procedure_code_16\n        , {{ cast_string_or_varchar('null') }} as procedure_code_17\n        , {{ cast_string_or_varchar('null') }} as procedure_code_18\n        , {{ cast_string_or_varchar('null') }} as procedure_code_19\n        , {{ cast_string_or_varchar('null') }} as procedure_code_20\n        , {{ cast_string_or_varchar('null') }} as procedure_code_21\n        , {{ cast_string_or_varchar('null') }} as procedure_code_22\n        , {{ cast_string_or_varchar('null') }} as procedure_code_23\n        , {{ cast_string_or_varchar('null') }} as procedure_code_24\n        , {{ cast_string_or_varchar('null') }} as procedure_code_25\n        , {{ cast_string_or_varchar('null') }} as procedure_date_1\n        , {{ cast_string_or_varchar('null') }} as procedure_date_2\n        , {{ cast_string_or_varchar('null') }} as procedure_date_3\n        , {{ cast_string_or_varchar('null') }} as procedure_date_4\n        , {{ cast_string_or_varchar('null') }} as procedure_date_5\n        , {{ cast_string_or_varchar('null') }} as procedure_date_6\n        , {{ cast_string_or_varchar('null') }} as procedure_date_7\n        , {{ cast_string_or_varchar('null') }} as procedure_date_8\n        , {{ cast_string_or_varchar('null') }} as procedure_date_9\n        , {{ cast_string_or_varchar('null') }} as procedure_date_10\n        , {{ cast_string_or_varchar('null') }} as procedure_date_11\n        , {{ cast_string_or_varchar('null') }} as procedure_date_12\n        , {{ cast_string_or_varchar('null') }} as procedure_date_13\n        , {{ cast_string_or_varchar('null') }} as procedure_date_14\n        , {{ cast_string_or_varchar('null') }} as procedure_date_15\n        , {{ cast_string_or_varchar('null') }} as procedure_date_16\n        , {{ cast_string_or_varchar('null') }} as procedure_date_17\n        , {{ cast_string_or_varchar('null') }} as procedure_date_18\n        , {{ cast_string_or_varchar('null') }} as procedure_date_19\n        , {{ cast_string_or_varchar('null') }} as procedure_date_20\n        , {{ cast_string_or_varchar('null') }} as procedure_date_21\n        , {{ cast_string_or_varchar('null') }} as procedure_date_22\n        , {{ cast_string_or_varchar('null') }} as procedure_date_23\n        , {{ cast_string_or_varchar('null') }} as procedure_date_24\n        , {{ cast_string_or_varchar('null') }} as procedure_date_25\n        , {{ cast_string_or_varchar('null') }} as data_source\n    limit 0\n\n    {%- endif %}\n\n),\n\nmedical_claim_with_row_hash as (\n\n    select *\n         , {{ dbt_utils.surrogate_key([\n                 'claim_id', 'claim_line_number', 'claim_type'\n               , 'patient_id', 'member_id', 'claim_start_date'\n               , 'claim_end_date', 'claim_line_start_date'\n               , 'claim_line_end_date', 'admission_date', 'discharge_date'\n               , 'admit_source_code', 'admit_type_code'\n               , 'discharge_disposition_code', 'place_of_service_code'\n               , 'bill_type_code', 'ms_drg_code', 'revenue_center_code'\n               , 'service_unit_quantity', 'hcpcs_code', 'hcpcs_modifier_1'\n               , 'hcpcs_modifier_2', 'hcpcs_modifier_3', 'hcpcs_modifier_4'\n               , 'hcpcs_modifier_5', 'rendering_npi', 'billing_npi'\n               , 'facility_npi', 'paid_date', 'paid_amount'\n               , 'allowed_amount', 'charge_amount', 'diagnosis_code_type'\n               , 'diagnosis_code_1', 'diagnosis_code_2', 'diagnosis_code_3'\n               , 'diagnosis_code_4', 'diagnosis_code_5', 'diagnosis_code_6'\n               , 'diagnosis_code_7', 'diagnosis_code_8', 'diagnosis_code_9'\n               , 'diagnosis_code_10', 'diagnosis_code_11', 'diagnosis_code_12'\n               , 'diagnosis_code_13', 'diagnosis_code_14', 'diagnosis_code_15'\n               , 'diagnosis_code_16', 'diagnosis_code_17', 'diagnosis_code_18'\n               , 'diagnosis_code_19', 'diagnosis_code_20', 'diagnosis_code_21'\n               , 'diagnosis_code_22', 'diagnosis_code_23', 'diagnosis_code_24'\n               , 'diagnosis_code_25', 'diagnosis_poa_1', 'diagnosis_poa_2'\n               , 'diagnosis_poa_3', 'diagnosis_poa_4', 'diagnosis_poa_5'\n               , 'diagnosis_poa_6', 'diagnosis_poa_7', 'diagnosis_poa_8'\n               , 'diagnosis_poa_9', 'diagnosis_poa_10', 'diagnosis_poa_11'\n               , 'diagnosis_poa_12', 'diagnosis_poa_13', 'diagnosis_poa_14'\n               , 'diagnosis_poa_15', 'diagnosis_poa_16', 'diagnosis_poa_17'\n               , 'diagnosis_poa_18', 'diagnosis_poa_19', 'diagnosis_poa_20'\n               , 'diagnosis_poa_21', 'diagnosis_poa_22', 'diagnosis_poa_23'\n               , 'diagnosis_poa_24', 'diagnosis_poa_25', 'procedure_code_type'\n               , 'procedure_code_1', 'procedure_code_2', 'procedure_code_3'\n               , 'procedure_code_4', 'procedure_code_5', 'procedure_code_6'\n               , 'procedure_code_7', 'procedure_code_8', 'procedure_code_9'\n               , 'procedure_code_10', 'procedure_code_11', 'procedure_code_12'\n               , 'procedure_code_13', 'procedure_code_14', 'procedure_code_15'\n               , 'procedure_code_16', 'procedure_code_17', 'procedure_code_18'\n               , 'procedure_code_19', 'procedure_code_20', 'procedure_code_21'\n               , 'procedure_code_22', 'procedure_code_23', 'procedure_code_24'\n               , 'procedure_code_25', 'procedure_date_1', 'procedure_date_2'\n               , 'procedure_date_3', 'procedure_date_4', 'procedure_date_5'\n               , 'procedure_date_6', 'procedure_date_7', 'procedure_date_8'\n               , 'procedure_date_9', 'procedure_date_10', 'procedure_date_11'\n               , 'procedure_date_12', 'procedure_date_13', 'procedure_date_14'\n               , 'procedure_date_15', 'procedure_date_16', 'procedure_date_17'\n               , 'procedure_date_18', 'procedure_date_19', 'procedure_date_20'\n               , 'procedure_date_21', 'procedure_date_22', 'procedure_date_23'\n               , 'procedure_date_24', 'procedure_date_25', 'data_source'\n               ]) }}\n           as row_hash\n    from medical_claim_src\n\n)\n\nselect * from medical_claim_with_row_hash", "language": "sql", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "staging\\data_profiling__base_medical_claim.sql", "original_file_path": "models\\staging\\data_profiling__base_medical_claim.sql", "name": "data_profiling__base_medical_claim", "alias": "base_medical_claim", "checksum": {"name": "sha256", "checksum": "ecad5660da9b5d1c7361c5e610624211ed0579ae56321c48d25db93b7e2a2889"}, "tags": ["data_profiling"], "refs": [["medical_claim"], ["medical_claim"]], "sources": [], "metrics": [], "description": "Base model for medical claim source data. Includes logic to create an  empty table if the source is missing and adds a row_hash column.\n", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": "#141161"}, "patch_path": "data_profiling://models\\_models.yml", "compiled_path": "../target\\compiled\\data_profiling\\models\\staging\\data_profiling__base_medical_claim.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "data_profiling", "materialized": "table", "alias": "base_medical_claim", "tags": "data_profiling", "enabled": true, "docs": {"show": false}}, "created_at": 1674073789.5411706, "compiled_code": "\n\n/*\n    Not all data sources may exist. This block of code uses the relation_exists\n    macro to check if a source exists. If the source does not exist it is logged\n    and an empty medical claim table is used instead.\n*/\n\n\n\n\n\n\nwith medical_claim_src as (\n\n\n    \n    select * from tuva.the_tuva_project_input.medical_claim\n\n    \n\n),\n\nmedical_claim_with_row_hash as (\n\n    select *\n         , md5(cast(coalesce(cast(claim_id as TEXT), '') || '-' || coalesce(cast(claim_line_number as TEXT), '') || '-' || coalesce(cast(claim_type as TEXT), '') || '-' || coalesce(cast(patient_id as TEXT), '') || '-' || coalesce(cast(member_id as TEXT), '') || '-' || coalesce(cast(claim_start_date as TEXT), '') || '-' || coalesce(cast(claim_end_date as TEXT), '') || '-' || coalesce(cast(claim_line_start_date as TEXT), '') || '-' || coalesce(cast(claim_line_end_date as TEXT), '') || '-' || coalesce(cast(admission_date as TEXT), '') || '-' || coalesce(cast(discharge_date as TEXT), '') || '-' || coalesce(cast(admit_source_code as TEXT), '') || '-' || coalesce(cast(admit_type_code as TEXT), '') || '-' || coalesce(cast(discharge_disposition_code as TEXT), '') || '-' || coalesce(cast(place_of_service_code as TEXT), '') || '-' || coalesce(cast(bill_type_code as TEXT), '') || '-' || coalesce(cast(ms_drg_code as TEXT), '') || '-' || coalesce(cast(revenue_center_code as TEXT), '') || '-' || coalesce(cast(service_unit_quantity as TEXT), '') || '-' || coalesce(cast(hcpcs_code as TEXT), '') || '-' || coalesce(cast(hcpcs_modifier_1 as TEXT), '') || '-' || coalesce(cast(hcpcs_modifier_2 as TEXT), '') || '-' || coalesce(cast(hcpcs_modifier_3 as TEXT), '') || '-' || coalesce(cast(hcpcs_modifier_4 as TEXT), '') || '-' || coalesce(cast(hcpcs_modifier_5 as TEXT), '') || '-' || coalesce(cast(rendering_npi as TEXT), '') || '-' || coalesce(cast(billing_npi as TEXT), '') || '-' || coalesce(cast(facility_npi as TEXT), '') || '-' || coalesce(cast(paid_date as TEXT), '') || '-' || coalesce(cast(paid_amount as TEXT), '') || '-' || coalesce(cast(allowed_amount as TEXT), '') || '-' || coalesce(cast(charge_amount as TEXT), '') || '-' || coalesce(cast(diagnosis_code_type as TEXT), '') || '-' || coalesce(cast(diagnosis_code_1 as TEXT), '') || '-' || coalesce(cast(diagnosis_code_2 as TEXT), '') || '-' || coalesce(cast(diagnosis_code_3 as TEXT), '') || '-' || coalesce(cast(diagnosis_code_4 as TEXT), '') || '-' || coalesce(cast(diagnosis_code_5 as TEXT), '') || '-' || coalesce(cast(diagnosis_code_6 as TEXT), '') || '-' || coalesce(cast(diagnosis_code_7 as TEXT), '') || '-' || coalesce(cast(diagnosis_code_8 as TEXT), '') || '-' || coalesce(cast(diagnosis_code_9 as TEXT), '') || '-' || coalesce(cast(diagnosis_code_10 as TEXT), '') || '-' || coalesce(cast(diagnosis_code_11 as TEXT), '') || '-' || coalesce(cast(diagnosis_code_12 as TEXT), '') || '-' || coalesce(cast(diagnosis_code_13 as TEXT), '') || '-' || coalesce(cast(diagnosis_code_14 as TEXT), '') || '-' || coalesce(cast(diagnosis_code_15 as TEXT), '') || '-' || coalesce(cast(diagnosis_code_16 as TEXT), '') || '-' || coalesce(cast(diagnosis_code_17 as TEXT), '') || '-' || coalesce(cast(diagnosis_code_18 as TEXT), '') || '-' || coalesce(cast(diagnosis_code_19 as TEXT), '') || '-' || coalesce(cast(diagnosis_code_20 as TEXT), '') || '-' || coalesce(cast(diagnosis_code_21 as TEXT), '') || '-' || coalesce(cast(diagnosis_code_22 as TEXT), '') || '-' || coalesce(cast(diagnosis_code_23 as TEXT), '') || '-' || coalesce(cast(diagnosis_code_24 as TEXT), '') || '-' || coalesce(cast(diagnosis_code_25 as TEXT), '') || '-' || coalesce(cast(diagnosis_poa_1 as TEXT), '') || '-' || coalesce(cast(diagnosis_poa_2 as TEXT), '') || '-' || coalesce(cast(diagnosis_poa_3 as TEXT), '') || '-' || coalesce(cast(diagnosis_poa_4 as TEXT), '') || '-' || coalesce(cast(diagnosis_poa_5 as TEXT), '') || '-' || coalesce(cast(diagnosis_poa_6 as TEXT), '') || '-' || coalesce(cast(diagnosis_poa_7 as TEXT), '') || '-' || coalesce(cast(diagnosis_poa_8 as TEXT), '') || '-' || coalesce(cast(diagnosis_poa_9 as TEXT), '') || '-' || coalesce(cast(diagnosis_poa_10 as TEXT), '') || '-' || coalesce(cast(diagnosis_poa_11 as TEXT), '') || '-' || coalesce(cast(diagnosis_poa_12 as TEXT), '') || '-' || coalesce(cast(diagnosis_poa_13 as TEXT), '') || '-' || coalesce(cast(diagnosis_poa_14 as TEXT), '') || '-' || coalesce(cast(diagnosis_poa_15 as TEXT), '') || '-' || coalesce(cast(diagnosis_poa_16 as TEXT), '') || '-' || coalesce(cast(diagnosis_poa_17 as TEXT), '') || '-' || coalesce(cast(diagnosis_poa_18 as TEXT), '') || '-' || coalesce(cast(diagnosis_poa_19 as TEXT), '') || '-' || coalesce(cast(diagnosis_poa_20 as TEXT), '') || '-' || coalesce(cast(diagnosis_poa_21 as TEXT), '') || '-' || coalesce(cast(diagnosis_poa_22 as TEXT), '') || '-' || coalesce(cast(diagnosis_poa_23 as TEXT), '') || '-' || coalesce(cast(diagnosis_poa_24 as TEXT), '') || '-' || coalesce(cast(diagnosis_poa_25 as TEXT), '') || '-' || coalesce(cast(procedure_code_type as TEXT), '') || '-' || coalesce(cast(procedure_code_1 as TEXT), '') || '-' || coalesce(cast(procedure_code_2 as TEXT), '') || '-' || coalesce(cast(procedure_code_3 as TEXT), '') || '-' || coalesce(cast(procedure_code_4 as TEXT), '') || '-' || coalesce(cast(procedure_code_5 as TEXT), '') || '-' || coalesce(cast(procedure_code_6 as TEXT), '') || '-' || coalesce(cast(procedure_code_7 as TEXT), '') || '-' || coalesce(cast(procedure_code_8 as TEXT), '') || '-' || coalesce(cast(procedure_code_9 as TEXT), '') || '-' || coalesce(cast(procedure_code_10 as TEXT), '') || '-' || coalesce(cast(procedure_code_11 as TEXT), '') || '-' || coalesce(cast(procedure_code_12 as TEXT), '') || '-' || coalesce(cast(procedure_code_13 as TEXT), '') || '-' || coalesce(cast(procedure_code_14 as TEXT), '') || '-' || coalesce(cast(procedure_code_15 as TEXT), '') || '-' || coalesce(cast(procedure_code_16 as TEXT), '') || '-' || coalesce(cast(procedure_code_17 as TEXT), '') || '-' || coalesce(cast(procedure_code_18 as TEXT), '') || '-' || coalesce(cast(procedure_code_19 as TEXT), '') || '-' || coalesce(cast(procedure_code_20 as TEXT), '') || '-' || coalesce(cast(procedure_code_21 as TEXT), '') || '-' || coalesce(cast(procedure_code_22 as TEXT), '') || '-' || coalesce(cast(procedure_code_23 as TEXT), '') || '-' || coalesce(cast(procedure_code_24 as TEXT), '') || '-' || coalesce(cast(procedure_code_25 as TEXT), '') || '-' || coalesce(cast(procedure_date_1 as TEXT), '') || '-' || coalesce(cast(procedure_date_2 as TEXT), '') || '-' || coalesce(cast(procedure_date_3 as TEXT), '') || '-' || coalesce(cast(procedure_date_4 as TEXT), '') || '-' || coalesce(cast(procedure_date_5 as TEXT), '') || '-' || coalesce(cast(procedure_date_6 as TEXT), '') || '-' || coalesce(cast(procedure_date_7 as TEXT), '') || '-' || coalesce(cast(procedure_date_8 as TEXT), '') || '-' || coalesce(cast(procedure_date_9 as TEXT), '') || '-' || coalesce(cast(procedure_date_10 as TEXT), '') || '-' || coalesce(cast(procedure_date_11 as TEXT), '') || '-' || coalesce(cast(procedure_date_12 as TEXT), '') || '-' || coalesce(cast(procedure_date_13 as TEXT), '') || '-' || coalesce(cast(procedure_date_14 as TEXT), '') || '-' || coalesce(cast(procedure_date_15 as TEXT), '') || '-' || coalesce(cast(procedure_date_16 as TEXT), '') || '-' || coalesce(cast(procedure_date_17 as TEXT), '') || '-' || coalesce(cast(procedure_date_18 as TEXT), '') || '-' || coalesce(cast(procedure_date_19 as TEXT), '') || '-' || coalesce(cast(procedure_date_20 as TEXT), '') || '-' || coalesce(cast(procedure_date_21 as TEXT), '') || '-' || coalesce(cast(procedure_date_22 as TEXT), '') || '-' || coalesce(cast(procedure_date_23 as TEXT), '') || '-' || coalesce(cast(procedure_date_24 as TEXT), '') || '-' || coalesce(cast(procedure_date_25 as TEXT), '') || '-' || coalesce(cast(data_source as TEXT), '') as TEXT))\n           as row_hash\n    from medical_claim_src\n\n)\n\nselect * from medical_claim_with_row_hash", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.data_profiling.base_medical_claim"}, "model.data_profiling.data_profiling__base_pharmacy_claim": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.surrogate_key"], "nodes": ["model.claims_data_model.pharmacy_claim", "model.claims_data_model.pharmacy_claim"]}, "config": {"enabled": true, "alias": "base_pharmacy_claim", "schema": "data_profiling", "database": "tuva", "tags": ["data_profiling"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": "#141161"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "data_profiling", "fqn": ["data_profiling", "staging", "data_profiling__base_pharmacy_claim"], "unique_id": "model.data_profiling.data_profiling__base_pharmacy_claim", "raw_code": "{{ config(\n    enabled=var('data_profiling_enabled',var('tuva_packages_enabled',True))\n) }}\n\n/*\n    Not all data sources may exist. This block of code uses the relation_exists\n    macro to check if a source exists. If the source does not exist it is logged\n    and an empty pharmacy claim table is used instead.\n*/\n\n{% if builtins.var('pharmacy_claim')|lower == \"none\" %}\n{% set source_exists = false %}\n{% else %}\n{% set source_exists = true %}\n{% endif %}\n\n\nwith pharmacy_claim_src as (\n\n\n    {% if source_exists %}\n    select * from {{var('pharmacy_claim')}}\n\n    {% else %}\n\n    {% if execute %}\n    {{- log(\"pharmacy_claim soruce does not exist, using empty table.\", info=true) -}}\n    {% endif %}\n\n    /*\n        casting fields used in joins and tests to correct data types\n        casting other fields to varchar to prevent unknown type errors\n    */\n\n    select\n          {{ cast_string_or_varchar('null') }} as claim_id\n        , {{ cast_string_or_varchar('null') }} as claim_line_number\n        , {{ cast_string_or_varchar('null') }} as patient_id\n        , {{ cast_string_or_varchar('null') }} as member_id\n        , {{ cast_string_or_varchar('null') }} as prescribing_provider_npi\n        , {{ cast_string_or_varchar('null') }} as dispensing_provider_npi\n        , cast(null as date) as dispensing_date\n        , {{ cast_string_or_varchar('null') }} as ndc_code\n        , {{ cast_string_or_varchar('null') }} as quantity\n        , {{ cast_string_or_varchar('null') }} as days_supply\n        , {{ cast_string_or_varchar('null') }} as refills\n        , cast(null as date) as paid_date\n        , {{ cast_string_or_varchar('null') }} as paid_amount\n        , {{ cast_string_or_varchar('null') }} as allowed_amount\n        , {{ cast_string_or_varchar('null') }} as data_source\n    limit 0\n\n    {%- endif %}\n\n),\n\npharmacy_claim_with_row_hash as (\n\n    select *\n         , {{ dbt_utils.surrogate_key([\n                  'claim_id'\n                , 'claim_line_number'\n                , 'patient_id'\n                , 'member_id'\n                , 'prescribing_provider_npi'\n                , 'dispensing_provider_npi'\n                , 'dispensing_date'\n                , 'ndc_code'\n                , 'quantity'\n                , 'days_supply'\n                , 'refills'\n                , 'paid_date'\n                , 'paid_amount'\n                , 'allowed_amount'\n                , 'data_source'\n               ]) }}\n           as row_hash\n    from pharmacy_claim_src\n\n)\n\nselect * from pharmacy_claim_with_row_hash", "language": "sql", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "staging\\data_profiling__base_pharmacy_claim.sql", "original_file_path": "models\\staging\\data_profiling__base_pharmacy_claim.sql", "name": "data_profiling__base_pharmacy_claim", "alias": "base_pharmacy_claim", "checksum": {"name": "sha256", "checksum": "c9983c29a4d253f08a09cff2270f6b61c4a86968c3521106b6d45fc569c05b15"}, "tags": ["data_profiling"], "refs": [["pharmacy_claim"], ["pharmacy_claim"]], "sources": [], "metrics": [], "description": "Base model for pharmacy claim source data. Includes logic to create an  empty table if the source is missing and adds a row_hash column.\n", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": "#141161"}, "patch_path": "data_profiling://models\\_models.yml", "compiled_path": "../target\\compiled\\data_profiling\\models\\staging\\data_profiling__base_pharmacy_claim.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "data_profiling", "materialized": "table", "alias": "base_pharmacy_claim", "tags": "data_profiling", "enabled": true, "docs": {"show": false}}, "created_at": 1674073789.5311666, "compiled_code": "\n\n/*\n    Not all data sources may exist. This block of code uses the relation_exists\n    macro to check if a source exists. If the source does not exist it is logged\n    and an empty pharmacy claim table is used instead.\n*/\n\n\n\n\n\n\nwith pharmacy_claim_src as (\n\n\n    \n    select * from tuva.the_tuva_project_input.pharmacy_claim\n\n    \n\n),\n\npharmacy_claim_with_row_hash as (\n\n    select *\n         , md5(cast(coalesce(cast(claim_id as TEXT), '') || '-' || coalesce(cast(claim_line_number as TEXT), '') || '-' || coalesce(cast(patient_id as TEXT), '') || '-' || coalesce(cast(member_id as TEXT), '') || '-' || coalesce(cast(prescribing_provider_npi as TEXT), '') || '-' || coalesce(cast(dispensing_provider_npi as TEXT), '') || '-' || coalesce(cast(dispensing_date as TEXT), '') || '-' || coalesce(cast(ndc_code as TEXT), '') || '-' || coalesce(cast(quantity as TEXT), '') || '-' || coalesce(cast(days_supply as TEXT), '') || '-' || coalesce(cast(refills as TEXT), '') || '-' || coalesce(cast(paid_date as TEXT), '') || '-' || coalesce(cast(paid_amount as TEXT), '') || '-' || coalesce(cast(allowed_amount as TEXT), '') || '-' || coalesce(cast(data_source as TEXT), '') as TEXT))\n           as row_hash\n    from pharmacy_claim_src\n\n)\n\nselect * from pharmacy_claim_with_row_hash", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.data_profiling.base_pharmacy_claim"}, "snapshot.data_profiling.snapshot_claim_summary": {"compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["model.data_profiling.data_profiling__claim_summary"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["data_profiling"], "meta": {}, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "test_name||run_date", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "strategy": "timestamp", "target_schema": "data_profiling", "target_database": "tuva", "updated_at": "run_date", "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "data_profiling", "fqn": ["data_profiling", "snapshot_claim_summary", "snapshot_claim_summary"], "unique_id": "snapshot.data_profiling.snapshot_claim_summary", "raw_code": "\n\n{%- if (var('data_profiling_schema',None) != None or (var('data_profiling_schema',None) == None and var('tuva_schema_prefix',None) == None))  -%}\n    {{ config(\n        target_database = var('data_profiling_database',var('tuva_database','tuva'))\n      , target_schema = var('data_profiling_schema','data_profiling')\n      , strategy = 'timestamp'\n      , updated_at = 'run_date'\n      , unique_key = 'test_name||run_date'\n      , enabled = var('data_profiling_enabled',var('tuva_packages_enabled',True))\n      , tags= 'data_profiling'\n    ) }}\n{%- elif var('tuva_schema_prefix',None) != None -%}\n    {{ config(\n        target_database = var('data_profiling_database',var('tuva_database','tuva'))\n      , target_schema = var('tuva_schema_prefix')~'_data_profiling'\n      , strategy = 'timestamp'\n      , updated_at = 'run_date'\n      , unique_key = 'test_name||run_date'\n      , enabled = var('data_profiling_enabled',var('tuva_packages_enabled',True))\n      , tags= 'data_profiling'\n    ) }}\n{%- endif -%}\n\n\nselect * from {{ ref('data_profiling__claim_summary') }}\n\n", "language": "sql", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "snapshot_claim_summary.sql", "original_file_path": "snapshots\\snapshot_claim_summary.sql", "name": "snapshot_claim_summary", "alias": "snapshot_claim_summary", "checksum": {"name": "sha256", "checksum": "25b66a191b27e46c9a2d948af91b828ee82327af7c46e0769b2675b43337c464"}, "tags": ["data_profiling"], "refs": [["data_profiling__claim_summary"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_database": "tuva", "target_schema": "data_profiling", "strategy": "timestamp", "updated_at": "run_date", "unique_key": "test_name||run_date", "enabled": true, "tags": ["data_profiling"], "docs": {"show": false}}, "created_at": 1674073787.4172585, "compiled_code": "select * from tuva.data_profiling.claim_summary\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.data_profiling.snapshot_claim_summary"}, "snapshot.data_profiling.snapshot_eligibility_detail": {"compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["model.data_profiling.data_profiling__eligibility_detail"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["data_profiling"], "meta": {}, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "patient_id||member_id||enrollment_start_date||enrollment_end_date||payer||payer_type||run_date", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "strategy": "timestamp", "target_schema": "data_profiling", "target_database": "tuva", "updated_at": "run_date", "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "data_profiling", "fqn": ["data_profiling", "snapshot_eligibility_detail", "snapshot_eligibility_detail"], "unique_id": "snapshot.data_profiling.snapshot_eligibility_detail", "raw_code": "\n\n{%- if (var('data_profiling_schema',None) != None or (var('data_profiling_schema',None) == None and var('tuva_schema_prefix',None) == None))  -%}\n    {{ config(\n        target_database = var('data_profiling_database',var('tuva_database','tuva'))\n      , target_schema = var('data_profiling_schema','data_profiling')\n      , strategy = 'timestamp'\n      , updated_at = 'run_date'\n      , unique_key = 'patient_id||member_id||enrollment_start_date||enrollment_end_date||payer||payer_type||run_date'\n      , enabled = var('data_profiling_enabled',var('tuva_packages_enabled',True))\n      , tags= 'data_profiling'\n    ) }}\n{%- elif var('tuva_schema_prefix',None) != None -%}\n    {{ config(\n        target_database = var('data_profiling_database',var('tuva_database','tuva'))\n      , target_schema = var('tuva_schema_prefix')~'_data_profiling'\n      , strategy = 'timestamp'\n      , updated_at = 'run_date'\n      , unique_key = 'patient_id||member_id||enrollment_start_date||enrollment_end_date||payer||payer_type||run_date'\n      , enabled = var('data_profiling_enabled',var('tuva_packages_enabled',True))\n      , tags= 'data_profiling'\n    ) }}\n{%- endif -%}\n\n\nselect * from {{ ref('data_profiling__eligibility_detail') }}\n\n", "language": "sql", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "snapshot_eligibility_detail.sql", "original_file_path": "snapshots\\snapshot_eligibility_detail.sql", "name": "snapshot_eligibility_detail", "alias": "snapshot_eligibility_detail", "checksum": {"name": "sha256", "checksum": "a86a3f3cefc284a323af284dc6272ac8a8a9dd666651e19015afc3a32213e7fb"}, "tags": ["data_profiling"], "refs": [["data_profiling__eligibility_detail"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_database": "tuva", "target_schema": "data_profiling", "strategy": "timestamp", "updated_at": "run_date", "unique_key": "patient_id||member_id||enrollment_start_date||enrollment_end_date||payer||payer_type||run_date", "enabled": true, "tags": ["data_profiling"], "docs": {"show": false}}, "created_at": 1674073787.4608085, "compiled_code": "select * from tuva.data_profiling.eligibility_detail\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.data_profiling.snapshot_eligibility_detail"}, "snapshot.data_profiling.snapshot_medical_claim_detail": {"compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["model.data_profiling.data_profiling__medical_claim_detail"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["data_profiling"], "meta": {}, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "claim_id||claim_line_number||run_date", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "strategy": "timestamp", "target_schema": "data_profiling", "target_database": "tuva", "updated_at": "run_date", "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "data_profiling", "fqn": ["data_profiling", "snapshot_medical_claim_detail", "snapshot_medical_claim_detail"], "unique_id": "snapshot.data_profiling.snapshot_medical_claim_detail", "raw_code": "\n\n{%- if (var('data_profiling_schema',None) != None or (var('data_profiling_schema',None) == None and var('tuva_schema_prefix',None) == None))  -%}\n    {{ config(\n        target_database = var('data_profiling_database',var('tuva_database','tuva'))\n      , target_schema = var('data_profiling_schema','data_profiling')\n      , strategy = 'timestamp'\n      , updated_at = 'run_date'\n      , unique_key = 'claim_id||claim_line_number||run_date'\n      , enabled = var('data_profiling_enabled',var('tuva_packages_enabled',True))\n      , tags= 'data_profiling'\n    ) }}\n{%- elif var('tuva_schema_prefix',None) != None -%}\n    {{ config(\n        target_database = var('data_profiling_database',var('tuva_database','tuva'))\n      , target_schema = var('tuva_schema_prefix')~'_data_profiling'\n      , strategy = 'timestamp'\n      , updated_at = 'run_date'\n      , unique_key = 'claim_id||claim_line_number||run_date'\n      , enabled = var('data_profiling_enabled',var('tuva_packages_enabled',True))\n      , tags= 'data_profiling'\n    ) }}\n{%- endif -%}\n\n\nselect * from {{ ref('data_profiling__medical_claim_detail') }}\n\n", "language": "sql", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "snapshot_medical_claim_detail.sql", "original_file_path": "snapshots\\snapshot_medical_claim_detail.sql", "name": "snapshot_medical_claim_detail", "alias": "snapshot_medical_claim_detail", "checksum": {"name": "sha256", "checksum": "dac3339fe69ce337fbe6d1b106fa4bc46be8b619de2df5f519df1c0c71851452"}, "tags": ["data_profiling"], "refs": [["data_profiling__medical_claim_detail"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_database": "tuva", "target_schema": "data_profiling", "strategy": "timestamp", "updated_at": "run_date", "unique_key": "claim_id||claim_line_number||run_date", "enabled": true, "tags": ["data_profiling"], "docs": {"show": false}}, "created_at": 1674073787.4858325, "compiled_code": "select * from tuva.data_profiling.medical_claim_detail\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.data_profiling.snapshot_medical_claim_detail"}, "snapshot.data_profiling.snapshot_pharmacy_claim_detail": {"compiled": true, "resource_type": "snapshot", "depends_on": {"macros": [], "nodes": ["model.data_profiling.data_profiling__pharmacy_claim_detail"]}, "config": {"enabled": true, "alias": null, "schema": null, "database": null, "tags": ["data_profiling"], "meta": {}, "materialized": "snapshot", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": "claim_id||claim_line_number||run_date", "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": null}, "strategy": "timestamp", "target_schema": "data_profiling", "target_database": "tuva", "updated_at": "run_date", "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "data_profiling", "fqn": ["data_profiling", "snapshot_pharmacy_claim_detail", "snapshot_pharmacy_claim_detail"], "unique_id": "snapshot.data_profiling.snapshot_pharmacy_claim_detail", "raw_code": "\n\n{%- if (var('data_profiling_schema',None) != None or (var('data_profiling_schema',None) == None and var('tuva_schema_prefix',None) == None))  -%}\n    {{ config(\n        target_database = var('data_profiling_database',var('tuva_database','tuva'))\n      , target_schema = var('data_profiling_schema','data_profiling')\n      , strategy = 'timestamp'\n      , updated_at = 'run_date'\n      , unique_key = 'claim_id||claim_line_number||run_date'\n      , enabled = var('data_profiling_enabled',var('tuva_packages_enabled',True))\n      , tags= 'data_profiling'\n    ) }}\n{%- elif var('tuva_schema_prefix',None) != None -%}\n    {{ config(\n        target_database = var('data_profiling_database',var('tuva_database','tuva'))\n      , target_schema = var('tuva_schema_prefix')~'_data_profiling'\n      , strategy = 'timestamp'\n      , updated_at = 'run_date'\n      , unique_key = 'claim_id||claim_line_number||run_date'\n      , enabled = var('data_profiling_enabled',var('tuva_packages_enabled',True))\n      , tags= 'data_profiling'\n    ) }}\n{%- endif -%}\n\n\nselect * from {{ ref('data_profiling__pharmacy_claim_detail') }}\n\n", "language": "sql", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "snapshot_pharmacy_claim_detail.sql", "original_file_path": "snapshots\\snapshot_pharmacy_claim_detail.sql", "name": "snapshot_pharmacy_claim_detail", "alias": "snapshot_pharmacy_claim_detail", "checksum": {"name": "sha256", "checksum": "ad898bd032e2424d24caf144c21f434ada7610780f850ff711f87e6a3f604e3e"}, "tags": ["data_profiling"], "refs": [["data_profiling__pharmacy_claim_detail"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": false, "node_color": null}, "patch_path": null, "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"target_database": "tuva", "target_schema": "data_profiling", "strategy": "timestamp", "updated_at": "run_date", "unique_key": "claim_id||claim_line_number||run_date", "enabled": true, "tags": ["data_profiling"], "docs": {"show": false}}, "created_at": 1674073787.5073445, "compiled_code": "select * from tuva.data_profiling.pharmacy_claim_detail\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.data_profiling.snapshot_pharmacy_claim_detail"}, "seed.data_profiling.data_profiling__test_catalog": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "test_catalog", "schema": "data_profiling", "database": "tuva", "tags": ["data_profiling"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"test_id": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#141161"}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "data_profiling", "fqn": ["data_profiling", "data_profiling__test_catalog"], "unique_id": "seed.data_profiling.data_profiling__test_catalog", "raw_code": "", "language": "sql", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "data_profiling__test_catalog.csv", "original_file_path": "seeds\\data_profiling__test_catalog.csv", "name": "data_profiling__test_catalog", "alias": "test_catalog", "checksum": {"name": "sha256", "checksum": "a05a7524ddf160a9bac51638dfba45cc0c49198c480ec4258ae3fdf32be3ee70"}, "tags": ["data_profiling"], "refs": [], "sources": [], "metrics": [], "description": "A complete list of all data profiling tests", "columns": {"test_id": {"name": "test_id", "description": "Unique identifier for the test", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_name": {"name": "test_name", "description": "Unique column name of the test\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "description": {"name": "description", "description": "Guideline or reasoning for the test", "meta": {}, "data_type": null, "quote": null, "tags": []}, "test_table_name": {"name": "test_table_name", "description": "The name of the data profiling detail table", "meta": {}, "data_type": null, "quote": null, "tags": []}, "source_table_name": {"name": "source_table_name", "description": "The name of the source table the test is ran on", "meta": {}, "data_type": null, "quote": null, "tags": []}, "columns": {"name": "columns", "description": "List of column(s) the test is ran on", "meta": {}, "data_type": null, "quote": null, "tags": []}, "grain": {"name": "grain", "description": "Grain the test is ran on (table name or column name), may not always be the same as the table grain\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "record_source": {"name": "record_source", "description": "Source of records the test is ran on  (e.g. all claims, institutional claims, etc.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "category": {"name": "category", "description": "Category or class of test (e.g. data type, unique, missing, etc.)\n", "meta": {}, "data_type": null, "quote": null, "tags": []}, "severity": {"name": "severity", "description": "Indicates the severity of a test failure (1-high, 2-medium, 3-low)", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": "#141161"}, "patch_path": "data_profiling://seeds\\seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "data_profiling", "enabled": true, "alias": "test_catalog", "tags": "data_profiling", "column_types": {"test_id": "varchar"}, "docs": {"node_color": "#141161"}}, "created_at": 1674073789.5216458, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.data_profiling.test_catalog"}, "model.pmpm.pmpm__pmpm_builder": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.pmpm.pmpm__member_months", "model.pmpm.pmpm__claim_spend_and_utilization"]}, "config": {"enabled": true, "alias": "final_pmpm_builder", "schema": "pmpm", "database": "tuva", "tags": ["pmpm"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#abab26"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "pmpm", "fqn": ["pmpm", "pmpm__pmpm_builder"], "unique_id": "model.pmpm.pmpm__pmpm_builder", "raw_code": "{{ config(enabled = var('pmpm_enabled',var('tuva_packages_enabled',True)) ) }}\n\nwith member_months as\n(\n    select distinct patient_id, year_month\n    from {{ref('pmpm__member_months')}}\n)\n, claim_spend_and_utilization as\n(\n    select *\n    from {{ref('pmpm__claim_spend_and_utilization')}}\n)\n, cte_spend_and_visits as\n(\n    select \n        patient_id\n        ,year_month\n        ,sum(spend) as total_spend\n        ,sum(case when claim_type <> 'pharmacy' then spend else 0 end) as medical_spend\n        ,sum(case when claim_type = 'pharmacy' then spend else 0 end) as pharmacy_spend\n\n    from claim_spend_and_utilization\n    group by\n        patient_id\n        ,year_month \n)\n\nselect \n    mm.patient_id\n    ,mm.year_month\n    --,plan or payer field\n    ,coalesce(sv.total_spend,0) as total_spend\n    ,coalesce(sv.medical_spend,0) as medical_spend\n    ,coalesce(sv.pharmacy_spend,0) as pharmacy_spend\nfrom member_months mm\nleft join cte_spend_and_visits sv\n    on mm.patient_id = sv.patient_id\n    and mm.year_month = sv.year_month", "language": "sql", "package_name": "pmpm", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\pmpm", "path": "pmpm__pmpm_builder.sql", "original_file_path": "models\\pmpm__pmpm_builder.sql", "name": "pmpm__pmpm_builder", "alias": "final_pmpm_builder", "checksum": {"name": "sha256", "checksum": "b21a5da3e559375701893b075b6bc00b99f331069dd6b8bf23ff2571eacaddc3"}, "tags": ["pmpm"], "refs": [["pmpm__member_months"], ["pmpm__claim_spend_and_utilization"]], "sources": [], "metrics": [], "description": "Add model description\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique identifier for each patient in the dataset.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "year_month": {"name": "year_month", "description": "Concatenation of the year and month for the record. Each patient has one record per year_month of their eligibility, or in other words, one record per member month.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "total_spend": {"name": "total_spend", "description": "This metric sums the total paid_amounts or spend for pharmacy and medical claims over the given dimension for each member month.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "medical_spend": {"name": "medical_spend", "description": "This metric sums the medical claims paid_amounts or spend over the given dimension for each member month.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "pharmacy_spend": {"name": "pharmacy_spend", "description": "This metric sums the pharmacy claims paid_amounts or spend over the given dimension for each member month.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": "#abab26"}, "patch_path": "pmpm://models\\_models.yml", "compiled_path": "../target\\compiled\\pmpm\\models\\pmpm__pmpm_builder.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "pmpm", "alias": "final_pmpm_builder", "tags": "pmpm", "materialized": "table", "enabled": true, "docs": {"node_color": "#abab26"}}, "created_at": 1674073789.822364, "compiled_code": "\n\nwith member_months as\n(\n    select distinct patient_id, year_month\n    from tuva.pmpm.intermediate_member_months\n)\n, claim_spend_and_utilization as\n(\n    select *\n    from tuva.pmpm.intermediate_claim_spend_and_utilization\n)\n, cte_spend_and_visits as\n(\n    select \n        patient_id\n        ,year_month\n        ,sum(spend) as total_spend\n        ,sum(case when claim_type <> 'pharmacy' then spend else 0 end) as medical_spend\n        ,sum(case when claim_type = 'pharmacy' then spend else 0 end) as pharmacy_spend\n\n    from claim_spend_and_utilization\n    group by\n        patient_id\n        ,year_month \n)\n\nselect \n    mm.patient_id\n    ,mm.year_month\n    --,plan or payer field\n    ,coalesce(sv.total_spend,0) as total_spend\n    ,coalesce(sv.medical_spend,0) as medical_spend\n    ,coalesce(sv.pharmacy_spend,0) as pharmacy_spend\nfrom member_months mm\nleft join cte_spend_and_visits sv\n    on mm.patient_id = sv.patient_id\n    and mm.year_month = sv.year_month", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.pmpm.final_pmpm_builder"}, "model.pmpm.pmpm__claim_spend_and_utilization": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.pmpm.date_part", "macro.dbt.type_string"], "nodes": ["model.claims_data_model.medical_claim", "model.claims_data_model.pharmacy_claim"]}, "config": {"enabled": true, "alias": "intermediate_claim_spend_and_utilization", "schema": "pmpm", "database": "tuva", "tags": ["pmpm"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": "#abab26"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "pmpm", "fqn": ["pmpm", "intermediate", "pmpm__claim_spend_and_utilization"], "unique_id": "model.pmpm.pmpm__claim_spend_and_utilization", "raw_code": "{{ config(enabled = var('pmpm_enabled',var('tuva_packages_enabled',True)) ) }}\n\n\nwith medical as\n(\n    select\n        patient_id\n       ,cast({{ date_part(\"year\", \"claim_end_date\" ) }} as {{ dbt.type_string() }} ) as year\n       ,lpad(cast({{ date_part(\"month\", \"claim_end_date\" ) }} as {{ dbt.type_string() }} ),2,'0') as month\n       ,cast({{ date_part(\"year\", \"claim_end_date\" ) }} as {{ dbt.type_string() }} )\n            || lpad(cast({{ date_part(\"month\", \"claim_end_date\" ) }} as {{ dbt.type_string() }} ),2,'0') AS year_month\n       ,claim_type\n       ,paid_amount\n    from {{ var('medical_claim') }}\n)\n, pharmacy as\n\n{# jinja to use an empty pharmacy_claim table if the pharmacy_claim_exists var is set to false, or the node in the pharmacy_claim variable otherwise  #}\n{% if var('pharmacy_claim_exists',True) %}\n(\n    select\n        patient_id\n       ,cast({{ date_part(\"year\", \"dispensing_date\" ) }} as {{ dbt.type_string() }} ) as year\n       ,lpad(cast({{ date_part(\"month\", \"dispensing_date\" ) }} as {{ dbt.type_string() }} ),2,'0') as month\n       ,cast({{ date_part(\"year\", \"dispensing_date\" ) }} as {{ dbt.type_string() }} )\n            || lpad(cast({{ date_part(\"month\", \"dispensing_date\" ) }} as {{ dbt.type_string() }} ),2,'0') AS year_month\n       ,cast('pharmacy' as {{ dbt.type_string() }}) as claim_type\n       ,paid_amount\n    from {{ var('pharmacy_claim') }}\n)\n{% else %}\n{% if execute %}\n{{- log(\"pharmacy_claim soruce does not exist, using empty table.\", info=true) -}}\n{% endif %}\n(\n    select\n        cast(null as {{ dbt.type_string() }} ) as patient_id\n       ,cast(null as {{ dbt.type_string() }} ) as year\n       ,cast(null as {{ dbt.type_string() }} ) as month\n       ,cast(null as {{ dbt.type_string() }} ) as year_month\n       ,cast('pharmacy' as {{ dbt.type_string() }}) as claim_type\n       ,cast(null as numeric) as paid_amount\n    limit 0\n)\n\n{%- endif %}\n\n\nselect\n    patient_id\n    ,claim_type\n    ,year_month\n    ,count(*) as count_claims\n    ,sum(paid_amount) as spend\nfrom medical\ngroup by\n    patient_id\n    ,claim_type\n    ,year_month\n\nunion all\n\nselect\n    patient_id\n    ,claim_type\n    ,year_month\n    ,count(*) as count_claims\n    ,sum(paid_amount) as spend\nfrom pharmacy\ngroup by\n    patient_id\n    ,claim_type\n    ,year_month", "language": "sql", "package_name": "pmpm", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\pmpm", "path": "intermediate\\pmpm__claim_spend_and_utilization.sql", "original_file_path": "models\\intermediate\\pmpm__claim_spend_and_utilization.sql", "name": "pmpm__claim_spend_and_utilization", "alias": "intermediate_claim_spend_and_utilization", "checksum": {"name": "sha256", "checksum": "4f0e6bea4ae0f378c3a294914a7af9826fdc48c7c1f3cb354602437d9e22155e"}, "tags": ["pmpm"], "refs": [["medical_claim"], ["pharmacy_claim"]], "sources": [], "metrics": [], "description": "Add model description\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique identifier for each patient in the dataset.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "claim_type": {"name": "claim_type", "description": "Indicates whether the claim is professional (CMS-1500), institutional (UB-04), dental, or vision.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "year_month": {"name": "year_month", "description": "Concatenation of the year and month for the record. Each patient has one record per year_month of their eligibility, or in other words, one record per member month.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "count_claims": {"name": "count_claims", "description": "This metric counts the number of claims over the given dimension for each member month.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "spend": {"name": "spend", "description": "This metric sums the paid_amounts or spend over the given dimension for each member month.", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": false, "node_color": "#abab26"}, "patch_path": "pmpm://models\\_models.yml", "compiled_path": "../target\\compiled\\pmpm\\models\\intermediate\\pmpm__claim_spend_and_utilization.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "pmpm", "alias": "intermediate_claim_spend_and_utilization", "tags": "pmpm", "materialized": "table", "enabled": true, "docs": {"show": false}}, "created_at": 1674073789.8037138, "compiled_code": "\n\n\nwith medical as\n(\n    select\n        patient_id\n       ,cast(date_part('year', claim_end_date) as TEXT ) as year\n       ,lpad(cast(date_part('month', claim_end_date) as TEXT ),2,'0') as month\n       ,cast(date_part('year', claim_end_date) as TEXT )\n            || lpad(cast(date_part('month', claim_end_date) as TEXT ),2,'0') AS year_month\n       ,claim_type\n       ,paid_amount\n    from tuva.the_tuva_project_input.medical_claim\n)\n, pharmacy as\n\n\n\n(\n    select\n        patient_id\n       ,cast(date_part('year', dispensing_date) as TEXT ) as year\n       ,lpad(cast(date_part('month', dispensing_date) as TEXT ),2,'0') as month\n       ,cast(date_part('year', dispensing_date) as TEXT )\n            || lpad(cast(date_part('month', dispensing_date) as TEXT ),2,'0') AS year_month\n       ,cast('pharmacy' as TEXT) as claim_type\n       ,paid_amount\n    from tuva.the_tuva_project_input.pharmacy_claim\n)\n\n\n\nselect\n    patient_id\n    ,claim_type\n    ,year_month\n    ,count(*) as count_claims\n    ,sum(paid_amount) as spend\nfrom medical\ngroup by\n    patient_id\n    ,claim_type\n    ,year_month\n\nunion all\n\nselect\n    patient_id\n    ,claim_type\n    ,year_month\n    ,count(*) as count_claims\n    ,sum(paid_amount) as spend\nfrom pharmacy\ngroup by\n    patient_id\n    ,claim_type\n    ,year_month", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.pmpm.intermediate_claim_spend_and_utilization"}, "model.pmpm.pmpm__member_months": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.type_string", "macro.dbt.last_day"], "nodes": ["model.claims_data_model.eligibility"]}, "config": {"enabled": true, "alias": "intermediate_member_months", "schema": "pmpm", "database": "tuva", "tags": ["pmpm"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": "#abab26"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "pmpm", "fqn": ["pmpm", "intermediate", "pmpm__member_months"], "unique_id": "model.pmpm.pmpm__member_months", "raw_code": "{{ config(enabled = var('pmpm_enabled',var('tuva_packages_enabled',True)) ) }}\n\nwith src as\n         (select\n              patient_id,\n              -- member_id,\n              enrollment_start_date as start_date,\n              enrollment_end_date as end_date,\n              payer,\n              payer_type\n              -- dual_status_code,\n              -- medicare_status_code\n          from  {{ var('eligibility') }}\n         )\n, months as (\n    select 1 as month\n    union all \n    select 2 as month\n    union all \n    select 3 as month\n    union all \n    select 4 as month\n    union all \n    select 5 as month\n    union all \n    select 6 as month\n    union all \n    select 7 as month\n    union all \n    select 8 as month\n    union all \n    select 9 as month\n    union all \n    select 10 as month\n    union all \n    select 11 as month\n    union all \n    select 12 as month)\n,years as (\n    select 2013 as year\n    union all \n    select 2014 as year\n    union all \n    select 2015 as year\n    union all \n    select 2016 as year\n    union all \n    select 2017 as year\n    union all \n    select 2018 as year\n    union all \n    select 2019 as year\n    union all \n    select 2020 as year\n    union all \n    select 2021 as year\n    union all \n    select 2022 as year\n    union all \n    select 2023 as year)\n,dates as (\n    select\n        year\n        ,month\n        ,cast((cast(year as {{ dbt.type_string() }})||'-'||cast(month as {{ dbt.type_string() }})||'-01') as date) as month_start\n        ,{{ dbt.last_day(\"cast((cast(year as \" ~ dbt.type_string() ~ \")||'-'||cast(month as \" ~ dbt.type_string() ~ \" )||'-01') as date)\", \"month\") }} as month_end\n       from years\n    cross join months\n)\nselect distinct\n    patient_id,\n    -- member_id,\n    concat(cast(year as {{ dbt.type_string() }} ),lpad(cast(month as {{ dbt.type_string() }}),2,'0')) as year_month,\n    cast(year as {{ dbt.type_string() }} ) as year,\n    lpad(cast(month as {{ dbt.type_string() }}),2,'0') as month,\n    month_start,\n    month_end,\n    -- start_date,\n    -- end_date,\n    payer,\n    payer_type\n    -- dual_status_code,\n    -- medicare_status_code\nfrom src\ninner join dates\n    on src.start_date <= dates.month_end \n    and  src.end_date >= dates.month_start", "language": "sql", "package_name": "pmpm", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\pmpm", "path": "intermediate\\pmpm__member_months.sql", "original_file_path": "models\\intermediate\\pmpm__member_months.sql", "name": "pmpm__member_months", "alias": "intermediate_member_months", "checksum": {"name": "sha256", "checksum": "af64948ccbf0f31325864dc0e88df0cf5456cd916bf045dc69903ee8ef98757a"}, "tags": ["pmpm"], "refs": [["eligibility"]], "sources": [], "metrics": [], "description": "This model has a record for every year and month combination for every month that a patient is eligibile.\n", "columns": {"patient_id": {"name": "patient_id", "description": "Unique identifier for each patient in the dataset.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "year_month": {"name": "year_month", "description": "Concatenation of the year and month for the record. Each patient has one record per year_month of their eligibility.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "year": {"name": "year", "description": "The year for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "month": {"name": "month", "description": "The month for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "month_start": {"name": "month_start", "description": "The first day of the month of the year_month for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "month_end": {"name": "month_end", "description": "The last day of the month of the year_month for the record.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payer": {"name": "payer", "description": "Name of the payer (i.e. health insurer) providing coverage.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "payer_type": {"name": "payer_type", "description": "Type of payer (e.g. commercial, medicare, medicaid, etc.).", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": false, "node_color": "#abab26"}, "patch_path": "pmpm://models\\_models.yml", "compiled_path": "../target\\compiled\\pmpm\\models\\intermediate\\pmpm__member_months.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "pmpm", "alias": "intermediate_member_months", "tags": "pmpm", "materialized": "table", "enabled": true, "docs": {"show": false}}, "created_at": 1674073789.7811873, "compiled_code": "\n\nwith src as\n         (select\n              patient_id,\n              -- member_id,\n              enrollment_start_date as start_date,\n              enrollment_end_date as end_date,\n              payer,\n              payer_type\n              -- dual_status_code,\n              -- medicare_status_code\n          from  tuva.the_tuva_project_input.eligibility\n         )\n, months as (\n    select 1 as month\n    union all \n    select 2 as month\n    union all \n    select 3 as month\n    union all \n    select 4 as month\n    union all \n    select 5 as month\n    union all \n    select 6 as month\n    union all \n    select 7 as month\n    union all \n    select 8 as month\n    union all \n    select 9 as month\n    union all \n    select 10 as month\n    union all \n    select 11 as month\n    union all \n    select 12 as month)\n,years as (\n    select 2013 as year\n    union all \n    select 2014 as year\n    union all \n    select 2015 as year\n    union all \n    select 2016 as year\n    union all \n    select 2017 as year\n    union all \n    select 2018 as year\n    union all \n    select 2019 as year\n    union all \n    select 2020 as year\n    union all \n    select 2021 as year\n    union all \n    select 2022 as year\n    union all \n    select 2023 as year)\n,dates as (\n    select\n        year\n        ,month\n        ,cast((cast(year as TEXT)||'-'||cast(month as TEXT)||'-01') as date) as month_start\n        ,cast(\n        \n\n    dateadd(\n        day,\n        -1,\n        \n\n    dateadd(\n        month,\n        1,\n        date_trunc('month', cast((cast(year as TEXT)||'-'||cast(month as TEXT )||'-01') as date))\n        )\n\n\n        )\n\n\n        as date) as month_end\n       from years\n    cross join months\n)\nselect distinct\n    patient_id,\n    -- member_id,\n    concat(cast(year as TEXT ),lpad(cast(month as TEXT),2,'0')) as year_month,\n    cast(year as TEXT ) as year,\n    lpad(cast(month as TEXT),2,'0') as month,\n    month_start,\n    month_end,\n    -- start_date,\n    -- end_date,\n    payer,\n    payer_type\n    -- dual_status_code,\n    -- medicare_status_code\nfrom src\ninner join dates\n    on src.start_date <= dates.month_end \n    and  src.end_date >= dates.month_start", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.pmpm.intermediate_member_months"}, "model.readmissions.readmissions__encounter_augmented": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.readmissions.readmissions__stg_encounter", "model.readmissions.readmissions__index_admission", "model.readmissions.readmissions__planned_encounter", "model.readmissions.readmissions__encounter_specialty_cohort", "model.readmissions.readmissions__encounter_data_quality"]}, "config": {"enabled": true, "alias": "encounter_augmented", "schema": "readmissions", "database": "tuva", "tags": ["readmissions"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#161a7d"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "readmissions", "fqn": ["readmissions", "readmissions__encounter_augmented"], "unique_id": "model.readmissions.readmissions__encounter_augmented", "raw_code": "-- Here we list all encounters from the stg_encounter model\n-- and we augment them with extra fields\n-- that are relevant for readmission measures\n\n\n{{ config(materialized='table'\n    ,enabled=var('readmissions_enabled',var('tuva_packages_enabled',True))) }}\n\n\n\nwith encounter_augmented as (\nselect\n    aa.encounter_id,\n    aa.patient_id,\n    aa.admit_date,\n    aa.discharge_date,\n    aa.discharge_disposition_code,\n    aa.facility_npi,\n    aa.ms_drg_code,\n    aa.discharge_date - aa.admit_date  as length_of_stay,\n    case\n        when bb.encounter_id is not null then 1\n\telse 0\n    end as index_admission_flag,\n    case\n        when cc.encounter_id is not null then 1\n\telse 0\n    end as planned_flag,\n    dd.specialty_cohort,\n    case\n        when aa.discharge_disposition_code = '20' then 1\n\telse 0\n    end as died_flag,\n    ee.diagnosis_ccs,\n    ee.disqualified_encounter_flag,\n    ee.missing_admit_date_flag,\n    ee.missing_discharge_date_flag,\n    ee.admit_after_discharge_flag,\n    ee.missing_discharge_disposition_code_flag,\n    ee.invalid_discharge_disposition_code_flag,\n    ee.missing_primary_diagnosis_flag,\n    ee.multiple_primary_diagnoses_flag,\n    ee.invalid_primary_diagnosis_code_flag,\n    ee.no_diagnosis_ccs_flag,\n    ee.overlaps_with_another_encounter_flag,\n    ee.missing_ms_drg_flag,\n    ee.invalid_ms_drg_flag\n    \nfrom\n    {{ ref('readmissions__stg_encounter') }} aa\n    left join {{ ref('readmissions__index_admission') }} bb\n    on aa.encounter_id = bb.encounter_id\n    left join {{ ref('readmissions__planned_encounter') }} cc\n    on aa.encounter_id = cc.encounter_id \n    left join {{ ref('readmissions__encounter_specialty_cohort') }} dd\n    on aa.encounter_id = dd.encounter_id\n    left join {{ ref('readmissions__encounter_data_quality') }} ee\n    on aa.encounter_id = ee.encounter_id\n)\n\n\n\nselect *\nfrom encounter_augmented", "language": "sql", "package_name": "readmissions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\readmissions", "path": "readmissions__encounter_augmented.sql", "original_file_path": "models\\readmissions__encounter_augmented.sql", "name": "readmissions__encounter_augmented", "alias": "encounter_augmented", "checksum": {"name": "sha256", "checksum": "026da7f4c9b416f1309a7b9d701a14d2f7522f21a3a447a374819f7c2bc22d37"}, "tags": ["readmissions"], "refs": [["readmissions__stg_encounter"], ["readmissions__index_admission"], ["readmissions__planned_encounter"], ["readmissions__encounter_specialty_cohort"], ["readmissions__encounter_data_quality"]], "sources": [], "metrics": [], "description": "This model includes all encounters from the stg_encounter model, and for each encounter_id we add fields relevant for the encounter.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "patient_id": {"name": "patient_id", "description": "The unique identifier for the patient", "meta": {}, "data_type": null, "quote": null, "tags": []}, "admit_date": {"name": "admit_date", "description": "The date of admission for the inpatient visit", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discharge_date": {"name": "discharge_date", "description": "The date of discharge for the inpatient visit", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discharge_status_code": {"name": "discharge_status_code", "description": "The valid 2-digit discharge status for the inpatient visit", "meta": {}, "data_type": null, "quote": null, "tags": []}, "facility": {"name": "facility", "description": "A name or ID for the facility where the inpatient visit occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ms_drg": {"name": "ms_drg", "description": "The MS-DRG associted with the inpatient visit", "meta": {}, "data_type": null, "quote": null, "tags": []}, "length_of_stay": {"name": "length_of_stay", "description": "Integer representing the length of stay of the inpatient visit in days", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index_admission_flag": {"name": "index_admission_flag", "description": "Flag to indicate if the encounter is an index admission", "meta": {}, "data_type": null, "quote": null, "tags": []}, "planned_flag": {"name": "planned_flag", "description": "Flag to indicate if the encounter was planned", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specialty_cohort": {"name": "specialty_cohort", "description": "Specialty cohort the encounter belongs to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "died_flag": {"name": "died_flag", "description": "Flag to indicate of the patient died in this encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_ccs": {"name": "diagnosis_ccs", "description": "CCS code associated with the primary diagnosis for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "disqualified_encounter_flag": {"name": "disqualified_encounter_flag", "description": "A flag that indicates whether this encounter is disqualified from being used in readmission measures for any critical data quality problem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_admit_date_flag": {"name": "missing_admit_date_flag", "description": "A flag that indicates whether the admit date is missing from this encounter.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_discharge_date_flag": {"name": "missing_discharge_date_flag", "description": "A flag that indicates whether the discharge date is missing from this encounter.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "admit_after_discharge_flag": {"name": "admit_after_discharge_flag", "description": "A flag that indicates whether the admit date for the encounter is after the discharge date for the encounter.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_discharge_status_code_flag": {"name": "missing_discharge_status_code_flag", "description": "A flag that indicates whether the discharge status code is missing for the encounter.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_discharge_status_code_flag": {"name": "invalid_discharge_status_code_flag", "description": "A flag that indicates whether the discharge status code that is present for this encounter is invalid. This flag is 1 only when the discharge status code is present but invalid.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_primary_diagnosis_flag": {"name": "missing_primary_diagnosis_flag", "description": "A flag that indicates whether there is no primary diagnosis associated with the encounter.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "multiple_primary_diagnosis": {"name": "multiple_primary_diagnosis", "description": "A flag that indicates whether there are multiple primary diagnoses associated with the encounter.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_primary_diagnosis_code": {"name": "invalid_primary_diagnosis_code", "description": "A flag that indicates whether the primary diagnosis present for this encounter is invalid, i.e. a non existing ICD-10-CM code. This flag indicates that a primary diagnosis code is indeed present for the encounter, but it is not a valid ICD-10-CM code.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "no_diagnosis_ccs_flag": {"name": "no_diagnosis_ccs_flag", "description": "A flag that indicates whether there is no CCS diagnosis category associated with the primary ICD-10-CM diagnosis code for the encounter. This flag indicates that there is a valid primary ICD-10-CM diagnosis code associated with the encounter, but there is no CCS diagnosis category associated with that ICD-10-CM code.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "overlaps_with_another_encounter_flag": {"name": "overlaps_with_another_encounter_flag", "description": "A flag that indicates whether this encounter's dates overlap with those of another encounter in the dataset", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": "#161a7d"}, "patch_path": "readmissions://models\\_models.yml", "compiled_path": "../target\\compiled\\readmissions\\models\\readmissions__encounter_augmented.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "readmissions", "alias": "encounter_augmented", "tags": "readmissions", "materialized": "table", "enabled": true, "docs": {"node_color": "#161a7d"}}, "created_at": 1674073789.9581947, "compiled_code": "-- Here we list all encounters from the stg_encounter model\n-- and we augment them with extra fields\n-- that are relevant for readmission measures\n\n\n\n\n\n\nwith encounter_augmented as (\nselect\n    aa.encounter_id,\n    aa.patient_id,\n    aa.admit_date,\n    aa.discharge_date,\n    aa.discharge_disposition_code,\n    aa.facility_npi,\n    aa.ms_drg_code,\n    aa.discharge_date - aa.admit_date  as length_of_stay,\n    case\n        when bb.encounter_id is not null then 1\n\telse 0\n    end as index_admission_flag,\n    case\n        when cc.encounter_id is not null then 1\n\telse 0\n    end as planned_flag,\n    dd.specialty_cohort,\n    case\n        when aa.discharge_disposition_code = '20' then 1\n\telse 0\n    end as died_flag,\n    ee.diagnosis_ccs,\n    ee.disqualified_encounter_flag,\n    ee.missing_admit_date_flag,\n    ee.missing_discharge_date_flag,\n    ee.admit_after_discharge_flag,\n    ee.missing_discharge_disposition_code_flag,\n    ee.invalid_discharge_disposition_code_flag,\n    ee.missing_primary_diagnosis_flag,\n    ee.multiple_primary_diagnoses_flag,\n    ee.invalid_primary_diagnosis_code_flag,\n    ee.no_diagnosis_ccs_flag,\n    ee.overlaps_with_another_encounter_flag,\n    ee.missing_ms_drg_flag,\n    ee.invalid_ms_drg_flag\n    \nfrom\n    tuva.readmissions.stg_encounter aa\n    left join tuva.readmissions.index_admission bb\n    on aa.encounter_id = bb.encounter_id\n    left join tuva.readmissions.planned_encounter cc\n    on aa.encounter_id = cc.encounter_id \n    left join tuva.readmissions.encounter_specialty_cohort dd\n    on aa.encounter_id = dd.encounter_id\n    left join tuva.readmissions.encounter_data_quality ee\n    on aa.encounter_id = ee.encounter_id\n)\n\n\n\nselect *\nfrom encounter_augmented", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.readmissions.encounter_augmented"}, "model.readmissions.readmissions__readmission_summary": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.datediff"], "nodes": ["model.readmissions.readmissions__encounter_augmented"]}, "config": {"enabled": true, "alias": "readmission_summary", "schema": "readmissions", "database": "tuva", "tags": ["readmissions"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#161a7d"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "readmissions", "fqn": ["readmissions", "readmissions__readmission_summary"], "unique_id": "model.readmissions.readmissions__readmission_summary", "raw_code": "-- Here calculate days to readmission for encounters\n-- that had a readmission and create readmission flags\n\n\n{{ config(materialized='table'\n    ,enabled=var('readmissions_enabled',var('tuva_packages_enabled',True))) }}\n\n\n\n-- We create the encounter_sequence integer count\n-- which keeps track of what number of encounter each\n-- encounter is for a given patient\nwith encounter_sequence as (\nselect\n    *,\n    row_number() over(\n        partition by patient_id order by admit_date, discharge_date\n    ) as encounter_seq\nfrom {{ ref('readmissions__encounter_augmented') }}\nwhere disqualified_encounter_flag = 0\n),\n\n\nreadmission_calc as (\nselect\n    aa.encounter_id,\n    aa.patient_id,\n    aa.admit_date,\n    aa.discharge_date,\n    aa.discharge_disposition_code,\n    aa.facility_npi,\n    aa.ms_drg_code,\n    aa.length_of_stay,\n    aa.index_admission_flag,\n    aa.planned_flag,\n    aa.specialty_cohort,\n    aa.died_flag,\n    aa.diagnosis_ccs,\n    case\n        when bb.encounter_id is not null then 1\n\telse 0\n    end as had_readmission_flag,\n    bb.admit_date - aa.discharge_date as days_to_readmit,\n    case\n        when ({{ dbt.datediff(\"bb.admit_date\", \"aa.discharge_date\", \"day\") }}) <= 30  then 1\n\telse 0\n    end as readmit_30_flag,\n    case\n        when\n\t    (({{ dbt.datediff(\"bb.admit_date\", \"aa.discharge_date\", \"day\") }}) <= 30)\n\t    and\n\t    (bb.planned_flag = 0) then 1\n\telse 0\n    end as unplanned_readmit_30_flag,\n    bb.encounter_id as readmission_encounter_id,\n    bb.admit_date as readmission_admit_date,\n    bb.discharge_date as readmission_discharge_date,\n    bb.discharge_disposition_code as readmission_discharge_disposition_code,\n    bb.facility_npi as readmission_facility,\n    bb.ms_drg_code as readmission_ms_drg,\n    bb.length_of_stay as readmission_length_of_stay,\n    bb.index_admission_flag as readmission_index_admission_flag,\n    bb.planned_flag as readmission_planned_flag,\n    bb.specialty_cohort as readmission_specialty_cohort,\n    bb.died_flag as readmission_died_flag,\n    bb.diagnosis_ccs as readmission_diagnosis_ccs\n\n\nfrom\n    encounter_sequence aa\n    left join encounter_sequence bb\n    on aa.patient_id = bb.patient_id\n    and aa.encounter_seq + 1 = bb.encounter_seq\n)\n\n\n\nselect *\nfrom readmission_calc", "language": "sql", "package_name": "readmissions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\readmissions", "path": "readmissions__readmission_summary.sql", "original_file_path": "models\\readmissions__readmission_summary.sql", "name": "readmissions__readmission_summary", "alias": "readmission_summary", "checksum": {"name": "sha256", "checksum": "89fdf08040b734b14902318c2faf7fa8e3163e5efd9d164870077371afda2209"}, "tags": ["readmissions"], "refs": [["readmissions__encounter_augmented"]], "sources": [], "metrics": [], "description": "This model includes all rows from the encounter_augmented model where disqualified_encounter_flag = 0 (all rows for encounters that are not disqualified for data quality issues). For each of these encounters we add fields to indicate whether it had a readmission and, when a readmission was present, to show relevant fields for the readmission.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "patient_id": {"name": "patient_id", "description": "The unique identifier for the patient", "meta": {}, "data_type": null, "quote": null, "tags": []}, "admit_date": {"name": "admit_date", "description": "The date of admission for the inpatient visit", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discharge_date": {"name": "discharge_date", "description": "The date of discharge for the inpatient visit", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discharge_status_code": {"name": "discharge_status_code", "description": "The valid 2-digit discharge status for the inpatient visit", "meta": {}, "data_type": null, "quote": null, "tags": []}, "facility": {"name": "facility", "description": "A name or ID for the facility where the inpatient visit occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ms_drg": {"name": "ms_drg", "description": "The MS-DRG associted with the inpatient visit", "meta": {}, "data_type": null, "quote": null, "tags": []}, "length_of_stay": {"name": "length_of_stay", "description": "Integer representing the length of stay of the inpatient visit in days", "meta": {}, "data_type": null, "quote": null, "tags": []}, "index_admission_flag": {"name": "index_admission_flag", "description": "Flag to indicate if the encounter is an index admission", "meta": {}, "data_type": null, "quote": null, "tags": []}, "planned_flag": {"name": "planned_flag", "description": "Flag to indicate if the encounter was planned", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specialty_cohort": {"name": "specialty_cohort", "description": "Specialty cohort the encounter belongs to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "died_flag": {"name": "died_flag", "description": "Flag to indicate of the patient died in this encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_ccs": {"name": "diagnosis_ccs", "description": "CCS code associated with the primary diagnosis for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "had_readmission_flag": {"name": "had_readmission_flag", "description": "A flag to indicate whether the encounter had a readmission any number of days after discharge", "meta": {}, "data_type": null, "quote": null, "tags": []}, "days_to_readmit": {"name": "days_to_readmit", "description": "An integer to indicate the number of days to readmission", "meta": {}, "data_type": null, "quote": null, "tags": []}, "readmit_30_flag": {"name": "readmit_30_flag", "description": "A flag to indicate whether the encounter had a 30-day readmission", "meta": {}, "data_type": null, "quote": null, "tags": []}, "unplanned_readmit_30_flag": {"name": "unplanned_readmit_30_flag", "description": "A flag to indicate whether the encounter had an unplanned 30-day readmission", "meta": {}, "data_type": null, "quote": null, "tags": []}, "readmission_encounter_id": {"name": "readmission_encounter_id", "description": "The unique identifier for the readmission encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "readmission_patient_id": {"name": "readmission_patient_id", "description": "The unique identifier for the patient", "meta": {}, "data_type": null, "quote": null, "tags": []}, "readmission_admit_date": {"name": "readmission_admit_date", "description": "The date of admission for the readmission inpatient visit", "meta": {}, "data_type": null, "quote": null, "tags": []}, "readmission_discharge_date": {"name": "readmission_discharge_date", "description": "The date of discharge for the readmission inpatient visit", "meta": {}, "data_type": null, "quote": null, "tags": []}, "readmission_discharge_status_code": {"name": "readmission_discharge_status_code", "description": "The valid 2-digit discharge status for the readmission inpatient visit", "meta": {}, "data_type": null, "quote": null, "tags": []}, "readmission_facility": {"name": "readmission_facility", "description": "A name or ID for the facility where the readmission inpatient visit occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "readmission_ms_drg": {"name": "readmission_ms_drg", "description": "The MS-DRG associted with the readmission inpatient visit", "meta": {}, "data_type": null, "quote": null, "tags": []}, "readmission_length_of_stay": {"name": "readmission_length_of_stay", "description": "Integer representing the length of stay of the readmission inpatient visit in days", "meta": {}, "data_type": null, "quote": null, "tags": []}, "readmission_index_admission_flag": {"name": "readmission_index_admission_flag", "description": "Flag to indicate if the readmission encounter is an index admission", "meta": {}, "data_type": null, "quote": null, "tags": []}, "readmission_planned_flag": {"name": "readmission_planned_flag", "description": "Flag to indicate if the readmission encounter was planned", "meta": {}, "data_type": null, "quote": null, "tags": []}, "readmission_specialty_cohort": {"name": "readmission_specialty_cohort", "description": "Specialty cohort the readmission encounter belongs to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "readmission_died_flag": {"name": "readmission_died_flag", "description": "Flag to indicate of the patient died in the readmission encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "readmission_diagnosis_ccs": {"name": "readmission_diagnosis_ccs", "description": "CCS code associated with the primary diagnosis for the readmission encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": "#161a7d"}, "patch_path": "readmissions://models\\_models.yml", "compiled_path": "../target\\compiled\\readmissions\\models\\readmissions__readmission_summary.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "readmissions", "alias": "readmission_summary", "tags": "readmissions", "materialized": "table", "enabled": true, "docs": {"node_color": "#161a7d"}}, "created_at": 1674073790.1938806, "compiled_code": "-- Here calculate days to readmission for encounters\n-- that had a readmission and create readmission flags\n\n\n\n\n\n\n-- We create the encounter_sequence integer count\n-- which keeps track of what number of encounter each\n-- encounter is for a given patient\nwith encounter_sequence as (\nselect\n    *,\n    row_number() over(\n        partition by patient_id order by admit_date, discharge_date\n    ) as encounter_seq\nfrom tuva.readmissions.encounter_augmented\nwhere disqualified_encounter_flag = 0\n),\n\n\nreadmission_calc as (\nselect\n    aa.encounter_id,\n    aa.patient_id,\n    aa.admit_date,\n    aa.discharge_date,\n    aa.discharge_disposition_code,\n    aa.facility_npi,\n    aa.ms_drg_code,\n    aa.length_of_stay,\n    aa.index_admission_flag,\n    aa.planned_flag,\n    aa.specialty_cohort,\n    aa.died_flag,\n    aa.diagnosis_ccs,\n    case\n        when bb.encounter_id is not null then 1\n\telse 0\n    end as had_readmission_flag,\n    bb.admit_date - aa.discharge_date as days_to_readmit,\n    case\n        when (datediff(\n        day,\n        bb.admit_date,\n        aa.discharge_date\n        )) <= 30  then 1\n\telse 0\n    end as readmit_30_flag,\n    case\n        when\n\t    ((datediff(\n        day,\n        bb.admit_date,\n        aa.discharge_date\n        )) <= 30)\n\t    and\n\t    (bb.planned_flag = 0) then 1\n\telse 0\n    end as unplanned_readmit_30_flag,\n    bb.encounter_id as readmission_encounter_id,\n    bb.admit_date as readmission_admit_date,\n    bb.discharge_date as readmission_discharge_date,\n    bb.discharge_disposition_code as readmission_discharge_disposition_code,\n    bb.facility_npi as readmission_facility,\n    bb.ms_drg_code as readmission_ms_drg,\n    bb.length_of_stay as readmission_length_of_stay,\n    bb.index_admission_flag as readmission_index_admission_flag,\n    bb.planned_flag as readmission_planned_flag,\n    bb.specialty_cohort as readmission_specialty_cohort,\n    bb.died_flag as readmission_died_flag,\n    bb.diagnosis_ccs as readmission_diagnosis_ccs\n\n\nfrom\n    encounter_sequence aa\n    left join encounter_sequence bb\n    on aa.patient_id = bb.patient_id\n    and aa.encounter_seq + 1 = bb.encounter_seq\n)\n\n\n\nselect *\nfrom readmission_calc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.readmissions.readmission_summary"}, "model.readmissions.readmissions__diagnosis_ccs": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.readmissions.readmissions__stg_diagnosis", "seed.terminology.terminology__icd_10_cm", "seed.terminology.terminology__icd_10_cm_to_ccs", "model.readmissions.readmissions__primary_diagnosis_count"]}, "config": {"enabled": true, "alias": "diagnosis_ccs", "schema": "readmissions", "database": "tuva", "tags": ["readmissions"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": "#161a7d"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "readmissions", "fqn": ["readmissions", "intermediate", "readmissions__diagnosis_ccs"], "unique_id": "model.readmissions.readmissions__diagnosis_ccs", "raw_code": "-- Here we take all rows from the stg_diagnosis\n-- table that correspond to encounters with\n-- one and only one primary diagnosis code.\n-- To each of these rows we also append:\n--\n--      - a 'valid_icd_10_cm_flag' to verify if it is a\n--        valid ICD-10-CM code\n--\n--      - a 'ccs_diagnosis_category' column to indicate\n--        the associated diagnosis category\n--\n-- encounter_ids that have no primary diagnosis or\n-- multiple primary diagnoses are not part of this model\n-- because it is impossible to assign a ccs_diagnosis_category\n-- to them. In theory, each encounter should have a unique\n-- ccs_diagnosis_category that is determined by their unique\n-- primary diagnosis ICD-10-CM code.\n\n\n{{ config(materialized='view'\n    ,enabled=var('readmissions_enabled',var('tuva_packages_enabled',True)))}}\n\n\nselect\n    aa.encounter_id,\n    aa.diagnosis_code,\n    aa.diagnosis_rank,\n    case\n        when bb.icd_10_cm is null then 0\n\telse 1\n    end as valid_icd_10_cm_flag,\n    cc.ccs_diagnosis_category\nfrom\n    {{ ref('readmissions__stg_diagnosis') }} aa\n    left join {{ ref('terminology__icd_10_cm') }} bb\n    on aa.diagnosis_code = bb.icd_10_cm\n    left join {{ ref('terminology__icd_10_cm_to_ccs') }} cc\n    on aa.diagnosis_code = cc.icd_10_cm\n    left join {{ ref('readmissions__primary_diagnosis_count') }} dd\n    on aa.encounter_id = dd.encounter_id\n\nwhere\n    aa.diagnosis_rank = 1\n    and\n    dd.primary_dx_count = 1", "language": "sql", "package_name": "readmissions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\readmissions", "path": "intermediate\\readmissions__diagnosis_ccs.sql", "original_file_path": "models\\intermediate\\readmissions__diagnosis_ccs.sql", "name": "readmissions__diagnosis_ccs", "alias": "diagnosis_ccs", "checksum": {"name": "sha256", "checksum": "f63b5c6709d185b62b22933e84e568f4ebb1696be9e9b3a4346be966309c2f69"}, "tags": ["readmissions"], "refs": [["readmissions__stg_diagnosis"], ["terminology__icd_10_cm"], ["terminology__icd_10_cm_to_ccs"], ["readmissions__primary_diagnosis_count"]], "sources": [], "metrics": [], "description": "This model includes all encounter_ids from the stg_diagnosis table that have one and only one primary diagnosis code associated with them. There is one row for each of these encounters, namely, the row corresponding to the unique primary diagnosis code of the encounter. Therefore, the number of rows in this model is equal to the number of encounter_ids in the stg_diagnosis model that have one and only one primary diagnosis code. We add a valid_icd_10_cm_flag to indicate if the primary diagnosis code for the encounter is a valid ICD-10-CM code. We also add the CCS diagnosis category associated with the primary diagnosis code of the encounter.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code": {"name": "diagnosis_code", "description": "An ICD-10-CM diagnosis code associated with this encounter_id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_rank": {"name": "diagnosis_rank", "description": "A positive integer giving the diagnosis ranking for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_icd_10_cm_flag": {"name": "valid_icd_10_cm_flag", "description": "A flag indicating if the ICD-10-CM diagnosis code given is valid", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ccs_diagnosis_category": {"name": "ccs_diagnosis_category", "description": "The CCS code associated with the given ICD-10-CM diagnosis", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": false, "node_color": "#161a7d"}, "patch_path": "readmissions://models\\_models.yml", "compiled_path": "../target\\compiled\\readmissions\\models\\intermediate\\readmissions__diagnosis_ccs.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "readmissions", "alias": "diagnosis_ccs", "tags": "readmissions", "materialized": "view", "enabled": true, "docs": {"show": false}}, "created_at": 1674073789.926154, "compiled_code": "-- Here we take all rows from the stg_diagnosis\n-- table that correspond to encounters with\n-- one and only one primary diagnosis code.\n-- To each of these rows we also append:\n--\n--      - a 'valid_icd_10_cm_flag' to verify if it is a\n--        valid ICD-10-CM code\n--\n--      - a 'ccs_diagnosis_category' column to indicate\n--        the associated diagnosis category\n--\n-- encounter_ids that have no primary diagnosis or\n-- multiple primary diagnoses are not part of this model\n-- because it is impossible to assign a ccs_diagnosis_category\n-- to them. In theory, each encounter should have a unique\n-- ccs_diagnosis_category that is determined by their unique\n-- primary diagnosis ICD-10-CM code.\n\n\n\n\n\nselect\n    aa.encounter_id,\n    aa.diagnosis_code,\n    aa.diagnosis_rank,\n    case\n        when bb.icd_10_cm is null then 0\n\telse 1\n    end as valid_icd_10_cm_flag,\n    cc.ccs_diagnosis_category\nfrom\n    tuva.readmissions.stg_diagnosis aa\n    left join tuva.terminology.icd_10_cm bb\n    on aa.diagnosis_code = bb.icd_10_cm\n    left join tuva.terminology.icd_10_cm_to_ccs cc\n    on aa.diagnosis_code = cc.icd_10_cm\n    left join tuva.readmissions.primary_diagnosis_count dd\n    on aa.encounter_id = dd.encounter_id\n\nwhere\n    aa.diagnosis_rank = 1\n    and\n    dd.primary_dx_count = 1", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.readmissions.diagnosis_ccs"}, "model.readmissions.readmissions__encounter_data_quality": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.readmissions.readmissions__encounter_overlap", "model.readmissions.readmissions__encounter_overlap", "model.readmissions.readmissions__stg_encounter", "model.readmissions.readmissions__diagnosis_ccs", "seed.terminology.terminology__discharge_disposition", "model.readmissions.readmissions__primary_diagnosis_count", "seed.terminology.terminology__ms_drg"]}, "config": {"enabled": true, "alias": "encounter_data_quality", "schema": "readmissions", "database": "tuva", "tags": ["readmissions"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": "#161a7d"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "readmissions", "fqn": ["readmissions", "intermediate", "readmissions__encounter_data_quality"], "unique_id": "model.readmissions.readmissions__encounter_data_quality", "raw_code": "-- Here we list all encounters from the stg_encounter table\n-- with data quality flags that may disqualify them from\n-- being used for readmission measures \n\n\n{{ config(materialized='view'\n    ,enabled=var('readmissions_enabled',var('tuva_packages_enabled',True))) }}\n\n\n\n-- Flag several potential data quality issues\n-- with all encounters.\n-- Every encounter_id from the stg_encounter model\n-- will be here. This CTE should have the same\n-- number of rows as the stg_encounter model, i.e.,\n-- there is a one to one correspondence between the\n-- rows in stg_encounter and this CTE.\nwith encounter_data_quality_issues as (\nselect\n    aa.encounter_id,\n    case\n        when aa.admit_date is null then 1\n\telse 0\n    end as missing_admit_date_flag,\n    case\n        when aa.discharge_date is null then 1\n\telse 0\n    end as missing_discharge_date_flag,\n    case\n        when aa.admit_date > aa.discharge_date then 1\n\telse 0\n    end as admit_after_discharge_flag,\n    case\n        when aa.discharge_disposition_code is null then 1\n\telse 0\n    end as missing_discharge_disposition_code_flag,\n    case\n        when\n\t    (aa.discharge_disposition_code is not null)\n\t    and\n\t    (cc.discharge_disposition_code is null) then 1\n\telse 0\n    end as invalid_discharge_disposition_code_flag,\n    case\n        when (  (dd.primary_dx_count is null)\n\t        or\n\t        (dd.primary_dx_count = 0)\n\t\tor\n\t\t(dd.primary_dx_count = 1 and bb.diagnosis_code is null)  )\n\t     then 1\n\telse 0\n    end as missing_primary_diagnosis_flag,\n    case\n        when dd.primary_dx_count > 1 then 1\n\telse 0\n    end as multiple_primary_diagnoses_flag,\n    case\n        when bb.valid_icd_10_cm_flag = 0 then 1\n\telse 0\n    end as invalid_primary_diagnosis_code_flag,\n    case\n        when (  bb.valid_icd_10_cm_flag = 1\n\t        and\n\t        bb.ccs_diagnosis_category is null  )\n             then 1\n\telse 0\n    end as no_diagnosis_ccs_flag,\n    bb.ccs_diagnosis_category as diagnosis_ccs,\n    case\n        when aa.encounter_id in (select distinct encounter_id_A\n\t                         from {{ ref('readmissions__encounter_overlap') }} )\n\t     or\n\t     aa.encounter_id in (select distinct encounter_id_B\n\t                         from {{ ref('readmissions__encounter_overlap') }} )\n\tthen 1\n\telse 0\n    end as overlaps_with_another_encounter_flag,\n    case\n        when aa.ms_drg_code is null then 1\n\telse 0\n    end as missing_ms_drg_flag,\n    case\n        when ee.ms_drg_code is null then 1\n\telse 0\n    end as invalid_ms_drg_flag\n\nfrom {{ ref('readmissions__stg_encounter') }} aa\n     left join {{ ref('readmissions__diagnosis_ccs') }} bb\n     on aa.encounter_id = bb.encounter_id\n     left join {{ ref('terminology__discharge_disposition') }} cc\n     on aa.discharge_disposition_code = cc.discharge_disposition_code\n     left join {{ ref('readmissions__primary_diagnosis_count') }} dd\n     on aa.encounter_id = dd.encounter_id\n     left join {{ ref('terminology__ms_drg') }} ee\n     on aa.ms_drg_code = ee.ms_drg_code\n),\n\n\n-- Here we add a disqualified_encounter_flag.\n-- This disqualified_encounter_flag = 1\n-- when any of the critical data quality flags\n-- from the above CTE are equal to 1.\nall_data_quality_flags as (\nselect\n    encounter_id,\n    diagnosis_ccs,\n    case\n        when\n\t    (missing_admit_date_flag = 1)\n\t    or\n\t    (missing_discharge_date_flag = 1)\n\t    or\n\t    (admit_after_discharge_flag = 1)\n\t    or\n\t    (missing_discharge_disposition_code_flag = 1)\n\t    or\n\t    (invalid_discharge_disposition_code_flag = 1)\n\t    or\n\t    (missing_primary_diagnosis_flag = 1)\n\t    or\n\t    (multiple_primary_diagnoses_flag =1)\n\t    or\n\t    (invalid_primary_diagnosis_code_flag = 1)\n\t    or\n\t    (no_diagnosis_ccs_flag = 1)\n\t    or\n\t    (overlaps_with_another_encounter_flag = 1)\n\t    or\n\t    (missing_ms_drg_flag = 1)\n\t    or\n\t    (invalid_ms_drg_flag = 1)\n\t    then 1\n\telse 0\n    end as disqualified_encounter_flag,\n    missing_admit_date_flag,\n    missing_discharge_date_flag,\n    admit_after_discharge_flag,\n    missing_discharge_disposition_code_flag,\n    invalid_discharge_disposition_code_flag,\n    missing_primary_diagnosis_flag,\n    multiple_primary_diagnoses_flag,\n    invalid_primary_diagnosis_code_flag,\n    no_diagnosis_ccs_flag,\n    overlaps_with_another_encounter_flag,\n    missing_ms_drg_flag,\n    invalid_ms_drg_flag\nfrom encounter_data_quality_issues\n)    \n\n\n\nselect *\nfrom all_data_quality_flags", "language": "sql", "package_name": "readmissions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\readmissions", "path": "intermediate\\readmissions__encounter_data_quality.sql", "original_file_path": "models\\intermediate\\readmissions__encounter_data_quality.sql", "name": "readmissions__encounter_data_quality", "alias": "encounter_data_quality", "checksum": {"name": "sha256", "checksum": "d9b5ea78ebc05b82c23eeefcbb38e85303249b00f25cf47c3d4f611830011883"}, "tags": ["readmissions"], "refs": [["readmissions__encounter_overlap"], ["readmissions__encounter_overlap"], ["readmissions__stg_encounter"], ["readmissions__diagnosis_ccs"], ["terminology__discharge_disposition"], ["readmissions__primary_diagnosis_count"], ["terminology__ms_drg"]], "sources": [], "metrics": [], "description": "This model has the same number of rows as the stg_encounter model. Here we have one row for every unique encounter in the stg_encounter model, and for each encounter we have a flag (disqualified_encounter_flag) to indicte if the encounter is disqualified from being useful for readmission measures. We also have other flags to indicate which specific data quality issues this encounter has that may disqualify it from being used in readmission measures.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_ccs": {"name": "diagnosis_ccs", "description": "The CCS diagnosis category associated with the primary diagnosis of this encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "disqualified_encounter_flag": {"name": "disqualified_encounter_flag", "description": "A flag that indicates whether this encounter is disqualified from being used in readmission measures for any critical data quality problem.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_admit_date_flag": {"name": "missing_admit_date_flag", "description": "A flag that indicates whether the admit date is missing from this encounter.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_discharge_date_flag": {"name": "missing_discharge_date_flag", "description": "A flag that indicates whether the discharge date is missing from this encounter.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "admit_after_discharge_flag": {"name": "admit_after_discharge_flag", "description": "A flag that indicates whether the admit date for the encounter is after the discharge date for the encounter.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_discharge_status_code_flag": {"name": "missing_discharge_status_code_flag", "description": "A flag that indicates whether the discharge status code is missing for the encounter.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_discharge_status_code_flag": {"name": "invalid_discharge_status_code_flag", "description": "A flag that indicates whether the discharge status code that is present for this encounter is invalid. This flag is 1 only when the discharge status code is present but invalid.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "missing_primary_diagnosis_flag": {"name": "missing_primary_diagnosis_flag", "description": "A flag that indicates whether there is no primary diagnosis associated with the encounter.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "multiple_primary_diagnosis": {"name": "multiple_primary_diagnosis", "description": "A flag that indicates whether there are multiple primary diagnoses associated with the encounter.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "invalid_primary_diagnosis_code": {"name": "invalid_primary_diagnosis_code", "description": "A flag that indicates whether the primary diagnosis present for this encounter is invalid, i.e. a non existing ICD-10-CM code. This flag indicates that a primary diagnosis code is indeed present for the encounter, but it is not a valid ICD-10-CM code.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "no_diagnosis_ccs_flag": {"name": "no_diagnosis_ccs_flag", "description": "A flag that indicates whether there is no CCS diagnosis category associated with the primary ICD-10-CM diagnosis code for the encounter. This flag indicates that there is a valid primary ICD-10-CM diagnosis code associated with the encounter, but there is no CCS diagnosis category associated with that ICD-10-CM code.", "meta": {}, "data_type": null, "quote": null, "tags": []}, "overlaps_with_another_encounter_flag": {"name": "overlaps_with_another_encounter_flag", "description": "A flag that indicates whether this encounter's dates overlap with those of another encounter in the dataset", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": false, "node_color": "#161a7d"}, "patch_path": "readmissions://models\\_models.yml", "compiled_path": "../target\\compiled\\readmissions\\models\\intermediate\\readmissions__encounter_data_quality.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "readmissions", "alias": "encounter_data_quality", "tags": "readmissions", "materialized": "view", "enabled": true, "docs": {"show": false}}, "created_at": 1674073790.0038233, "compiled_code": "-- Here we list all encounters from the stg_encounter table\n-- with data quality flags that may disqualify them from\n-- being used for readmission measures \n\n\n\n\n\n\n-- Flag several potential data quality issues\n-- with all encounters.\n-- Every encounter_id from the stg_encounter model\n-- will be here. This CTE should have the same\n-- number of rows as the stg_encounter model, i.e.,\n-- there is a one to one correspondence between the\n-- rows in stg_encounter and this CTE.\nwith encounter_data_quality_issues as (\nselect\n    aa.encounter_id,\n    case\n        when aa.admit_date is null then 1\n\telse 0\n    end as missing_admit_date_flag,\n    case\n        when aa.discharge_date is null then 1\n\telse 0\n    end as missing_discharge_date_flag,\n    case\n        when aa.admit_date > aa.discharge_date then 1\n\telse 0\n    end as admit_after_discharge_flag,\n    case\n        when aa.discharge_disposition_code is null then 1\n\telse 0\n    end as missing_discharge_disposition_code_flag,\n    case\n        when\n\t    (aa.discharge_disposition_code is not null)\n\t    and\n\t    (cc.discharge_disposition_code is null) then 1\n\telse 0\n    end as invalid_discharge_disposition_code_flag,\n    case\n        when (  (dd.primary_dx_count is null)\n\t        or\n\t        (dd.primary_dx_count = 0)\n\t\tor\n\t\t(dd.primary_dx_count = 1 and bb.diagnosis_code is null)  )\n\t     then 1\n\telse 0\n    end as missing_primary_diagnosis_flag,\n    case\n        when dd.primary_dx_count > 1 then 1\n\telse 0\n    end as multiple_primary_diagnoses_flag,\n    case\n        when bb.valid_icd_10_cm_flag = 0 then 1\n\telse 0\n    end as invalid_primary_diagnosis_code_flag,\n    case\n        when (  bb.valid_icd_10_cm_flag = 1\n\t        and\n\t        bb.ccs_diagnosis_category is null  )\n             then 1\n\telse 0\n    end as no_diagnosis_ccs_flag,\n    bb.ccs_diagnosis_category as diagnosis_ccs,\n    case\n        when aa.encounter_id in (select distinct encounter_id_A\n\t                         from tuva.readmissions.encounter_overlap )\n\t     or\n\t     aa.encounter_id in (select distinct encounter_id_B\n\t                         from tuva.readmissions.encounter_overlap )\n\tthen 1\n\telse 0\n    end as overlaps_with_another_encounter_flag,\n    case\n        when aa.ms_drg_code is null then 1\n\telse 0\n    end as missing_ms_drg_flag,\n    case\n        when ee.ms_drg_code is null then 1\n\telse 0\n    end as invalid_ms_drg_flag\n\nfrom tuva.readmissions.stg_encounter aa\n     left join tuva.readmissions.diagnosis_ccs bb\n     on aa.encounter_id = bb.encounter_id\n     left join tuva.terminology.discharge_disposition cc\n     on aa.discharge_disposition_code = cc.discharge_disposition_code\n     left join tuva.readmissions.primary_diagnosis_count dd\n     on aa.encounter_id = dd.encounter_id\n     left join tuva.terminology.ms_drg ee\n     on aa.ms_drg_code = ee.ms_drg_code\n),\n\n\n-- Here we add a disqualified_encounter_flag.\n-- This disqualified_encounter_flag = 1\n-- when any of the critical data quality flags\n-- from the above CTE are equal to 1.\nall_data_quality_flags as (\nselect\n    encounter_id,\n    diagnosis_ccs,\n    case\n        when\n\t    (missing_admit_date_flag = 1)\n\t    or\n\t    (missing_discharge_date_flag = 1)\n\t    or\n\t    (admit_after_discharge_flag = 1)\n\t    or\n\t    (missing_discharge_disposition_code_flag = 1)\n\t    or\n\t    (invalid_discharge_disposition_code_flag = 1)\n\t    or\n\t    (missing_primary_diagnosis_flag = 1)\n\t    or\n\t    (multiple_primary_diagnoses_flag =1)\n\t    or\n\t    (invalid_primary_diagnosis_code_flag = 1)\n\t    or\n\t    (no_diagnosis_ccs_flag = 1)\n\t    or\n\t    (overlaps_with_another_encounter_flag = 1)\n\t    or\n\t    (missing_ms_drg_flag = 1)\n\t    or\n\t    (invalid_ms_drg_flag = 1)\n\t    then 1\n\telse 0\n    end as disqualified_encounter_flag,\n    missing_admit_date_flag,\n    missing_discharge_date_flag,\n    admit_after_discharge_flag,\n    missing_discharge_disposition_code_flag,\n    invalid_discharge_disposition_code_flag,\n    missing_primary_diagnosis_flag,\n    multiple_primary_diagnoses_flag,\n    invalid_primary_diagnosis_code_flag,\n    no_diagnosis_ccs_flag,\n    overlaps_with_another_encounter_flag,\n    missing_ms_drg_flag,\n    invalid_ms_drg_flag\nfrom encounter_data_quality_issues\n)    \n\n\n\nselect *\nfrom all_data_quality_flags", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.readmissions.encounter_data_quality"}, "model.readmissions.readmissions__encounter_overlap": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.readmissions.readmissions__stg_encounter"]}, "config": {"enabled": true, "alias": "encounter_overlap", "schema": "readmissions", "database": "tuva", "tags": ["readmissions"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": "#161a7d"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "readmissions", "fqn": ["readmissions", "intermediate", "readmissions__encounter_overlap"], "unique_id": "model.readmissions.readmissions__encounter_overlap", "raw_code": "-- Here we give a list of all pairs of encounters\n-- that have some date overlap.\n\n\n{{ config(materialized='view'\n    ,enabled=var('readmissions_enabled',var('tuva_packages_enabled',True))) }}\n\n\n\nwith encounters_with_row_num as (\nselect\n    encounter_id,\n    patient_id,\n    admit_date,\n    discharge_date,\n    row_number() over (\n        partition by patient_id order by encounter_id\n\t) as row_num\nfrom {{ ref('readmissions__stg_encounter') }}\n),\n\n\ncartesian as (\nselect\n    aa.encounter_id as encounter_id_A,\n    bb.encounter_id as encounter_id_B,\n    aa.patient_id,\n    aa.admit_date as Ai,\n    aa.discharge_date as Af,\n    bb.admit_date as Bi,\n    bb.discharge_date as Bf,\n    case\n        when (aa.admit_date between bb.admit_date and bb.discharge_date) or (aa.discharge_date between bb.admit_date and bb.discharge_date) or\n             (bb.admit_date between aa.admit_date and aa.discharge_date) or (bb.discharge_date between aa.admit_date and aa.discharge_date)\n        then 1\n        else 0\n    end as overlap\n    from encounters_with_row_num aa\n    left join encounters_with_row_num bb\n    on aa.patient_id = bb.patient_id and aa.row_num < bb.row_num\n),\n\n\noverlapping_pairs\nas\n(\n    select\n        patient_id,\n        encounter_id_A,\n\tencounter_id_B\n    from cartesian\n    where overlap = 1\n)\n\n\n\nselect *\nfrom overlapping_pairs", "language": "sql", "package_name": "readmissions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\readmissions", "path": "intermediate\\readmissions__encounter_overlap.sql", "original_file_path": "models\\intermediate\\readmissions__encounter_overlap.sql", "name": "readmissions__encounter_overlap", "alias": "encounter_overlap", "checksum": {"name": "sha256", "checksum": "94423eaca729ba8d1c3de6330de93aabf8be042ad43cbd6fa6070681b3f52b8a"}, "tags": ["readmissions"], "refs": [["readmissions__stg_encounter"]], "sources": [], "metrics": [], "description": "This model lists all pairs of encounters that have some date overlap.", "columns": {"patient_id": {"name": "patient_id", "description": "The unique identifier for the patient", "meta": {}, "data_type": null, "quote": null, "tags": []}, "encounter_id_A": {"name": "encounter_id_A", "description": "Unique identifier for one of the overlapping encounters", "meta": {}, "data_type": null, "quote": null, "tags": []}, "encounter_id_B": {"name": "encounter_id_B", "description": "Unique identifier for the other overlapping encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": false, "node_color": "#161a7d"}, "patch_path": "readmissions://models\\_models.yml", "compiled_path": "../target\\compiled\\readmissions\\models\\intermediate\\readmissions__encounter_overlap.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "readmissions", "alias": "encounter_overlap", "tags": "readmissions", "materialized": "view", "enabled": true, "docs": {"show": false}}, "created_at": 1674073790.019347, "compiled_code": "-- Here we give a list of all pairs of encounters\n-- that have some date overlap.\n\n\n\n\n\n\nwith encounters_with_row_num as (\nselect\n    encounter_id,\n    patient_id,\n    admit_date,\n    discharge_date,\n    row_number() over (\n        partition by patient_id order by encounter_id\n\t) as row_num\nfrom tuva.readmissions.stg_encounter\n),\n\n\ncartesian as (\nselect\n    aa.encounter_id as encounter_id_A,\n    bb.encounter_id as encounter_id_B,\n    aa.patient_id,\n    aa.admit_date as Ai,\n    aa.discharge_date as Af,\n    bb.admit_date as Bi,\n    bb.discharge_date as Bf,\n    case\n        when (aa.admit_date between bb.admit_date and bb.discharge_date) or (aa.discharge_date between bb.admit_date and bb.discharge_date) or\n             (bb.admit_date between aa.admit_date and aa.discharge_date) or (bb.discharge_date between aa.admit_date and aa.discharge_date)\n        then 1\n        else 0\n    end as overlap\n    from encounters_with_row_num aa\n    left join encounters_with_row_num bb\n    on aa.patient_id = bb.patient_id and aa.row_num < bb.row_num\n),\n\n\noverlapping_pairs\nas\n(\n    select\n        patient_id,\n        encounter_id_A,\n\tencounter_id_B\n    from cartesian\n    where overlap = 1\n)\n\n\n\nselect *\nfrom overlapping_pairs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.readmissions.encounter_overlap"}, "model.readmissions.readmissions__encounter_specialty_cohort": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.readmissions.readmissions__procedure_ccs", "seed.terminology.terminology__surgery_gynecology_cohort", "seed.terminology.terminology__specialty_cohort", "model.readmissions.readmissions__diagnosis_ccs", "seed.terminology.terminology__specialty_cohort", "model.readmissions.readmissions__diagnosis_ccs", "seed.terminology.terminology__specialty_cohort", "model.readmissions.readmissions__diagnosis_ccs", "seed.terminology.terminology__specialty_cohort", "model.readmissions.readmissions__diagnosis_ccs", "seed.terminology.terminology__specialty_cohort", "model.readmissions.readmissions__stg_encounter"]}, "config": {"enabled": true, "alias": "encounter_specialty_cohort", "schema": "readmissions", "database": "tuva", "tags": ["readmissions"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": "#161a7d"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "readmissions", "fqn": ["readmissions", "intermediate", "readmissions__encounter_specialty_cohort"], "unique_id": "model.readmissions.readmissions__encounter_specialty_cohort", "raw_code": "-- Here we list the specialty cohort for each encounter that has\n-- an associated specialty cohort.\n-- There are 5 possible specialty cohorts:\n--      [1] Medicine\n--      [2] Surgery/Gynecology\n--      [3] Cardiology\n--      [4] Cardiovascular\n--      [5] Neurology\n-- An encounter that has an ICD-10-PCS procedure code or a\n-- CCS procedure category that corresponds to the\n-- 'Surgery/Gynecology' cohort will always be in that cohort.\n-- For encounters that are not in the 'Surgery/Gynecology' cohort,\n-- we then check to see if they are in one of the other 4 cohorts.\n\n\n{{ config(materialized='view'\n    ,enabled=var('readmissions_enabled',var('tuva_packages_enabled',True))) }}\n\n\n\n-- All encounter_ids that have an ICD-10-PCS procedure code\n-- or a CCS procedure category that corresponds to the\n-- 'Surgery/Gynecology' cohort\nwith surgery_gynecology as (\nselect distinct encounter_id\nfrom {{ ref('readmissions__procedure_ccs') }}\nwhere\n    procedure_code in (select distinct icd_10_pcs\n                       from {{ ref('terminology__surgery_gynecology_cohort') }} )\n    or\n    ccs_procedure_category in\n           (select distinct ccs\n            from {{ ref('terminology__specialty_cohort') }} sgsc\n\t    where sgsc.specialty_cohort = 'Surgery/Gynecology' )\n),\n\n\n-- All encounter_ids that are not in the 'Surgery/Gynecology' cohort\n-- and are in the 'Medicine' cohort\nmedicine as (\nselect distinct encounter_id\nfrom {{ ref('readmissions__diagnosis_ccs') }}\nwhere\n    encounter_id not in (select * from surgery_gynecology)\n    and\n    ccs_diagnosis_category in\n           (select distinct ccs\n            from {{ ref('terminology__specialty_cohort') }} msc\n\t    where msc.specialty_cohort = 'Medicine' )\n),\n\n\n-- All encounter_ids that are not in the 'Surgery/Gynecology' cohort\n-- and are in the 'Cardiorespiratory' cohort\ncardiorespiratory as (\nselect distinct encounter_id\nfrom {{ ref('readmissions__diagnosis_ccs') }}\nwhere\n    encounter_id not in (select * from surgery_gynecology)\n    and\n    ccs_diagnosis_category in\n           (select distinct ccs\n            from {{ ref('terminology__specialty_cohort') }} crsc\n\t    where crsc.specialty_cohort = 'Cardiorespiratory' )\n),\n\n\n-- All encounter_ids that are not in the 'Surgery/Gynecology' cohort\n-- and are in the 'Cardiovascular' cohort\ncardiovascular as (\nselect distinct encounter_id\nfrom {{ ref('readmissions__diagnosis_ccs') }}\nwhere\n    encounter_id not in (select * from surgery_gynecology)\n    and\n    ccs_diagnosis_category in\n           (select distinct ccs\n            from {{ ref('terminology__specialty_cohort') }} cvsc\n\t    where cvsc.specialty_cohort = 'Cardiovascular' )\n),\n\n\n-- All encounter_ids that are not in the 'Surgery/Gynecology' cohort\n-- and are in the 'Neurology' cohort\nneurology as (\nselect distinct encounter_id\nfrom {{ ref('readmissions__diagnosis_ccs') }}\nwhere\n    encounter_id not in (select * from surgery_gynecology)\n    and\n    ccs_diagnosis_category in\n           (select distinct ccs\n            from {{ ref('terminology__specialty_cohort') }} nsc\n\t    where nsc.specialty_cohort = 'Neurology' )\n),\n\n\n-- All encounter_ids that have an associated cohort listed\n-- with their corresponding cohort\nall_cohorts as (\nselect encounter_id, 'Surgery/Gynecology' as specialty_cohort\nfrom surgery_gynecology\nunion distinct\nselect encounter_id, 'Medicine' as specialty_cohort\nfrom medicine\nunion distinct\nselect encounter_id, 'Cardiorespiratory' as specialty_cohort\nfrom cardiorespiratory\nunion distinct\nselect encounter_id, 'Cardiovascular' as specialty_cohort\nfrom cardiovascular\nunion distinct\nselect encounter_id, 'Neurology' as specialty_cohort\nfrom neurology\n),\n\n\n-- Assign a specialty cohort to ALL encounters. If an encounter\n-- does not belong to any specialty cohort according to the\n-- rules above, then it is assigned to the 'Medicine' cohort\n-- by default\ncohorts_for_all_encounters as (\nselect\n    aa.encounter_id,\n    case\n        when bb.specialty_cohort is not null then bb.specialty_cohort\n\telse 'Medicine'\n    end as specialty_cohort\nfrom {{ ref('readmissions__stg_encounter') }} aa\n     left join all_cohorts bb on aa.encounter_id = bb.encounter_id\n)\n\n\n\nselect *\nfrom cohorts_for_all_encounters", "language": "sql", "package_name": "readmissions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\readmissions", "path": "intermediate\\readmissions__encounter_specialty_cohort.sql", "original_file_path": "models\\intermediate\\readmissions__encounter_specialty_cohort.sql", "name": "readmissions__encounter_specialty_cohort", "alias": "encounter_specialty_cohort", "checksum": {"name": "sha256", "checksum": "319468937b619786dd5298d39dd07aabcecfa1d9f79f20033848a37acea1d36e"}, "tags": ["readmissions"], "refs": [["readmissions__procedure_ccs"], ["terminology__surgery_gynecology_cohort"], ["terminology__specialty_cohort"], ["readmissions__diagnosis_ccs"], ["terminology__specialty_cohort"], ["readmissions__diagnosis_ccs"], ["terminology__specialty_cohort"], ["readmissions__diagnosis_ccs"], ["terminology__specialty_cohort"], ["readmissions__diagnosis_ccs"], ["terminology__specialty_cohort"], ["readmissions__stg_encounter"]], "sources": [], "metrics": [], "description": "This model lists the specialty cohort associated with each inpatient encounter. All encounters in the stg_encounter model are present here, and each gets a specialty cohort assigned from the following list of 5 options: Surgery/Gynecology, Medicine, Cardiorespiratory, Cardiovascular, Neurology. Encounters that don't have a specialty cohort get 'Medicine' assigned by default.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "specialty_cohort": {"name": "specialty_cohort", "description": "The specialty cohort associated with the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": false, "node_color": "#161a7d"}, "patch_path": "readmissions://models\\_models.yml", "compiled_path": "../target\\compiled\\readmissions\\models\\intermediate\\readmissions__encounter_specialty_cohort.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "readmissions", "alias": "encounter_specialty_cohort", "tags": "readmissions", "materialized": "view", "enabled": true, "docs": {"show": false}}, "created_at": 1674073790.0368624, "compiled_code": "-- Here we list the specialty cohort for each encounter that has\n-- an associated specialty cohort.\n-- There are 5 possible specialty cohorts:\n--      [1] Medicine\n--      [2] Surgery/Gynecology\n--      [3] Cardiology\n--      [4] Cardiovascular\n--      [5] Neurology\n-- An encounter that has an ICD-10-PCS procedure code or a\n-- CCS procedure category that corresponds to the\n-- 'Surgery/Gynecology' cohort will always be in that cohort.\n-- For encounters that are not in the 'Surgery/Gynecology' cohort,\n-- we then check to see if they are in one of the other 4 cohorts.\n\n\n\n\n\n\n-- All encounter_ids that have an ICD-10-PCS procedure code\n-- or a CCS procedure category that corresponds to the\n-- 'Surgery/Gynecology' cohort\nwith surgery_gynecology as (\nselect distinct encounter_id\nfrom tuva.readmissions.procedure_ccs\nwhere\n    procedure_code in (select distinct icd_10_pcs\n                       from tuva.terminology.surgery_gynecology_cohort )\n    or\n    ccs_procedure_category in\n           (select distinct ccs\n            from tuva.terminology.specialty_cohort sgsc\n\t    where sgsc.specialty_cohort = 'Surgery/Gynecology' )\n),\n\n\n-- All encounter_ids that are not in the 'Surgery/Gynecology' cohort\n-- and are in the 'Medicine' cohort\nmedicine as (\nselect distinct encounter_id\nfrom tuva.readmissions.diagnosis_ccs\nwhere\n    encounter_id not in (select * from surgery_gynecology)\n    and\n    ccs_diagnosis_category in\n           (select distinct ccs\n            from tuva.terminology.specialty_cohort msc\n\t    where msc.specialty_cohort = 'Medicine' )\n),\n\n\n-- All encounter_ids that are not in the 'Surgery/Gynecology' cohort\n-- and are in the 'Cardiorespiratory' cohort\ncardiorespiratory as (\nselect distinct encounter_id\nfrom tuva.readmissions.diagnosis_ccs\nwhere\n    encounter_id not in (select * from surgery_gynecology)\n    and\n    ccs_diagnosis_category in\n           (select distinct ccs\n            from tuva.terminology.specialty_cohort crsc\n\t    where crsc.specialty_cohort = 'Cardiorespiratory' )\n),\n\n\n-- All encounter_ids that are not in the 'Surgery/Gynecology' cohort\n-- and are in the 'Cardiovascular' cohort\ncardiovascular as (\nselect distinct encounter_id\nfrom tuva.readmissions.diagnosis_ccs\nwhere\n    encounter_id not in (select * from surgery_gynecology)\n    and\n    ccs_diagnosis_category in\n           (select distinct ccs\n            from tuva.terminology.specialty_cohort cvsc\n\t    where cvsc.specialty_cohort = 'Cardiovascular' )\n),\n\n\n-- All encounter_ids that are not in the 'Surgery/Gynecology' cohort\n-- and are in the 'Neurology' cohort\nneurology as (\nselect distinct encounter_id\nfrom tuva.readmissions.diagnosis_ccs\nwhere\n    encounter_id not in (select * from surgery_gynecology)\n    and\n    ccs_diagnosis_category in\n           (select distinct ccs\n            from tuva.terminology.specialty_cohort nsc\n\t    where nsc.specialty_cohort = 'Neurology' )\n),\n\n\n-- All encounter_ids that have an associated cohort listed\n-- with their corresponding cohort\nall_cohorts as (\nselect encounter_id, 'Surgery/Gynecology' as specialty_cohort\nfrom surgery_gynecology\nunion distinct\nselect encounter_id, 'Medicine' as specialty_cohort\nfrom medicine\nunion distinct\nselect encounter_id, 'Cardiorespiratory' as specialty_cohort\nfrom cardiorespiratory\nunion distinct\nselect encounter_id, 'Cardiovascular' as specialty_cohort\nfrom cardiovascular\nunion distinct\nselect encounter_id, 'Neurology' as specialty_cohort\nfrom neurology\n),\n\n\n-- Assign a specialty cohort to ALL encounters. If an encounter\n-- does not belong to any specialty cohort according to the\n-- rules above, then it is assigned to the 'Medicine' cohort\n-- by default\ncohorts_for_all_encounters as (\nselect\n    aa.encounter_id,\n    case\n        when bb.specialty_cohort is not null then bb.specialty_cohort\n\telse 'Medicine'\n    end as specialty_cohort\nfrom tuva.readmissions.stg_encounter aa\n     left join all_cohorts bb on aa.encounter_id = bb.encounter_id\n)\n\n\n\nselect *\nfrom cohorts_for_all_encounters", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.readmissions.encounter_specialty_cohort"}, "model.readmissions.readmissions__exclusion": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.readmissions.readmissions__diagnosis_ccs", "seed.terminology.terminology__exclusion_ccs_diagnosis_category"]}, "config": {"enabled": true, "alias": "exclusion", "schema": "readmissions", "database": "tuva", "tags": ["readmissions"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": "#161a7d"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "readmissions", "fqn": ["readmissions", "intermediate", "readmissions__exclusion"], "unique_id": "model.readmissions.readmissions__exclusion", "raw_code": "-- Here we list encounter_ids that are excluded\n-- from being index admissions because they\n-- belong to one of these categories:\n--       [1] Medical Treatment of Cancer\n--       [2] Rehabilitation\n--       [3] Psychiatric\n\n\n{{ config(materialized='view'\n    ,enabled=var('readmissions_enabled',var('tuva_packages_enabled',True))) }}\n\n\n-- encounter_ids for encounters that should be\n-- excluded because they belong to one of the\n-- exclusion categories\nwith exclusions as (\nselect distinct encounter_id\nfrom {{ ref('readmissions__diagnosis_ccs') }}\nwhere ccs_diagnosis_category in\n    (select distinct ccs_diagnosis_category\n     from {{ ref('terminology__exclusion_ccs_diagnosis_category') }} )\n)\n\n\nselect *\nfrom exclusions", "language": "sql", "package_name": "readmissions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\readmissions", "path": "intermediate\\readmissions__exclusion.sql", "original_file_path": "models\\intermediate\\readmissions__exclusion.sql", "name": "readmissions__exclusion", "alias": "exclusion", "checksum": {"name": "sha256", "checksum": "ca48205b40cbafb1504d14337eb0f6978273c7e70c09c6c115674c71e1ab72d4"}, "tags": ["readmissions"], "refs": [["readmissions__diagnosis_ccs"], ["terminology__exclusion_ccs_diagnosis_category"]], "sources": [], "metrics": [], "description": "This model lists all encounters that are excluded from being index admissions because they belong to one of the exclusion categories.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": false, "node_color": "#161a7d"}, "patch_path": "readmissions://models\\_models.yml", "compiled_path": "../target\\compiled\\readmissions\\models\\intermediate\\readmissions__exclusion.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "readmissions", "alias": "exclusion", "tags": "readmissions", "materialized": "view", "enabled": true, "docs": {"show": false}}, "created_at": 1674073790.0473843, "compiled_code": "-- Here we list encounter_ids that are excluded\n-- from being index admissions because they\n-- belong to one of these categories:\n--       [1] Medical Treatment of Cancer\n--       [2] Rehabilitation\n--       [3] Psychiatric\n\n\n\n\n\n-- encounter_ids for encounters that should be\n-- excluded because they belong to one of the\n-- exclusion categories\nwith exclusions as (\nselect distinct encounter_id\nfrom tuva.readmissions.diagnosis_ccs\nwhere ccs_diagnosis_category in\n    (select distinct ccs_diagnosis_category\n     from tuva.terminology.exclusion_ccs_diagnosis_category )\n)\n\n\nselect *\nfrom exclusions", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.readmissions.exclusion"}, "model.readmissions.readmissions__index_admission": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.readmissions.readmissions__stg_encounter", "model.readmissions.readmissions__index_time_requirement", "model.readmissions.readmissions__index_discharge_requirement", "model.readmissions.readmissions__exclusion"]}, "config": {"enabled": true, "alias": "index_admission", "schema": "readmissions", "database": "tuva", "tags": ["readmissions"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": "#161a7d"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "readmissions", "fqn": ["readmissions", "intermediate", "readmissions__index_admission"], "unique_id": "model.readmissions.readmissions__index_admission", "raw_code": "-- Here we list all index admissions for the hospital wide readmissions\n-- measure.\n-- These represent encounter_ids that meet the requirements to be an\n-- index admission for the HWR measure.\n-- These are the requirements for a hospitalization to be an index admission\n-- for the HWR measure:\n--\n--     Time Requirement: The discharge data must be at least 30 days\n--                       earlier than the last dischareg date available\n--                       in the dataset.\n-- \n--     Discharge Requirements: The patient must not be discharged to another\n--                             acute care hospital; the patient must not have\n--                             left against medical advice; and the patient\n--                             must be alive at discharge.\n--\n--     Diagnosis Requirements: Exclude encounters where based on the CCS\n--     (exclusions)            diagnosis category we know the encounter was\n--                             for medical treatment of cancer, rehabilitation,\n--                             or psychiatric reasons.\n\n\n{{ config(materialized='view'\n    ,enabled=var('readmissions_enabled',var('tuva_packages_enabled',True))) }}\n\n\n\n\nselect distinct encounter_id\nfrom {{ ref('readmissions__stg_encounter') }}\nwhere \n    encounter_id in (select *\n\t             from {{ ref('readmissions__index_time_requirement') }} )\n    and\n    encounter_id in (select *\n\t             from {{ ref('readmissions__index_discharge_requirement') }} )\n    and\n    encounter_id not in (select *\n\t                 from {{ ref('readmissions__exclusion') }} )", "language": "sql", "package_name": "readmissions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\readmissions", "path": "intermediate\\readmissions__index_admission.sql", "original_file_path": "models\\intermediate\\readmissions__index_admission.sql", "name": "readmissions__index_admission", "alias": "index_admission", "checksum": {"name": "sha256", "checksum": "d5799d7b191c2bf45e723b198b44d5647f6fde97c59cd288ccb8a23509a6065d"}, "tags": ["readmissions"], "refs": [["readmissions__stg_encounter"], ["readmissions__index_time_requirement"], ["readmissions__index_discharge_requirement"], ["readmissions__exclusion"]], "sources": [], "metrics": [], "description": "This model lists all index admissions for the hospital wide readmissions measure. These represent encounter_ids that meet the requirements to be an index admission for the HWR measure.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": false, "node_color": "#161a7d"}, "patch_path": "readmissions://models\\_models.yml", "compiled_path": "../target\\compiled\\readmissions\\models\\intermediate\\readmissions__index_admission.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "readmissions", "alias": "index_admission", "tags": "readmissions", "materialized": "view", "enabled": true, "docs": {"show": false}}, "created_at": 1674073790.0573897, "compiled_code": "-- Here we list all index admissions for the hospital wide readmissions\n-- measure.\n-- These represent encounter_ids that meet the requirements to be an\n-- index admission for the HWR measure.\n-- These are the requirements for a hospitalization to be an index admission\n-- for the HWR measure:\n--\n--     Time Requirement: The discharge data must be at least 30 days\n--                       earlier than the last dischareg date available\n--                       in the dataset.\n-- \n--     Discharge Requirements: The patient must not be discharged to another\n--                             acute care hospital; the patient must not have\n--                             left against medical advice; and the patient\n--                             must be alive at discharge.\n--\n--     Diagnosis Requirements: Exclude encounters where based on the CCS\n--     (exclusions)            diagnosis category we know the encounter was\n--                             for medical treatment of cancer, rehabilitation,\n--                             or psychiatric reasons.\n\n\n\n\n\n\n\nselect distinct encounter_id\nfrom tuva.readmissions.stg_encounter\nwhere \n    encounter_id in (select *\n\t             from tuva.readmissions.index_time_requirement )\n    and\n    encounter_id in (select *\n\t             from tuva.readmissions.index_discharge_requirement )\n    and\n    encounter_id not in (select *\n\t                 from tuva.readmissions.exclusion )", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.readmissions.index_admission"}, "model.readmissions.readmissions__index_discharge_requirement": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.readmissions.readmissions__stg_encounter", "model.readmissions.readmissions__stg_encounter", "model.readmissions.readmissions__stg_encounter", "model.readmissions.readmissions__stg_encounter"]}, "config": {"enabled": true, "alias": "index_discharge_requirement", "schema": "readmissions", "database": "tuva", "tags": ["readmissions"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": "#161a7d"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "readmissions", "fqn": ["readmissions", "intermediate", "readmissions__index_discharge_requirement"], "unique_id": "model.readmissions.readmissions__index_discharge_requirement", "raw_code": "-- Here we list encounter_ids that meet\n-- the discharge_disposition_code requirements to be an\n-- index admission:\n--    *** Must NOT be discharged to another acute care hospital\n--    *** Must NOT have left against medical advice\n--    *** Patient must be alive at discharge\n\n\n{{ config(materialized='view'\n    ,enabled=var('readmissions_enabled',var('tuva_packages_enabled',True))) }}\n\n\n\n\n-- Encounters where the patient is discharged to\n-- another acute care hospital\n-- (discharge_disposition_code = '02', which is:\n-- 'Discharged/transferred to other short term\n--  general hospital for inpatient care.' )\nwith acute_care_discharge as (\nselect encounter_id\nfrom {{ ref('readmissions__stg_encounter') }}\nwhere discharge_disposition_code = '02'\n),\n\n\n-- Encounters where the patient left against medical advice\nagainst_medical_advice as (\nselect encounter_id\nfrom {{ ref('readmissions__stg_encounter') }}\nwhere discharge_disposition_code = '07'   \n),\n\n\n-- Encounters where patient died\ndied as (\nselect encounter_id\nfrom {{ ref('readmissions__stg_encounter') }}\nwhere discharge_disposition_code = '20'   \n),\n\n\n-- Union of all invalid discharges\nall_invalid_discharges as (\nselect encounter_id from acute_care_discharge\nunion distinct\nselect encounter_id from against_medical_advice\nunion distinct\nselect encounter_id from died\n)\n\n\n-- All discharges that meet the discharge_disposition_code\n-- requirements to be an index admission\nselect encounter_id\nfrom {{ ref('readmissions__stg_encounter') }}\nwhere encounter_id not in (select * from all_invalid_discharges)", "language": "sql", "package_name": "readmissions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\readmissions", "path": "intermediate\\readmissions__index_discharge_requirement.sql", "original_file_path": "models\\intermediate\\readmissions__index_discharge_requirement.sql", "name": "readmissions__index_discharge_requirement", "alias": "index_discharge_requirement", "checksum": {"name": "sha256", "checksum": "a8877e38a723299161ccdb54f93da77db4e56301a8b356877febb3cef9232ac3"}, "tags": ["readmissions"], "refs": [["readmissions__stg_encounter"], ["readmissions__stg_encounter"], ["readmissions__stg_encounter"], ["readmissions__stg_encounter"]], "sources": [], "metrics": [], "description": "This model lists all encounters that meet the discharge disposition requirement to be an index admission.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": false, "node_color": "#161a7d"}, "patch_path": "readmissions://models\\_models.yml", "compiled_path": "../target\\compiled\\readmissions\\models\\intermediate\\readmissions__index_discharge_requirement.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "readmissions", "alias": "index_discharge_requirement", "tags": "readmissions", "materialized": "view", "enabled": true, "docs": {"show": false}}, "created_at": 1674073790.068709, "compiled_code": "-- Here we list encounter_ids that meet\n-- the discharge_disposition_code requirements to be an\n-- index admission:\n--    *** Must NOT be discharged to another acute care hospital\n--    *** Must NOT have left against medical advice\n--    *** Patient must be alive at discharge\n\n\n\n\n\n\n\n-- Encounters where the patient is discharged to\n-- another acute care hospital\n-- (discharge_disposition_code = '02', which is:\n-- 'Discharged/transferred to other short term\n--  general hospital for inpatient care.' )\nwith acute_care_discharge as (\nselect encounter_id\nfrom tuva.readmissions.stg_encounter\nwhere discharge_disposition_code = '02'\n),\n\n\n-- Encounters where the patient left against medical advice\nagainst_medical_advice as (\nselect encounter_id\nfrom tuva.readmissions.stg_encounter\nwhere discharge_disposition_code = '07'   \n),\n\n\n-- Encounters where patient died\ndied as (\nselect encounter_id\nfrom tuva.readmissions.stg_encounter\nwhere discharge_disposition_code = '20'   \n),\n\n\n-- Union of all invalid discharges\nall_invalid_discharges as (\nselect encounter_id from acute_care_discharge\nunion distinct\nselect encounter_id from against_medical_advice\nunion distinct\nselect encounter_id from died\n)\n\n\n-- All discharges that meet the discharge_disposition_code\n-- requirements to be an index admission\nselect encounter_id\nfrom tuva.readmissions.stg_encounter\nwhere encounter_id not in (select * from all_invalid_discharges)", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.readmissions.index_discharge_requirement"}, "model.readmissions.readmissions__index_time_requirement": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.readmissions.readmissions__stg_encounter", "model.readmissions.readmissions__stg_encounter"]}, "config": {"enabled": true, "alias": "index_time_requirement", "schema": "readmissions", "database": "tuva", "tags": ["readmissions"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": "#161a7d"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "readmissions", "fqn": ["readmissions", "intermediate", "readmissions__index_time_requirement"], "unique_id": "model.readmissions.readmissions__index_time_requirement", "raw_code": "-- Here we list encounter_ids that meet\n-- the time requirement to be an index admission:\n-- The discharge date must be at least 30 days\n-- earlier than the last discharge date available\n-- in the dataset.\n\n\n{{ config(materialized='view'\n    ,enabled=var('readmissions_enabled',var('tuva_packages_enabled',True))) }}\n\n\n\n\nselect encounter_id\nfrom {{ ref('readmissions__stg_encounter') }}\nwhere discharge_date <= (select max(discharge_date)\n                         from {{ ref('readmissions__stg_encounter') }} ) - 30", "language": "sql", "package_name": "readmissions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\readmissions", "path": "intermediate\\readmissions__index_time_requirement.sql", "original_file_path": "models\\intermediate\\readmissions__index_time_requirement.sql", "name": "readmissions__index_time_requirement", "alias": "index_time_requirement", "checksum": {"name": "sha256", "checksum": "16fae39e163b000b9d32a191ff6603a35c1b1ca7a881073b9bd6d8776007aa8c"}, "tags": ["readmissions"], "refs": [["readmissions__stg_encounter"], ["readmissions__stg_encounter"]], "sources": [], "metrics": [], "description": "This model lists all encounters that meet the time requirement to be an index admission.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": false, "node_color": "#161a7d"}, "patch_path": "readmissions://models\\_models.yml", "compiled_path": "../target\\compiled\\readmissions\\models\\intermediate\\readmissions__index_time_requirement.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "readmissions", "alias": "index_time_requirement", "tags": "readmissions", "materialized": "view", "enabled": true, "docs": {"show": false}}, "created_at": 1674073790.0842404, "compiled_code": "-- Here we list encounter_ids that meet\n-- the time requirement to be an index admission:\n-- The discharge date must be at least 30 days\n-- earlier than the last discharge date available\n-- in the dataset.\n\n\n\n\n\n\n\nselect encounter_id\nfrom tuva.readmissions.stg_encounter\nwhere discharge_date <= (select max(discharge_date)\n                         from tuva.readmissions.stg_encounter ) - 30", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.readmissions.index_time_requirement"}, "model.readmissions.readmissions__planned_encounter": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.readmissions.readmissions__procedure_ccs", "seed.terminology.terminology__always_planned_ccs_procedure_category", "model.readmissions.readmissions__diagnosis_ccs", "seed.terminology.terminology__always_planned_ccs_diagnosis_category", "model.readmissions.readmissions__procedure_ccs", "seed.terminology.terminology__potentially_planned_ccs_procedure_category", "model.readmissions.readmissions__procedure_ccs", "seed.terminology.terminology__potentially_planned_icd_10_pcs", "model.readmissions.readmissions__diagnosis_ccs", "seed.terminology.terminology__acute_diagnosis_icd_10_cm", "seed.terminology.terminology__acute_diagnosis_ccs"]}, "config": {"enabled": true, "alias": "planned_encounter", "schema": "readmissions", "database": "tuva", "tags": ["readmissions"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": "#161a7d"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "readmissions", "fqn": ["readmissions", "intermediate", "readmissions__planned_encounter"], "unique_id": "model.readmissions.readmissions__planned_encounter", "raw_code": "-- Here we list encounter_ids for all encounters\n-- that are planned.\n\n\n{{ config(materialized='view'\n    ,enabled=var('readmissions_enabled',var('tuva_packages_enabled',True))) }}\n\n\n-- encounter_ids for encounters that we know\n-- are planned because they had a procedure category\n-- that is only present for planned encounters \nwith always_planned_px as (\nselect distinct encounter_id\nfrom {{ ref('readmissions__procedure_ccs') }}\nwhere ccs_procedure_category in (select distinct ccs_procedure_category\n              from {{ ref('terminology__always_planned_ccs_procedure_category') }} )\n),\n\n\n-- encounter_ids for encounters that we know\n-- are planned because they had a diagnosis category\n-- that is only present for planned encounters\nalways_planned_dx as (\nselect distinct encounter_id\nfrom {{ ref('readmissions__diagnosis_ccs') }}\nwhere ccs_diagnosis_category in\n    (select distinct ccs_diagnosis_category\n     from {{ ref('terminology__always_planned_ccs_diagnosis_category') }} )\n),\n\n\n-- encounter_ids for encounters that are potentially planned\n-- based on one of their CCS procedure categories.\n-- For these encounters to actually be planned, we must further\n-- require that they are NOT acute encounters\npotentially_planned_px_ccs as (\nselect distinct encounter_id\nfrom {{ ref('readmissions__procedure_ccs') }}\nwhere ccs_procedure_category in\n    (select distinct ccs_procedure_category\n     from {{ ref('terminology__potentially_planned_ccs_procedure_category') }} )\n),\n\n\n-- encounter_ids for encounters that are potentially planned\n-- based on their ICD-10-PCS procedure codes.\n-- For these encounters to actually be planned, we must further\n-- require that they are NOT acute encounters\npotentially_planned_px_icd_10_pcs as (\nselect distinct encounter_id\nfrom {{ ref('readmissions__procedure_ccs') }}\nwhere procedure_code in\n    (select distinct icd_10_pcs\n     from {{ ref('terminology__potentially_planned_icd_10_pcs') }} )\n),\n\n\n-- encounter_ids for encounters that are acute based\n-- on their primary diagnosis code or their CCS diagnosis category\nacute_encounters as (\nselect distinct encounter_id\nfrom {{ ref('readmissions__diagnosis_ccs') }}\nwhere\n    diagnosis_code in (select distinct icd_10_cm\n                       from {{ ref('terminology__acute_diagnosis_icd_10_cm') }} )\n    or\n    ccs_diagnosis_category in\n             (select distinct ccs_diagnosis_category\n              from {{ ref('terminology__acute_diagnosis_ccs') }} )\n),\n\n\n-- encounter_ids for encounters that are:\n--           [1] potentially planned, based on one of\n--               their CCS procedure categories or\n--               their ICD-10-PCS procedure codes\n--           [2] acute, based on their primary diagnosis code\n--               or their CCS diagnosis category\n-- These encounters are therefore confirmed to be planned\npotentially_planned_that_are_actually_planned as (\nselect *\nfrom potentially_planned_px_ccs\nwhere encounter_id not in (select * from acute_encounters)\nunion distinct\nselect *\nfrom potentially_planned_px_icd_10_pcs\nwhere encounter_id not in (select * from acute_encounters)\n),\n\n\n-- Aggregate of all encounter_ids for planned encounters\nall_planned_encounters as (\nselect * from always_planned_px\nunion distinct\nselect * from always_planned_dx\nunion distinct\nselect * from potentially_planned_that_are_actually_planned\n)\n\n\n\nselect *\nfrom all_planned_encounters", "language": "sql", "package_name": "readmissions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\readmissions", "path": "intermediate\\readmissions__planned_encounter.sql", "original_file_path": "models\\intermediate\\readmissions__planned_encounter.sql", "name": "readmissions__planned_encounter", "alias": "planned_encounter", "checksum": {"name": "sha256", "checksum": "fe8904b7226e9ea8412374ecff10bf30442472fdc15881275223261169702436"}, "tags": ["readmissions"], "refs": [["readmissions__procedure_ccs"], ["terminology__always_planned_ccs_procedure_category"], ["readmissions__diagnosis_ccs"], ["terminology__always_planned_ccs_diagnosis_category"], ["readmissions__procedure_ccs"], ["terminology__potentially_planned_ccs_procedure_category"], ["readmissions__procedure_ccs"], ["terminology__potentially_planned_icd_10_pcs"], ["readmissions__diagnosis_ccs"], ["terminology__acute_diagnosis_icd_10_cm"], ["terminology__acute_diagnosis_ccs"]], "sources": [], "metrics": [], "description": "This model gives a list of all encounter_ids that were planned encounters.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": false, "node_color": "#161a7d"}, "patch_path": "readmissions://models\\_models.yml", "compiled_path": "../target\\compiled\\readmissions\\models\\intermediate\\readmissions__planned_encounter.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "readmissions", "alias": "planned_encounter", "tags": "readmissions", "materialized": "view", "enabled": true, "docs": {"show": false}}, "created_at": 1674073790.1037595, "compiled_code": "-- Here we list encounter_ids for all encounters\n-- that are planned.\n\n\n\n\n\n-- encounter_ids for encounters that we know\n-- are planned because they had a procedure category\n-- that is only present for planned encounters \nwith always_planned_px as (\nselect distinct encounter_id\nfrom tuva.readmissions.procedure_ccs\nwhere ccs_procedure_category in (select distinct ccs_procedure_category\n              from tuva.terminology.always_planned_ccs_procedure_category )\n),\n\n\n-- encounter_ids for encounters that we know\n-- are planned because they had a diagnosis category\n-- that is only present for planned encounters\nalways_planned_dx as (\nselect distinct encounter_id\nfrom tuva.readmissions.diagnosis_ccs\nwhere ccs_diagnosis_category in\n    (select distinct ccs_diagnosis_category\n     from tuva.terminology.always_planned_ccs_diagnosis_category )\n),\n\n\n-- encounter_ids for encounters that are potentially planned\n-- based on one of their CCS procedure categories.\n-- For these encounters to actually be planned, we must further\n-- require that they are NOT acute encounters\npotentially_planned_px_ccs as (\nselect distinct encounter_id\nfrom tuva.readmissions.procedure_ccs\nwhere ccs_procedure_category in\n    (select distinct ccs_procedure_category\n     from tuva.terminology.potentially_planned_ccs_procedure_category )\n),\n\n\n-- encounter_ids for encounters that are potentially planned\n-- based on their ICD-10-PCS procedure codes.\n-- For these encounters to actually be planned, we must further\n-- require that they are NOT acute encounters\npotentially_planned_px_icd_10_pcs as (\nselect distinct encounter_id\nfrom tuva.readmissions.procedure_ccs\nwhere procedure_code in\n    (select distinct icd_10_pcs\n     from tuva.terminology.potentially_planned_icd_10_pcs )\n),\n\n\n-- encounter_ids for encounters that are acute based\n-- on their primary diagnosis code or their CCS diagnosis category\nacute_encounters as (\nselect distinct encounter_id\nfrom tuva.readmissions.diagnosis_ccs\nwhere\n    diagnosis_code in (select distinct icd_10_cm\n                       from tuva.terminology.acute_diagnosis_icd_10_cm )\n    or\n    ccs_diagnosis_category in\n             (select distinct ccs_diagnosis_category\n              from tuva.terminology.acute_diagnosis_ccs )\n),\n\n\n-- encounter_ids for encounters that are:\n--           [1] potentially planned, based on one of\n--               their CCS procedure categories or\n--               their ICD-10-PCS procedure codes\n--           [2] acute, based on their primary diagnosis code\n--               or their CCS diagnosis category\n-- These encounters are therefore confirmed to be planned\npotentially_planned_that_are_actually_planned as (\nselect *\nfrom potentially_planned_px_ccs\nwhere encounter_id not in (select * from acute_encounters)\nunion distinct\nselect *\nfrom potentially_planned_px_icd_10_pcs\nwhere encounter_id not in (select * from acute_encounters)\n),\n\n\n-- Aggregate of all encounter_ids for planned encounters\nall_planned_encounters as (\nselect * from always_planned_px\nunion distinct\nselect * from always_planned_dx\nunion distinct\nselect * from potentially_planned_that_are_actually_planned\n)\n\n\n\nselect *\nfrom all_planned_encounters", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.readmissions.planned_encounter"}, "model.readmissions.readmissions__primary_diagnosis_count": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.readmissions.readmissions__stg_diagnosis", "model.readmissions.readmissions__stg_diagnosis"]}, "config": {"enabled": true, "alias": "primary_diagnosis_count", "schema": "readmissions", "database": "tuva", "tags": ["readmissions"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": "#161a7d"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "readmissions", "fqn": ["readmissions", "intermediate", "readmissions__primary_diagnosis_count"], "unique_id": "model.readmissions.readmissions__primary_diagnosis_count", "raw_code": "-- Every encounter should have one and only one primary\n-- diagnosis. A potential data quality problem would\n-- be to have encounters that have no primary diagnosis\n-- or multiple primary diagnoses.\n-- Here we list the count of primary diagnoses associated\n-- with each encounter in the stg_diagnosis model.\n\n\n{{ config(materialized='view'\n    ,enabled=var('readmissions_enabled',var('tuva_packages_enabled',True))) }}\n\n\n\n-- Here we list the primary diagnosis count for every\n-- encounter_id in the stg_diagnosis model that has\n-- at least one primary diagnosis\nwith primary_diagnosis_count_greater_than_zero as (\nselect\n    encounter_id,\n    count(*) as primary_dx_count\nfrom {{ ref('readmissions__stg_diagnosis') }}\nwhere diagnosis_rank = 1\ngroup by encounter_id\n),\n\n\n-- Here we list all distinct encounter_ids in the\n-- stg_diagnosis model\nall_encounter_ids as (\nselect distinct encounter_id\nfrom {{ ref('readmissions__stg_diagnosis') }}\n),\n\n\n-- Here we list the primary diagnosis count for every\n-- encounter_id in the stg_diagnosis model.\n-- The primary_dx_count can be any\n-- nonnegative integer: {0,1,2,3,...}\nall_primary_diagnosis_count as (\nselect\n    aa.encounter_id,\n    case\n        when bb.primary_dx_count is null then 0\n\telse bb.primary_dx_count\n    end as primary_dx_count\nfrom\n    all_encounter_ids aa\n    left join primary_diagnosis_count_greater_than_zero bb\n    on aa.encounter_id = bb.encounter_id\n)\n\n\n\nselect *\nfrom all_primary_diagnosis_count", "language": "sql", "package_name": "readmissions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\readmissions", "path": "intermediate\\readmissions__primary_diagnosis_count.sql", "original_file_path": "models\\intermediate\\readmissions__primary_diagnosis_count.sql", "name": "readmissions__primary_diagnosis_count", "alias": "primary_diagnosis_count", "checksum": {"name": "sha256", "checksum": "da73e6f412578d9edf282621dc7649647ce5f791c64594d0605907fee99c9477"}, "tags": ["readmissions"], "refs": [["readmissions__stg_diagnosis"], ["readmissions__stg_diagnosis"]], "sources": [], "metrics": [], "description": "This model includes a count of primary diagnoses related to each encounter_id in the stg_diagnosis model. In theory, each encounter_id should only have a single primary diagnosis, but this model checks how many primary diagnoses each encounter_id has in the dataset.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "primary_dx_count": {"name": "primary_dx_count", "description": "A positive integer giving the count of primary diagnoses for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": false, "node_color": "#161a7d"}, "patch_path": "readmissions://models\\_models.yml", "compiled_path": "../target\\compiled\\readmissions\\models\\intermediate\\readmissions__primary_diagnosis_count.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "readmissions", "alias": "primary_diagnosis_count", "tags": "readmissions", "materialized": "view", "enabled": true, "docs": {"show": false}}, "created_at": 1674073790.1207728, "compiled_code": "-- Every encounter should have one and only one primary\n-- diagnosis. A potential data quality problem would\n-- be to have encounters that have no primary diagnosis\n-- or multiple primary diagnoses.\n-- Here we list the count of primary diagnoses associated\n-- with each encounter in the stg_diagnosis model.\n\n\n\n\n\n\n-- Here we list the primary diagnosis count for every\n-- encounter_id in the stg_diagnosis model that has\n-- at least one primary diagnosis\nwith primary_diagnosis_count_greater_than_zero as (\nselect\n    encounter_id,\n    count(*) as primary_dx_count\nfrom tuva.readmissions.stg_diagnosis\nwhere diagnosis_rank = 1\ngroup by encounter_id\n),\n\n\n-- Here we list all distinct encounter_ids in the\n-- stg_diagnosis model\nall_encounter_ids as (\nselect distinct encounter_id\nfrom tuva.readmissions.stg_diagnosis\n),\n\n\n-- Here we list the primary diagnosis count for every\n-- encounter_id in the stg_diagnosis model.\n-- The primary_dx_count can be any\n-- nonnegative integer: {0,1,2,3,...}\nall_primary_diagnosis_count as (\nselect\n    aa.encounter_id,\n    case\n        when bb.primary_dx_count is null then 0\n\telse bb.primary_dx_count\n    end as primary_dx_count\nfrom\n    all_encounter_ids aa\n    left join primary_diagnosis_count_greater_than_zero bb\n    on aa.encounter_id = bb.encounter_id\n)\n\n\n\nselect *\nfrom all_primary_diagnosis_count", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.readmissions.primary_diagnosis_count"}, "model.readmissions.readmissions__procedure_ccs": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.readmissions.readmissions__stg_procedure", "seed.terminology.terminology__icd_10_pcs", "seed.terminology.terminology__icd_10_pcs_to_ccs"]}, "config": {"enabled": true, "alias": "procedure_ccs", "schema": "readmissions", "database": "tuva", "tags": ["readmissions"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": "#161a7d"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "readmissions", "fqn": ["readmissions", "intermediate", "readmissions__procedure_ccs"], "unique_id": "model.readmissions.readmissions__procedure_ccs", "raw_code": "-- Here we map every procedure code to its corresponding\n-- CCS procedure category.\n-- This model may list more than one CCS procedure category\n-- per encounter_id because different procedures associated with the\n-- encounter (different rows on the stg_procedure model) may have\n-- different associated CCS procedure categories.\n\n\n{{ config(materialized='view'\n    ,enabled=var('readmissions_enabled',var('tuva_packages_enabled',True))) }}\n\n\n\n\nselect\n    aa.encounter_id,\n    aa.procedure_code,\n    case\n        when bb.icd_10_pcs is null then 0\n\telse 1\n    end as valid_icd_10_pcs_flag,\n    cc.ccs_procedure_category\nfrom\n    {{ ref('readmissions__stg_procedure') }} aa\n    left join {{ ref('terminology__icd_10_pcs') }} bb\n    on aa.procedure_code = bb.icd_10_pcs\n    left join {{ ref('terminology__icd_10_pcs_to_ccs') }} cc\n    on aa.procedure_code = cc.icd_10_pcs", "language": "sql", "package_name": "readmissions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\readmissions", "path": "intermediate\\readmissions__procedure_ccs.sql", "original_file_path": "models\\intermediate\\readmissions__procedure_ccs.sql", "name": "readmissions__procedure_ccs", "alias": "procedure_ccs", "checksum": {"name": "sha256", "checksum": "7169eca2c80b0c3f908f3c22342732850410e03890f7c0a3ab7932c956f0943d"}, "tags": ["readmissions"], "refs": [["readmissions__stg_procedure"], ["terminology__icd_10_pcs"], ["terminology__icd_10_pcs_to_ccs"]], "sources": [], "metrics": [], "description": "This model includes all procedures from the stg_procedure model and adds a valid_icd_10_pcs_flag to indicate if the ICD-10-PCS code for this procedure is valid. We also add the CCS procedure category associated with the procedure", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code": {"name": "procedure_code", "description": "An ICD-10-PCS code associated with this encounter_id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "valid_icd_10_pcs_flag": {"name": "valid_icd_10_pcs_flag", "description": "A flag indicating if the ICD-10-PCS procedure code given is valid", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ccs_procedure_category": {"name": "ccs_procedure_category", "description": "The CCS code associated with the given ICD-10-PCS procedure", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": false, "node_color": "#161a7d"}, "patch_path": "readmissions://models\\_models.yml", "compiled_path": "../target\\compiled\\readmissions\\models\\intermediate\\readmissions__procedure_ccs.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "readmissions", "alias": "procedure_ccs", "tags": "readmissions", "materialized": "view", "enabled": true, "docs": {"show": false}}, "created_at": 1674073790.144808, "compiled_code": "-- Here we map every procedure code to its corresponding\n-- CCS procedure category.\n-- This model may list more than one CCS procedure category\n-- per encounter_id because different procedures associated with the\n-- encounter (different rows on the stg_procedure model) may have\n-- different associated CCS procedure categories.\n\n\n\n\n\n\n\nselect\n    aa.encounter_id,\n    aa.procedure_code,\n    case\n        when bb.icd_10_pcs is null then 0\n\telse 1\n    end as valid_icd_10_pcs_flag,\n    cc.ccs_procedure_category\nfrom\n    tuva.readmissions.stg_procedure aa\n    left join tuva.terminology.icd_10_pcs bb\n    on aa.procedure_code = bb.icd_10_pcs\n    left join tuva.terminology.icd_10_pcs_to_ccs cc\n    on aa.procedure_code = cc.icd_10_pcs", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.readmissions.procedure_ccs"}, "model.readmissions.readmissions__readmission_crude": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.datediff"], "nodes": ["model.readmissions.readmissions__stg_encounter", "model.readmissions.readmissions__encounter_overlap", "model.readmissions.readmissions__encounter_overlap"]}, "config": {"enabled": true, "alias": "readmission_crude", "schema": "readmissions", "database": "tuva", "tags": ["readmissions"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": "#161a7d"}, "materialize": "table", "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "readmissions", "fqn": ["readmissions", "intermediate", "readmissions__readmission_crude"], "unique_id": "model.readmissions.readmissions__readmission_crude", "raw_code": "-- Here we calculate readmissions using all encounters\n-- that have valid admit and discharge dates and no overlap.\n-- This is meant to give a crude sense of the readmission\n-- rate without taking into account all the CMS HWR logic.\n\n\n{{ config(materialize='table'\n    ,enabled=var('readmissions_enabled',var('tuva_packages_enabled',True)))  }}\n\n\n\nwith encounter_info as (\nselect\n    encounter_id,\n    patient_id,\n    admit_date,\n    discharge_date\nfrom {{ ref('readmissions__stg_encounter') }}\nwhere\n    admit_date is not null\n    and\n    discharge_date is not null\n    and\n    admit_date <= discharge_date\n    and\n    encounter_id not in (select distinct encounter_id_A\n\t                         from {{ ref('readmissions__encounter_overlap') }} )\n    and\n    encounter_id not in (select distinct encounter_id_B\n\t                         from {{ ref('readmissions__encounter_overlap') }} )\n),\n\n\nencounter_sequence as (\nselect\n    encounter_id,\n    patient_id,\n    admit_date,\n    discharge_date,\n    row_number() over(\n        partition by patient_id order by admit_date, discharge_date\n    ) as encounter_seq\nfrom encounter_info\n),\n\n\nreadmission_calc as (\nselect\n    aa.encounter_id,\n    aa.patient_id,\n    aa.admit_date,\n    aa.discharge_date,\n    case\n        when bb.encounter_id is not null then 1\n\telse 0\n    end as had_readmission_flag,\n    bb.admit_date - aa.discharge_date as days_to_readmit,\n    case\n        when ({{ dbt.datediff(\"bb.admit_date\", \"aa.discharge_date\", \"day\") }}) <= 30  then 1\n\telse 0\n    end as readmit_30_flag\nfrom encounter_sequence aa left join encounter_sequence bb\n     on aa.patient_id = bb.patient_id\n     and aa.encounter_seq + 1 = bb.encounter_seq\n)\n\n\n\nselect *\nfrom readmission_calc", "language": "sql", "package_name": "readmissions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\readmissions", "path": "intermediate\\readmissions__readmission_crude.sql", "original_file_path": "models\\intermediate\\readmissions__readmission_crude.sql", "name": "readmissions__readmission_crude", "alias": "readmission_crude", "checksum": {"name": "sha256", "checksum": "98b5a2068306c83e70baaa22dfc080d7e3a8b501ad5381bb35d7edd6990f37b7"}, "tags": ["readmissions"], "refs": [["readmissions__stg_encounter"], ["readmissions__encounter_overlap"], ["readmissions__encounter_overlap"]], "sources": [], "metrics": [], "description": "This model lists all encounters and whether they had a 'crude' readmission, meaning that the encounter had a hospitalization after discharge, without regard to all CMS readmission logic.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "patient_id": {"name": "patient_id", "description": "The unique identifier for the patient", "meta": {}, "data_type": null, "quote": null, "tags": []}, "admit_date": {"name": "admit_date", "description": "The date of admission for the inpatient visit", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discharge_date": {"name": "discharge_date", "description": "", "meta": {}, "data_type": null, "quote": null, "tags": []}, "had_readmission_flag": {"name": "had_readmission_flag", "description": "A flag to indicate whether the encounter had a readmission any number of days after discharge", "meta": {}, "data_type": null, "quote": null, "tags": []}, "days_to_readmit": {"name": "days_to_readmit", "description": "An integer to indicate the number of days to readmission", "meta": {}, "data_type": null, "quote": null, "tags": []}, "readmit_30_flag": {"name": "readmit_30_flag", "description": "A flag to indicate whether the encounter had a 30-day readmission", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": false, "node_color": "#161a7d"}, "patch_path": "readmissions://models\\_models.yml", "compiled_path": "../target\\compiled\\readmissions\\models\\intermediate\\readmissions__readmission_crude.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "readmissions", "alias": "readmission_crude", "tags": "readmissions", "materialize": "table", "enabled": true, "docs": {"show": false}}, "created_at": 1674073790.166329, "compiled_code": "-- Here we calculate readmissions using all encounters\n-- that have valid admit and discharge dates and no overlap.\n-- This is meant to give a crude sense of the readmission\n-- rate without taking into account all the CMS HWR logic.\n\n\n\n\n\n\nwith encounter_info as (\nselect\n    encounter_id,\n    patient_id,\n    admit_date,\n    discharge_date\nfrom tuva.readmissions.stg_encounter\nwhere\n    admit_date is not null\n    and\n    discharge_date is not null\n    and\n    admit_date <= discharge_date\n    and\n    encounter_id not in (select distinct encounter_id_A\n\t                         from tuva.readmissions.encounter_overlap )\n    and\n    encounter_id not in (select distinct encounter_id_B\n\t                         from tuva.readmissions.encounter_overlap )\n),\n\n\nencounter_sequence as (\nselect\n    encounter_id,\n    patient_id,\n    admit_date,\n    discharge_date,\n    row_number() over(\n        partition by patient_id order by admit_date, discharge_date\n    ) as encounter_seq\nfrom encounter_info\n),\n\n\nreadmission_calc as (\nselect\n    aa.encounter_id,\n    aa.patient_id,\n    aa.admit_date,\n    aa.discharge_date,\n    case\n        when bb.encounter_id is not null then 1\n\telse 0\n    end as had_readmission_flag,\n    bb.admit_date - aa.discharge_date as days_to_readmit,\n    case\n        when (datediff(\n        day,\n        bb.admit_date,\n        aa.discharge_date\n        )) <= 30  then 1\n\telse 0\n    end as readmit_30_flag\nfrom encounter_sequence aa left join encounter_sequence bb\n     on aa.patient_id = bb.patient_id\n     and aa.encounter_seq + 1 = bb.encounter_seq\n)\n\n\n\nselect *\nfrom readmission_calc", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.readmissions.readmission_crude"}, "model.readmissions.readmissions__stg_diagnosis": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.type_string"], "nodes": ["model.claims_preprocessing.claims_preprocessing__condition"]}, "config": {"enabled": true, "alias": "stg_diagnosis", "schema": "readmissions", "database": "tuva", "tags": ["readmissions"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": "#161a7d"}, "materialize": "view", "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "readmissions", "fqn": ["readmissions", "staging", "readmissions__stg_diagnosis"], "unique_id": "model.readmissions.readmissions__stg_diagnosis", "raw_code": "-- Staging model for the input layer:\n-- stg_diagnosis input layer model.\n-- This contains one row for every unique diagnosis each patient has.\n\n\n{{ config(materialize='view'\n    ,enabled=var('readmissions_enabled',var('tuva_packages_enabled',True))) }}\n\n\n\nselect\n    cast(encounter_id as {{ dbt.type_string() }}) as encounter_id,\n    cast(code as {{ dbt.type_string() }}) as diagnosis_code,\n    cast(diagnosis_rank as integer) as diagnosis_rank\n\nfrom {{var('condition')}}\nwhere code_type = 'icd-10-cm' and condition_type = 'discharge diagnosis'", "language": "sql", "package_name": "readmissions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\readmissions", "path": "staging\\readmissions__stg_diagnosis.sql", "original_file_path": "models\\staging\\readmissions__stg_diagnosis.sql", "name": "readmissions__stg_diagnosis", "alias": "stg_diagnosis", "checksum": {"name": "sha256", "checksum": "eb3f23c77165499cf48a96b7b30b61ad5b26217e047ead401e19cda98b17a250"}, "tags": ["readmissions"], "refs": [["claims_preprocessing__condition"]], "sources": [], "metrics": [], "description": "This is a staging table for the input layer. Each row represents a unique diagnosis a patient got in an encouter. All diagnoses available in the input data set are present here.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_code": {"name": "diagnosis_code", "description": "An ICD-10-CM diagnosis code associated with this encounter_id", "meta": {}, "data_type": null, "quote": null, "tags": []}, "diagnosis_rank": {"name": "diagnosis_rank", "description": "A positive integer giving the diagnosis ranking for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": false, "node_color": "#161a7d"}, "patch_path": "readmissions://models\\_models.yml", "compiled_path": "../target\\compiled\\readmissions\\models\\staging\\readmissions__stg_diagnosis.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "readmissions", "alias": "stg_diagnosis", "tags": "readmissions", "materialize": "view", "enabled": true, "docs": {"show": false}}, "created_at": 1674073790.211406, "compiled_code": "-- Staging model for the input layer:\n-- stg_diagnosis input layer model.\n-- This contains one row for every unique diagnosis each patient has.\n\n\n\n\n\n\nselect\n    cast(encounter_id as TEXT) as encounter_id,\n    cast(code as TEXT) as diagnosis_code,\n    cast(diagnosis_rank as integer) as diagnosis_rank\n\nfrom tuva.core.condition\nwhere code_type = 'icd-10-cm' and condition_type = 'discharge diagnosis'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.readmissions.stg_diagnosis"}, "model.readmissions.readmissions__stg_encounter": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.type_string"], "nodes": ["model.claims_preprocessing.claims_preprocessing__encounter"]}, "config": {"enabled": true, "alias": "stg_encounter", "schema": "readmissions", "database": "tuva", "tags": ["readmissions"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": "#161a7d"}, "materialize": "view", "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "readmissions", "fqn": ["readmissions", "staging", "readmissions__stg_encounter"], "unique_id": "model.readmissions.readmissions__stg_encounter", "raw_code": "-- Staging model for the input layer:\n-- stg_encounter input layer model.\n-- This contains one row for every unique encounter in the dataset.\n\n\n{{ config(materialize='view'\n    ,enabled=var('readmissions_enabled',var('tuva_packages_enabled',True))) }}\n\n\n\nselect\n    cast(encounter_id as {{ dbt.type_string() }}) as encounter_id,\n    cast(patient_id as {{ dbt.type_string() }}) as patient_id,\n    cast(encounter_start_date as date) as admit_date,\n    cast(encounter_end_date as date) as discharge_date,\n    cast(discharge_disposition_code as {{ dbt.type_string() }}) as discharge_disposition_code,\n    cast(facility_npi as {{ dbt.type_string() }}) as facility_npi,\n    cast(ms_drg_code as {{ dbt.type_string() }}) as ms_drg_code\n    \nfrom {{ var('encounter') }}\nwhere encounter_type = 'acute inpatient'", "language": "sql", "package_name": "readmissions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\readmissions", "path": "staging\\readmissions__stg_encounter.sql", "original_file_path": "models\\staging\\readmissions__stg_encounter.sql", "name": "readmissions__stg_encounter", "alias": "stg_encounter", "checksum": {"name": "sha256", "checksum": "5be0bf0d90d9b870ae2162da8399367da5c74cd597a975a84a66960f9195119e"}, "tags": ["readmissions"], "refs": [["claims_preprocessing__encounter"]], "sources": [], "metrics": [], "description": "This is a staging table for the input layer. Each row represents a unique acute inpatient encounter.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "patient_id": {"name": "patient_id", "description": "The unique identifier for the patient", "meta": {}, "data_type": null, "quote": null, "tags": []}, "admit_date": {"name": "admit_date", "description": "The date of admission for the inpatient visit", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discharge_date": {"name": "discharge_date", "description": "The date of discharge for the inpatient visit", "meta": {}, "data_type": null, "quote": null, "tags": []}, "discharge_status_code": {"name": "discharge_status_code", "description": "The valid 2-digit discharge status for the inpatient visit", "meta": {}, "data_type": null, "quote": null, "tags": []}, "facility": {"name": "facility", "description": "A name or ID for the facility where the inpatient visit occured", "meta": {}, "data_type": null, "quote": null, "tags": []}, "ms_drg": {"name": "ms_drg", "description": "The MS-DRG associted with the inpatient visit", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": false, "node_color": "#161a7d"}, "patch_path": "readmissions://models\\_models.yml", "compiled_path": "../target\\compiled\\readmissions\\models\\staging\\readmissions__stg_encounter.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "readmissions", "alias": "stg_encounter", "tags": "readmissions", "materialize": "view", "enabled": true, "docs": {"show": false}}, "created_at": 1674073790.2349396, "compiled_code": "-- Staging model for the input layer:\n-- stg_encounter input layer model.\n-- This contains one row for every unique encounter in the dataset.\n\n\n\n\n\n\nselect\n    cast(encounter_id as TEXT) as encounter_id,\n    cast(patient_id as TEXT) as patient_id,\n    cast(encounter_start_date as date) as admit_date,\n    cast(encounter_end_date as date) as discharge_date,\n    cast(discharge_disposition_code as TEXT) as discharge_disposition_code,\n    cast(facility_npi as TEXT) as facility_npi,\n    cast(ms_drg_code as TEXT) as ms_drg_code\n    \nfrom tuva.core.encounter\nwhere encounter_type = 'acute inpatient'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.readmissions.stg_encounter"}, "model.readmissions.readmissions__stg_patient": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.type_string"], "nodes": ["model.claims_preprocessing.claims_preprocessing__patient"]}, "config": {"enabled": true, "alias": "stg_patient", "schema": "readmissions", "database": "tuva", "tags": ["readmissions"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": "#161a7d"}, "materialize": "view", "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "readmissions", "fqn": ["readmissions", "staging", "readmissions__stg_patient"], "unique_id": "model.readmissions.readmissions__stg_patient", "raw_code": "-- Staging model for the input layer:\n-- stg_patient input layer model.\n-- This contains one row for every unique patient in the dataset.\n\n\n{{ config(materialize='view'\n    ,enabled=var('readmissions_enabled',var('tuva_packages_enabled',True))) }}\n\n\n\nselect\n    cast(patient_id as {{ dbt.type_string() }}) as patient_id,\n    cast(gender as {{ dbt.type_string() }}) as gender,\n    cast(birth_date as date) as birth_date\n\nfrom {{ var('patient') }}", "language": "sql", "package_name": "readmissions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\readmissions", "path": "staging\\readmissions__stg_patient.sql", "original_file_path": "models\\staging\\readmissions__stg_patient.sql", "name": "readmissions__stg_patient", "alias": "stg_patient", "checksum": {"name": "sha256", "checksum": "81478bb527cf2121c0da1bbdf09d915e327cf2f53062243fb64036ff294268b9"}, "tags": ["readmissions"], "refs": [["claims_preprocessing__patient"]], "sources": [], "metrics": [], "description": "This is a staging table for the input layer. Each row represents a unique patient.", "columns": {"patient_id": {"name": "patient_id", "description": "The unique identifier for the patient", "meta": {}, "data_type": null, "quote": null, "tags": []}, "gender": {"name": "gender", "description": "The patient's gender", "meta": {}, "data_type": null, "quote": null, "tags": []}, "birth_date": {"name": "birth_date", "description": "The date of birth of the patient", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": false, "node_color": "#161a7d"}, "patch_path": "readmissions://models\\_models.yml", "compiled_path": "../target\\compiled\\readmissions\\models\\staging\\readmissions__stg_patient.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "readmissions", "alias": "stg_patient", "tags": "readmissions", "materialize": "view", "enabled": true, "docs": {"show": false}}, "created_at": 1674073790.251505, "compiled_code": "-- Staging model for the input layer:\n-- stg_patient input layer model.\n-- This contains one row for every unique patient in the dataset.\n\n\n\n\n\n\nselect\n    cast(patient_id as TEXT) as patient_id,\n    cast(gender as TEXT) as gender,\n    cast(birth_date as date) as birth_date\n\nfrom tuva.core.patient", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.readmissions.stg_patient"}, "model.readmissions.readmissions__stg_procedure": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt.type_string"], "nodes": ["model.claims_preprocessing.claims_preprocessing__procedure"]}, "config": {"enabled": true, "alias": "stg_procedure", "schema": "readmissions", "database": "tuva", "tags": ["readmissions"], "meta": {}, "materialized": "view", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": false, "node_color": "#161a7d"}, "materialize": "view", "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "readmissions", "fqn": ["readmissions", "staging", "readmissions__stg_procedure"], "unique_id": "model.readmissions.readmissions__stg_procedure", "raw_code": "-- Staging model for the input layer:\n-- stg_procedure input layer model.\n-- This contains one row for every unique procedure each patient has.\n\n\n{{ config(materialize='view'\n    ,enabled=var('readmissions_enabled',var('tuva_packages_enabled',True))) }}\n\n\n\nselect\n    cast(encounter_id as {{ dbt.type_string() }}) as encounter_id,\n    cast(code as {{ dbt.type_string() }}) as procedure_code\n\nfrom {{ var('procedure') }}\nwhere code_type = 'icd-10-pcs'", "language": "sql", "package_name": "readmissions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\readmissions", "path": "staging\\readmissions__stg_procedure.sql", "original_file_path": "models\\staging\\readmissions__stg_procedure.sql", "name": "readmissions__stg_procedure", "alias": "stg_procedure", "checksum": {"name": "sha256", "checksum": "c79dcad6fb33799ef1b43d925f013794887192cfd339fbc5f826ff3ef219066a"}, "tags": ["readmissions"], "refs": [["claims_preprocessing__procedure"]], "sources": [], "metrics": [], "description": "This is a staging table for the input layer. Each row represents a unique procedure a patient got in an encouter. All procedures available in the input data set are present here.", "columns": {"encounter_id": {"name": "encounter_id", "description": "The unique identifier for the encounter", "meta": {}, "data_type": null, "quote": null, "tags": []}, "procedure_code": {"name": "procedure_code", "description": "An ICD-10-PCS code associated with this encounter_id", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": false, "node_color": "#161a7d"}, "patch_path": "readmissions://models\\_models.yml", "compiled_path": "../target\\compiled\\readmissions\\models\\staging\\readmissions__stg_procedure.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "readmissions", "alias": "stg_procedure", "tags": "readmissions", "materialize": "view", "enabled": true, "docs": {"show": false}}, "created_at": 1674073790.2640262, "compiled_code": "-- Staging model for the input layer:\n-- stg_procedure input layer model.\n-- This contains one row for every unique procedure each patient has.\n\n\n\n\n\n\nselect\n    cast(encounter_id as TEXT) as encounter_id,\n    cast(code as TEXT) as procedure_code\n\nfrom tuva.core.procedure\nwhere code_type = 'icd-10-pcs'", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.readmissions.stg_procedure"}, "seed.terminology.terminology__admit_source": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "admit_source", "schema": "terminology", "database": "tuva", "tags": ["terminology", "claims_preprocessing"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"admit_source_code": "varchar", "admit_source_description": "varchar", "newborn_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#460d4f"}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__admit_source"], "unique_id": "seed.terminology.terminology__admit_source", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\terminology", "path": "terminology__admit_source.csv", "original_file_path": "terminology\\terminology__admit_source.csv", "name": "terminology__admit_source", "alias": "admit_source", "checksum": {"name": "sha256", "checksum": "392e0c1935973dbea2e96030db856a8ccfa660cbd51f45c92d51d121aa432a8b"}, "tags": ["terminology", "claims_preprocessing"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#460d4f"}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "admit_source", "enabled": true, "tags": ["terminology", "claims_preprocessing"], "column_types": {"admit_source_code": "varchar", "admit_source_description": "varchar", "newborn_description": "varchar"}, "docs": {"node_color": "#460d4f"}}, "created_at": 1674073790.3712566, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.admit_source"}, "seed.terminology.terminology__admit_type": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "admit_type", "schema": "terminology", "database": "tuva", "tags": ["terminology", "claims_preprocessing"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"admit_type_code": "varchar", "admit_type_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#460d4f"}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__admit_type"], "unique_id": "seed.terminology.terminology__admit_type", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\terminology", "path": "terminology__admit_type.csv", "original_file_path": "terminology\\terminology__admit_type.csv", "name": "terminology__admit_type", "alias": "admit_type", "checksum": {"name": "sha256", "checksum": "0fba96cde9676541c9205364a2e2285efa0e9500507a4bcc7b790a982c9482ac"}, "tags": ["terminology", "claims_preprocessing"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#460d4f"}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "admit_type", "enabled": true, "tags": ["terminology", "claims_preprocessing"], "column_types": {"admit_type_code": "varchar", "admit_type_description": "varchar"}, "docs": {"node_color": "#460d4f"}}, "created_at": 1674073790.4068158, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.admit_type"}, "seed.terminology.terminology__bill_type": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "bill_type", "schema": "terminology", "database": "tuva", "tags": ["terminology", "data_profiling"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"bill_type_code": "varchar", "bill_type_description": "varchar", "deprecated": "integer", "deprecated_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#460d4f"}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__bill_type"], "unique_id": "seed.terminology.terminology__bill_type", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\terminology", "path": "terminology__bill_type.csv", "original_file_path": "terminology\\terminology__bill_type.csv", "name": "terminology__bill_type", "alias": "bill_type", "checksum": {"name": "sha256", "checksum": "8b363106ed8e54488d71b8f4ccfca6e371692e836ef77b335621df6bf63b9a8a"}, "tags": ["terminology", "data_profiling"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#460d4f"}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "bill_type", "enabled": true, "tags": ["terminology", "data_profiling"], "column_types": {"bill_type_code": "varchar", "bill_type_description": "varchar", "deprecated": "integer", "deprecated_date": "date"}, "docs": {"node_color": "#460d4f"}}, "created_at": 1674073790.478645, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.bill_type"}, "seed.terminology.terminology__claim_type": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "claim_type", "schema": "terminology", "database": "tuva", "tags": ["terminology", "data_profiling"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"claim_type_code": "varchar", "claim_type_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#460d4f"}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__claim_type"], "unique_id": "seed.terminology.terminology__claim_type", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\terminology", "path": "terminology__claim_type.csv", "original_file_path": "terminology\\terminology__claim_type.csv", "name": "terminology__claim_type", "alias": "claim_type", "checksum": {"name": "sha256", "checksum": "da35be4c432144ba8003d5ef8f2d815d8afce6ed215d6aa065e305ad11f7552c"}, "tags": ["terminology", "data_profiling"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#460d4f"}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "claim_type", "enabled": true, "tags": ["terminology", "data_profiling"], "column_types": {"claim_type_code": "varchar", "claim_type_description": "varchar"}, "docs": {"node_color": "#460d4f"}}, "created_at": 1674073790.5422118, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.claim_type"}, "seed.terminology.terminology__cms_chronic_conditions": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "cms_chronic_conditions", "schema": "terminology", "database": "tuva", "tags": ["terminology", "cms_chronic_conditions"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"condition_id": "varchar", "condition": "varchar", "condition_column_name": "varchar", "chronic_condition_type": "varchar", "condition_category": "varchar", "additional_logic": "varchar(1000)", "claims_qualification": "varchar(1000)", "inclusion_type": "varchar", "code_system": "varchar", "code": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#460d4f"}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__cms_chronic_conditions"], "unique_id": "seed.terminology.terminology__cms_chronic_conditions", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\terminology", "path": "terminology__cms_chronic_conditions.csv", "original_file_path": "terminology\\terminology__cms_chronic_conditions.csv", "name": "terminology__cms_chronic_conditions", "alias": "cms_chronic_conditions", "checksum": {"name": "path", "checksum": "terminology\\terminology__cms_chronic_conditions.csv"}, "tags": ["terminology", "cms_chronic_conditions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#460d4f"}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "cms_chronic_conditions", "enabled": true, "tags": ["terminology", "cms_chronic_conditions"], "column_types": {"condition_id": "varchar", "condition": "varchar", "condition_column_name": "varchar", "chronic_condition_type": "varchar", "condition_category": "varchar", "additional_logic": "varchar(1000)", "claims_qualification": "varchar(1000)", "inclusion_type": "varchar", "code_system": "varchar", "code": "varchar"}, "docs": {"node_color": "#460d4f"}}, "created_at": 1674073790.5246894, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.cms_chronic_conditions"}, "seed.terminology.terminology__code_type": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "code_type", "schema": "terminology", "database": "tuva", "tags": ["terminology"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#460d4f"}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__code_type"], "unique_id": "seed.terminology.terminology__code_type", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\terminology", "path": "terminology__code_type.csv", "original_file_path": "terminology\\terminology__code_type.csv", "name": "terminology__code_type", "alias": "code_type", "checksum": {"name": "sha256", "checksum": "5fe9aa562e036ca6f98866fe29d85c1f2351f53d00fdde631ad8dce183ce5788"}, "tags": ["terminology"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#460d4f"}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "code_type", "enabled": true, "tags": "terminology", "column_types": {"description": "varchar"}, "docs": {"node_color": "#460d4f"}}, "created_at": 1674073790.5557299, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.code_type"}, "seed.terminology.terminology__discharge_disposition": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "discharge_disposition", "schema": "terminology", "database": "tuva", "tags": ["terminology", "claims_preprocessing", "readmissions", "data_profiling"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"discharge_disposition_code": "varchar", "discharge_disposition_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#460d4f"}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__discharge_disposition"], "unique_id": "seed.terminology.terminology__discharge_disposition", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\terminology", "path": "terminology__discharge_disposition.csv", "original_file_path": "terminology\\terminology__discharge_disposition.csv", "name": "terminology__discharge_disposition", "alias": "discharge_disposition", "checksum": {"name": "sha256", "checksum": "992cf51c8d6a2dfe3d3f54e65bf618e68599ed2f48bcf75d59ee8bdd48d1aa0e"}, "tags": ["terminology", "claims_preprocessing", "readmissions", "data_profiling"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#460d4f"}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "discharge_disposition", "enabled": true, "tags": ["terminology", "claims_preprocessing", "readmissions", "data_profiling"], "column_types": {"discharge_disposition_code": "varchar", "discharge_disposition_description": "varchar"}, "docs": {"node_color": "#460d4f"}}, "created_at": 1674073790.5794635, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.discharge_disposition"}, "seed.terminology.terminology__encounter_type": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "encounter_type", "schema": "terminology", "database": "tuva", "tags": ["terminology", "claims_preprocessing"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#460d4f"}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__encounter_type"], "unique_id": "seed.terminology.terminology__encounter_type", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\terminology", "path": "terminology__encounter_type.csv", "original_file_path": "terminology\\terminology__encounter_type.csv", "name": "terminology__encounter_type", "alias": "encounter_type", "checksum": {"name": "sha256", "checksum": "d75ee477d89a9d8d679a9fcc64ce29975b9fe6eea1ad094d2e60d62e5b011c3c"}, "tags": ["terminology", "claims_preprocessing"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#460d4f"}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "encounter_type", "enabled": true, "tags": ["terminology", "claims_preprocessing"], "column_types": {"description": "varchar"}, "docs": {"node_color": "#460d4f"}}, "created_at": 1674073790.5949912, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.encounter_type"}, "seed.terminology.terminology__ethnicity": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "ethnicity", "schema": "terminology", "database": "tuva", "tags": ["terminology"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"code": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#460d4f"}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__ethnicity"], "unique_id": "seed.terminology.terminology__ethnicity", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\terminology", "path": "terminology__ethnicity.csv", "original_file_path": "terminology\\terminology__ethnicity.csv", "name": "terminology__ethnicity", "alias": "ethnicity", "checksum": {"name": "sha256", "checksum": "d23c1e3d7417d569bbb1e11cd0a493cfd60f60e231756adb2f7b6160ca2f93e6"}, "tags": ["terminology"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#460d4f"}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "ethnicity", "enabled": true, "tags": "terminology", "column_types": {"code": "varchar", "description": "varchar"}, "docs": {"node_color": "#460d4f"}}, "created_at": 1674073790.60799, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.ethnicity"}, "seed.terminology.terminology__fips_county": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "fips_county", "schema": "terminology", "database": "tuva", "tags": ["terminology"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"fips_code": "varchar", "county": "varchar", "state": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#460d4f"}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__fips_county"], "unique_id": "seed.terminology.terminology__fips_county", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\terminology", "path": "terminology__fips_county.csv", "original_file_path": "terminology\\terminology__fips_county.csv", "name": "terminology__fips_county", "alias": "fips_county", "checksum": {"name": "sha256", "checksum": "51c80da82ec1f20665fbd65379796c53f724781fa3833396cba093c89004bfb5"}, "tags": ["terminology"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#460d4f"}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "fips_county", "enabled": true, "tags": "terminology", "column_types": {"fips_code": "varchar", "county": "varchar", "state": "varchar"}, "docs": {"node_color": "#460d4f"}}, "created_at": 1674073790.6465669, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.fips_county"}, "seed.terminology.terminology__fips_state": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "fips_state", "schema": "terminology", "database": "tuva", "tags": ["terminology"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"fips_code": "varchar", "abbreviation": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#460d4f"}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__fips_state"], "unique_id": "seed.terminology.terminology__fips_state", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\terminology", "path": "terminology__fips_state.csv", "original_file_path": "terminology\\terminology__fips_state.csv", "name": "terminology__fips_state", "alias": "fips_state", "checksum": {"name": "sha256", "checksum": "2208d05e654084a3cff054be9aa2b340fe76e8fee9af380406ce0fa3fe592a89"}, "tags": ["terminology"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#460d4f"}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "fips_state", "enabled": true, "tags": "terminology", "column_types": {"fips_code": "varchar", "abbreviation": "varchar", "description": "varchar"}, "docs": {"node_color": "#460d4f"}}, "created_at": 1674073790.660087, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.fips_state"}, "seed.terminology.terminology__gender": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "gender", "schema": "terminology", "database": "tuva", "tags": ["terminology", "data_profiling"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#460d4f"}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__gender"], "unique_id": "seed.terminology.terminology__gender", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\terminology", "path": "terminology__gender.csv", "original_file_path": "terminology\\terminology__gender.csv", "name": "terminology__gender", "alias": "gender", "checksum": {"name": "sha256", "checksum": "49caad564a6d46cabcbbaa25857984aa1f7d4426ed5927989cdeddc1539d6fb6"}, "tags": ["terminology", "data_profiling"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#460d4f"}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "gender", "enabled": true, "tags": ["terminology", "data_profiling"], "column_types": {"description": "varchar"}, "docs": {"node_color": "#460d4f"}}, "created_at": 1674073790.6756005, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.gender"}, "seed.terminology.terminology__hcpcs_level_2": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "hcpcs_level_2", "schema": "terminology", "database": "tuva", "tags": ["terminology"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"hcpcs": "varchar", "seqnum": "varchar", "recid": "varchar", "long_description": "varchar(2000)", "short_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#460d4f"}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__hcpcs_level_2"], "unique_id": "seed.terminology.terminology__hcpcs_level_2", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\terminology", "path": "terminology__hcpcs_level_2.csv", "original_file_path": "terminology\\terminology__hcpcs_level_2.csv", "name": "terminology__hcpcs_level_2", "alias": "hcpcs_level_2", "checksum": {"name": "path", "checksum": "terminology\\terminology__hcpcs_level_2.csv"}, "tags": ["terminology"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#460d4f"}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "hcpcs_level_2", "enabled": true, "tags": "terminology", "column_types": {"hcpcs": "varchar", "seqnum": "varchar", "recid": "varchar", "long_description": "varchar(2000)", "short_description": "varchar"}, "docs": {"node_color": "#460d4f"}}, "created_at": 1674073790.6976774, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.hcpcs_level_2"}, "seed.terminology.terminology__icd_10_cm": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "icd_10_cm", "schema": "terminology", "database": "tuva", "tags": ["terminology", "claims_preprocessing", "readmissions", "data_profiling"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"icd_10_cm": "varchar", "valid_flag": "varchar", "short_description": "varchar", "long_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#460d4f"}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__icd_10_cm"], "unique_id": "seed.terminology.terminology__icd_10_cm", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\terminology", "path": "terminology__icd_10_cm.csv", "original_file_path": "terminology\\terminology__icd_10_cm.csv", "name": "terminology__icd_10_cm", "alias": "icd_10_cm", "checksum": {"name": "path", "checksum": "terminology\\terminology__icd_10_cm.csv"}, "tags": ["terminology", "claims_preprocessing", "readmissions", "data_profiling"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#460d4f"}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "icd_10_cm", "enabled": true, "tags": ["terminology", "claims_preprocessing", "readmissions", "data_profiling"], "column_types": {"icd_10_cm": "varchar", "valid_flag": "varchar", "short_description": "varchar", "long_description": "varchar"}, "docs": {"node_color": "#460d4f"}}, "created_at": 1674073790.7222028, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.icd_10_cm"}, "seed.terminology.terminology__icd_10_pcs": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "icd_10_pcs", "schema": "terminology", "database": "tuva", "tags": ["terminology", "claims_preprocessing", "readmissions"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"icd_10_pcs": "varchar", "valid_flag": "varchar", "short_description": "varchar", "long_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#460d4f"}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__icd_10_pcs"], "unique_id": "seed.terminology.terminology__icd_10_pcs", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\terminology", "path": "terminology__icd_10_pcs.csv", "original_file_path": "terminology\\terminology__icd_10_pcs.csv", "name": "terminology__icd_10_pcs", "alias": "icd_10_pcs", "checksum": {"name": "path", "checksum": "terminology\\terminology__icd_10_pcs.csv"}, "tags": ["terminology", "claims_preprocessing", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#460d4f"}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "icd_10_pcs", "enabled": true, "tags": ["terminology", "claims_preprocessing", "readmissions"], "column_types": {"icd_10_pcs": "varchar", "valid_flag": "varchar", "short_description": "varchar", "long_description": "varchar"}, "docs": {"node_color": "#460d4f"}}, "created_at": 1674073790.7637792, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.icd_10_pcs"}, "seed.terminology.terminology__mdc": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "mdc", "schema": "terminology", "database": "tuva", "tags": ["terminology"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"mdc_code": "varchar", "mcd_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#460d4f"}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__mdc"], "unique_id": "seed.terminology.terminology__mdc", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\terminology", "path": "terminology__mdc.csv", "original_file_path": "terminology\\terminology__mdc.csv", "name": "terminology__mdc", "alias": "mdc", "checksum": {"name": "sha256", "checksum": "c941d78a6e4de2c32b546a46f0b0c429bb209a9e1a7049a803cf8c447c73d0d6"}, "tags": ["terminology"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#460d4f"}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "mdc", "enabled": true, "tags": "terminology", "column_types": {"mdc_code": "varchar", "mcd_description": "varchar"}, "docs": {"node_color": "#460d4f"}}, "created_at": 1674073790.7973547, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.mdc"}, "seed.terminology.terminology__medicare_dual_eligibility": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "medicare_dual_eligibility", "schema": "terminology", "database": "tuva", "tags": ["terminology", "claims_preprocessing"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"dual_status_code": "varchar", "dual_status_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#460d4f"}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__medicare_dual_eligibility"], "unique_id": "seed.terminology.terminology__medicare_dual_eligibility", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\terminology", "path": "terminology__medicare_dual_eligibility.csv", "original_file_path": "terminology\\terminology__medicare_dual_eligibility.csv", "name": "terminology__medicare_dual_eligibility", "alias": "medicare_dual_eligibility", "checksum": {"name": "sha256", "checksum": "db7415a91cd31bbf2318963aa717b319319516bdc8426e2ebb2e78db002cb58d"}, "tags": ["terminology", "claims_preprocessing"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#460d4f"}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "medicare_dual_eligibility", "enabled": true, "tags": ["terminology", "claims_preprocessing"], "column_types": {"dual_status_code": "varchar", "dual_status_description": "varchar"}, "docs": {"node_color": "#460d4f"}}, "created_at": 1674073790.814893, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.medicare_dual_eligibility"}, "seed.terminology.terminology__medicare_state_fips": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "medicare_state_fips", "schema": "terminology", "database": "tuva", "tags": ["terminology", "medicare_cclf_connector"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"fips_code": "varchar", "state": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#460d4f"}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__medicare_state_fips"], "unique_id": "seed.terminology.terminology__medicare_state_fips", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\terminology", "path": "terminology__medicare_state_fips.csv", "original_file_path": "terminology\\terminology__medicare_state_fips.csv", "name": "terminology__medicare_state_fips", "alias": "medicare_state_fips", "checksum": {"name": "sha256", "checksum": "66012b041d1956dca6bf24bc25e691d419e458b1e6b54bb13d8bf5ff802ba2d9"}, "tags": ["terminology", "medicare_cclf_connector"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#460d4f"}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "medicare_state_fips", "enabled": true, "tags": ["terminology", "medicare_cclf_connector"], "column_types": {"fips_code": "varchar", "state": "varchar"}, "docs": {"node_color": "#460d4f"}}, "created_at": 1674073790.8314555, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.medicare_state_fips"}, "seed.terminology.terminology__medicare_status": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "medicare_status", "schema": "terminology", "database": "tuva", "tags": ["terminology", "claims_preprocessing"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"medicare_status_code": "varchar", "medicare_status_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#460d4f"}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__medicare_status"], "unique_id": "seed.terminology.terminology__medicare_status", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\terminology", "path": "terminology__medicare_status.csv", "original_file_path": "terminology\\terminology__medicare_status.csv", "name": "terminology__medicare_status", "alias": "medicare_status", "checksum": {"name": "sha256", "checksum": "2bd1a8a081fceb69bf91287c8a56c370ea1544a1fbbe12829566955012c04c97"}, "tags": ["terminology", "claims_preprocessing"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#460d4f"}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "medicare_status", "enabled": true, "tags": ["terminology", "claims_preprocessing"], "column_types": {"medicare_status_code": "varchar", "medicare_status_description": "varchar"}, "docs": {"node_color": "#460d4f"}}, "created_at": 1674073790.847234, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.medicare_status"}, "seed.terminology.terminology__ms_drg": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "ms_drg", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions", "data_profiling", "claims_preprocessing"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ms_drg_code": "varchar", "mdc_code": "varchar", "medical_surgical": "varchar", "ms_drg_description": "varchar", "deprecated": "integer", "deprecated_date": "date"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#460d4f"}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__ms_drg"], "unique_id": "seed.terminology.terminology__ms_drg", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\terminology", "path": "terminology__ms_drg.csv", "original_file_path": "terminology\\terminology__ms_drg.csv", "name": "terminology__ms_drg", "alias": "ms_drg", "checksum": {"name": "sha256", "checksum": "63740ef5cb6d40d8b4f261a59de820df7f8d80ca96989194348b1874f65861d6"}, "tags": ["terminology", "readmissions", "data_profiling", "claims_preprocessing"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#460d4f"}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "ms_drg", "enabled": true, "tags": ["terminology", "readmissions", "data_profiling", "claims_preprocessing"], "column_types": {"ms_drg_code": "varchar", "mdc_code": "varchar", "medical_surgical": "varchar", "ms_drg_description": "varchar", "deprecated": "integer", "deprecated_date": "date"}, "docs": {"node_color": "#460d4f"}}, "created_at": 1674073790.868735, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.ms_drg"}, "seed.terminology.terminology__payer_type": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "payer_type", "schema": "terminology", "database": "tuva", "tags": ["terminology"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"payer_type": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#460d4f"}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__payer_type"], "unique_id": "seed.terminology.terminology__payer_type", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\terminology", "path": "terminology__payer_type.csv", "original_file_path": "terminology\\terminology__payer_type.csv", "name": "terminology__payer_type", "alias": "payer_type", "checksum": {"name": "sha256", "checksum": "b79b79e782eb2d68211a9f375c0c1aebc9828449c51f77297e8e70c51a6827e0"}, "tags": ["terminology"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#460d4f"}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "payer_type", "enabled": true, "tags": "terminology", "column_types": {"payer_type": "varchar"}, "docs": {"node_color": "#460d4f"}}, "created_at": 1674073790.8817797, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.payer_type"}, "seed.terminology.terminology__place_of_service": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "place_of_service", "schema": "terminology", "database": "tuva", "tags": ["terminology", "claims_preprocessing", "data_profiling"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"place_of_service_code": "varchar", "place_of_service_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#460d4f"}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__place_of_service"], "unique_id": "seed.terminology.terminology__place_of_service", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\terminology", "path": "terminology__place_of_service.csv", "original_file_path": "terminology\\terminology__place_of_service.csv", "name": "terminology__place_of_service", "alias": "place_of_service", "checksum": {"name": "sha256", "checksum": "760955a3ad21bd2c8f4257881e8f713276eda10623bb05f373634ff186ea8592"}, "tags": ["terminology", "claims_preprocessing", "data_profiling"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#460d4f"}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "place_of_service", "enabled": true, "tags": ["terminology", "claims_preprocessing", "data_profiling"], "column_types": {"place_of_service_code": "varchar", "place_of_service_description": "varchar"}, "docs": {"node_color": "#460d4f"}}, "created_at": 1674073790.8992884, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.place_of_service"}, "seed.terminology.terminology__present_on_admission": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "present_on_admission", "schema": "terminology", "database": "tuva", "tags": ["terminology", "data_profiling", "claims_preprocessing"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"present_on_admit_code": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#460d4f"}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__present_on_admission"], "unique_id": "seed.terminology.terminology__present_on_admission", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\terminology", "path": "terminology__present_on_admission.csv", "original_file_path": "terminology\\terminology__present_on_admission.csv", "name": "terminology__present_on_admission", "alias": "present_on_admission", "checksum": {"name": "sha256", "checksum": "4a0669b7aed638378b8cde6a1e4d0202071923c695ecba93cf266d7c1b206d8e"}, "tags": ["terminology", "data_profiling", "claims_preprocessing"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#460d4f"}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "present_on_admission", "enabled": true, "tags": ["terminology", "data_profiling", "claims_preprocessing"], "column_types": {"present_on_admit_code": "varchar", "description": "varchar"}, "docs": {"node_color": "#460d4f"}}, "created_at": 1674073790.9533262, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.present_on_admission"}, "seed.terminology.terminology__race": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "race", "schema": "terminology", "database": "tuva", "tags": ["terminology"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"race_code": "varchar", "race_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#460d4f"}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__race"], "unique_id": "seed.terminology.terminology__race", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\terminology", "path": "terminology__race.csv", "original_file_path": "terminology\\terminology__race.csv", "name": "terminology__race", "alias": "race", "checksum": {"name": "sha256", "checksum": "267e1246e929209855c8128566cb1eadc21f878998bf5ee3fd36b50a76e2da2c"}, "tags": ["terminology"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#460d4f"}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "race", "enabled": true, "tags": "terminology", "column_types": {"race_code": "varchar", "race_description": "varchar"}, "docs": {"node_color": "#460d4f"}}, "created_at": 1674073790.9725952, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.race"}, "seed.terminology.terminology__revenue_center": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "revenue_center", "schema": "terminology", "database": "tuva", "tags": ["terminology", "claims_preprocessing", "data_profiling"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"revenue_center_code": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#460d4f"}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "terminology__revenue_center"], "unique_id": "seed.terminology.terminology__revenue_center", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\terminology", "path": "terminology__revenue_center.csv", "original_file_path": "terminology\\terminology__revenue_center.csv", "name": "terminology__revenue_center", "alias": "revenue_center", "checksum": {"name": "sha256", "checksum": "6d630994900478a2efc0f63fa4045b387bd020cb519fac04ba16b32fb11a1647"}, "tags": ["terminology", "claims_preprocessing", "data_profiling"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#460d4f"}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "revenue_center", "enabled": true, "tags": ["terminology", "claims_preprocessing", "data_profiling"], "column_types": {"revenue_center_code": "varchar", "description": "varchar"}, "docs": {"node_color": "#460d4f"}}, "created_at": 1674073790.9919903, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.revenue_center"}, "seed.terminology.terminology__acute_diagnosis_ccs": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "acute_diagnosis_ccs", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ccs_diagnosis_category": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#460d4f"}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__acute_diagnosis_ccs"], "unique_id": "seed.terminology.terminology__acute_diagnosis_ccs", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\terminology", "path": "readmissions\\terminology__acute_diagnosis_ccs.csv", "original_file_path": "terminology\\readmissions\\terminology__acute_diagnosis_ccs.csv", "name": "terminology__acute_diagnosis_ccs", "alias": "acute_diagnosis_ccs", "checksum": {"name": "sha256", "checksum": "654779d4a8e08465f9037d8e544b7a4c96053a6daefaa6d7fe56496b31ef25e4"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#460d4f"}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "acute_diagnosis_ccs", "enabled": true, "tags": ["terminology", "readmissions"], "column_types": {"ccs_diagnosis_category": "varchar", "description": "varchar"}, "docs": {"node_color": "#460d4f"}}, "created_at": 1674073790.3176892, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.acute_diagnosis_ccs"}, "seed.terminology.terminology__acute_diagnosis_icd_10_cm": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "acute_diagnosis_icd_10_cm", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"icd_10_cm": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#460d4f"}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__acute_diagnosis_icd_10_cm"], "unique_id": "seed.terminology.terminology__acute_diagnosis_icd_10_cm", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\terminology", "path": "readmissions\\terminology__acute_diagnosis_icd_10_cm.csv", "original_file_path": "terminology\\readmissions\\terminology__acute_diagnosis_icd_10_cm.csv", "name": "terminology__acute_diagnosis_icd_10_cm", "alias": "acute_diagnosis_icd_10_cm", "checksum": {"name": "path", "checksum": "terminology\\readmissions\\terminology__acute_diagnosis_icd_10_cm.csv"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#460d4f"}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "acute_diagnosis_icd_10_cm", "enabled": true, "tags": ["terminology", "readmissions"], "column_types": {"icd_10_cm": "varchar", "description": "varchar"}, "docs": {"node_color": "#460d4f"}}, "created_at": 1674073790.3432212, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.acute_diagnosis_icd_10_cm"}, "seed.terminology.terminology__always_planned_ccs_diagnosis_category": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "always_planned_ccs_diagnosis_category", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ccs_diagnosis_category": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#460d4f"}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__always_planned_ccs_diagnosis_category"], "unique_id": "seed.terminology.terminology__always_planned_ccs_diagnosis_category", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\terminology", "path": "readmissions\\terminology__always_planned_ccs_diagnosis_category.csv", "original_file_path": "terminology\\readmissions\\terminology__always_planned_ccs_diagnosis_category.csv", "name": "terminology__always_planned_ccs_diagnosis_category", "alias": "always_planned_ccs_diagnosis_category", "checksum": {"name": "sha256", "checksum": "3ec5bc59c274f64708e2b16e9eff3db72230522289dd3f21567956d2070b3be2"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#460d4f"}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "always_planned_ccs_diagnosis_category", "enabled": true, "tags": ["terminology", "readmissions"], "column_types": {"ccs_diagnosis_category": "varchar", "description": "varchar"}, "docs": {"node_color": "#460d4f"}}, "created_at": 1674073790.4243371, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.always_planned_ccs_diagnosis_category"}, "seed.terminology.terminology__always_planned_ccs_procedure_category": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "always_planned_ccs_procedure_category", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ccs_procedure_category": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#460d4f"}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__always_planned_ccs_procedure_category"], "unique_id": "seed.terminology.terminology__always_planned_ccs_procedure_category", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\terminology", "path": "readmissions\\terminology__always_planned_ccs_procedure_category.csv", "original_file_path": "terminology\\readmissions\\terminology__always_planned_ccs_procedure_category.csv", "name": "terminology__always_planned_ccs_procedure_category", "alias": "always_planned_ccs_procedure_category", "checksum": {"name": "sha256", "checksum": "af9918830532c9dd37924853c29502d8c9f14bbb1a380de74cfcc740b0ba48b7"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#460d4f"}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "always_planned_ccs_procedure_category", "enabled": true, "tags": ["terminology", "readmissions"], "column_types": {"ccs_procedure_category": "varchar", "description": "varchar"}, "docs": {"node_color": "#460d4f"}}, "created_at": 1674073790.4500957, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.always_planned_ccs_procedure_category"}, "seed.terminology.terminology__exclusion_ccs_diagnosis_category": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "exclusion_ccs_diagnosis_category", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ccs_diagnosis_category": "varchar", "description": "varchar", "exclusion_category": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#460d4f"}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__exclusion_ccs_diagnosis_category"], "unique_id": "seed.terminology.terminology__exclusion_ccs_diagnosis_category", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\terminology", "path": "readmissions\\terminology__exclusion_ccs_diagnosis_category.csv", "original_file_path": "terminology\\readmissions\\terminology__exclusion_ccs_diagnosis_category.csv", "name": "terminology__exclusion_ccs_diagnosis_category", "alias": "exclusion_ccs_diagnosis_category", "checksum": {"name": "sha256", "checksum": "4bacd904ef0767100c7371e367970c9b25139aae994d3b020ceee61a7aa1e0a7"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#460d4f"}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "exclusion_ccs_diagnosis_category", "enabled": true, "tags": ["terminology", "readmissions"], "column_types": {"ccs_diagnosis_category": "varchar", "description": "varchar", "exclusion_category": "varchar"}, "docs": {"node_color": "#460d4f"}}, "created_at": 1674073790.6310353, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.exclusion_ccs_diagnosis_category"}, "seed.terminology.terminology__icd_10_cm_to_ccs": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "icd_10_cm_to_ccs", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"icd_10_cm": "varchar", "description": "varchar", "ccs_diagnosis_category": "varchar", "ccs_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#460d4f"}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__icd_10_cm_to_ccs"], "unique_id": "seed.terminology.terminology__icd_10_cm_to_ccs", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\terminology", "path": "readmissions\\terminology__icd_10_cm_to_ccs.csv", "original_file_path": "terminology\\readmissions\\terminology__icd_10_cm_to_ccs.csv", "name": "terminology__icd_10_cm_to_ccs", "alias": "icd_10_cm_to_ccs", "checksum": {"name": "path", "checksum": "terminology\\readmissions\\terminology__icd_10_cm_to_ccs.csv"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#460d4f"}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "icd_10_cm_to_ccs", "enabled": true, "tags": ["terminology", "readmissions"], "column_types": {"icd_10_cm": "varchar", "description": "varchar", "ccs_diagnosis_category": "varchar", "ccs_description": "varchar"}, "docs": {"node_color": "#460d4f"}}, "created_at": 1674073790.7397285, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.icd_10_cm_to_ccs"}, "seed.terminology.terminology__icd_10_pcs_to_ccs": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "icd_10_pcs_to_ccs", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"icd_10_pcs": "varchar", "description": "varchar", "ccs_procedure_category": "varchar", "ccs_description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#460d4f"}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__icd_10_pcs_to_ccs"], "unique_id": "seed.terminology.terminology__icd_10_pcs_to_ccs", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\terminology", "path": "readmissions\\terminology__icd_10_pcs_to_ccs.csv", "original_file_path": "terminology\\readmissions\\terminology__icd_10_pcs_to_ccs.csv", "name": "terminology__icd_10_pcs_to_ccs", "alias": "icd_10_pcs_to_ccs", "checksum": {"name": "path", "checksum": "terminology\\readmissions\\terminology__icd_10_pcs_to_ccs.csv"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#460d4f"}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "icd_10_pcs_to_ccs", "enabled": true, "tags": ["terminology", "readmissions"], "column_types": {"icd_10_pcs": "varchar", "description": "varchar", "ccs_procedure_category": "varchar", "ccs_description": "varchar"}, "docs": {"node_color": "#460d4f"}}, "created_at": 1674073790.7838233, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.icd_10_pcs_to_ccs"}, "seed.terminology.terminology__potentially_planned_ccs_procedure_category": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "potentially_planned_ccs_procedure_category", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ccs_procedure_category": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#460d4f"}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__potentially_planned_ccs_procedure_category"], "unique_id": "seed.terminology.terminology__potentially_planned_ccs_procedure_category", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\terminology", "path": "readmissions\\terminology__potentially_planned_ccs_procedure_category.csv", "original_file_path": "terminology\\readmissions\\terminology__potentially_planned_ccs_procedure_category.csv", "name": "terminology__potentially_planned_ccs_procedure_category", "alias": "potentially_planned_ccs_procedure_category", "checksum": {"name": "sha256", "checksum": "7b9db975327ccef9eb004256f6dac2d16248422f0c189d1c79b19826f793afd5"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#460d4f"}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "potentially_planned_ccs_procedure_category", "enabled": true, "tags": ["terminology", "readmissions"], "column_types": {"ccs_procedure_category": "varchar", "description": "varchar"}, "docs": {"node_color": "#460d4f"}}, "created_at": 1674073790.9139721, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.potentially_planned_ccs_procedure_category"}, "seed.terminology.terminology__potentially_planned_icd_10_pcs": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "potentially_planned_icd_10_pcs", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"icd_10_pcs": "varchar", "description": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#460d4f"}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__potentially_planned_icd_10_pcs"], "unique_id": "seed.terminology.terminology__potentially_planned_icd_10_pcs", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\terminology", "path": "readmissions\\terminology__potentially_planned_icd_10_pcs.csv", "original_file_path": "terminology\\readmissions\\terminology__potentially_planned_icd_10_pcs.csv", "name": "terminology__potentially_planned_icd_10_pcs", "alias": "potentially_planned_icd_10_pcs", "checksum": {"name": "sha256", "checksum": "d3b577c57486f9fa6d12cd8b7da4c54d8f2f6996d19d35ca169e5861f12c031f"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#460d4f"}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "potentially_planned_icd_10_pcs", "enabled": true, "tags": ["terminology", "readmissions"], "column_types": {"icd_10_pcs": "varchar", "description": "varchar"}, "docs": {"node_color": "#460d4f"}}, "created_at": 1674073790.9357607, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.potentially_planned_icd_10_pcs"}, "seed.terminology.terminology__specialty_cohort": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "specialty_cohort", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"ccs": "varchar", "description": "varchar", "specialty_cohort": "varchar", "procedure_or_diagnosis": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#460d4f"}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__specialty_cohort"], "unique_id": "seed.terminology.terminology__specialty_cohort", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\terminology", "path": "readmissions\\terminology__specialty_cohort.csv", "original_file_path": "terminology\\readmissions\\terminology__specialty_cohort.csv", "name": "terminology__specialty_cohort", "alias": "specialty_cohort", "checksum": {"name": "sha256", "checksum": "f4c090fe63477ea354c6a36dd54816fe76cdead723bbb39aeeba640a319c6d8d"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#460d4f"}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "specialty_cohort", "enabled": true, "tags": ["terminology", "readmissions"], "column_types": {"ccs": "varchar", "description": "varchar", "specialty_cohort": "varchar", "procedure_or_diagnosis": "varchar"}, "docs": {"node_color": "#460d4f"}}, "created_at": 1674073791.0085824, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.specialty_cohort"}, "seed.terminology.terminology__surgery_gynecology_cohort": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "surgery_gynecology_cohort", "schema": "terminology", "database": "tuva", "tags": ["terminology", "readmissions"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {"icd_10_pcs": "varchar", "description": "varchar", "ccs_code_and_description": "varchar", "specialty_cohort": "varchar"}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#460d4f"}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "terminology", "fqn": ["terminology", "readmissions", "terminology__surgery_gynecology_cohort"], "unique_id": "seed.terminology.terminology__surgery_gynecology_cohort", "raw_code": "", "language": "sql", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\terminology", "path": "readmissions\\terminology__surgery_gynecology_cohort.csv", "original_file_path": "terminology\\readmissions\\terminology__surgery_gynecology_cohort.csv", "name": "terminology__surgery_gynecology_cohort", "alias": "surgery_gynecology_cohort", "checksum": {"name": "sha256", "checksum": "aebcfa4c5a82d3af091d8d223b26ca9349da581228f32f0d59a7754343199a58"}, "tags": ["terminology", "readmissions"], "refs": [], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#460d4f"}, "patch_path": "terminology://terminology\\_seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "terminology", "alias": "surgery_gynecology_cohort", "enabled": true, "tags": ["terminology", "readmissions"], "column_types": {"icd_10_pcs": "varchar", "description": "varchar", "ccs_code_and_description": "varchar", "specialty_cohort": "varchar"}, "docs": {"node_color": "#460d4f"}}, "created_at": 1674073791.027619, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.terminology.surgery_gynecology_cohort"}, "model.tuva_chronic_conditions.tuva_chronic_conditions__chronic_conditions_long": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["model.claims_preprocessing.claims_preprocessing__condition", "seed.tuva_chronic_conditions.tuva_chronic_conditions__chronic_conditions_hierarchy"]}, "config": {"enabled": true, "alias": "final_chronic_conditions_long", "schema": "tuva_chronic_conditions", "database": "tuva", "tags": ["tuva_chronic_conditions"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#804912"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "tuva_chronic_conditions", "fqn": ["tuva_chronic_conditions", "tuva_chronic_conditions__chronic_conditions_long"], "unique_id": "model.tuva_chronic_conditions.tuva_chronic_conditions__chronic_conditions_long", "raw_code": "{{ config(enabled = var('tuva_chronic_conditions_enabled',var('tuva_packages_enabled',True)) ) }}\n\nwith condition_row_number as\n(\n    select \n        patient_id\n        ,code\n        ,condition_date\n        ,row_number() over(partition by patient_id, code order by condition_date asc) as rn_asc\n        ,row_number() over(partition by patient_id, code order by condition_date desc) as rn_desc\n    from {{var('condition')}}\n)\n, patient_conditions as\n(\n    select \n        patient_id\n        ,code as icd_10_cm\n        ,max(case when rn_asc = 1 then condition_date end) as first_diagnosis_date\n        ,max(case when rn_desc = 1 then condition_date end) as last_diagnosis_date    \n    from condition_row_number\n    group by \n        patient_id\n        ,code\n)  \n\nselect \n    pc.patient_id\n    ,h.condition_family\n    ,h.condition\n    ,min(first_diagnosis_date) as first_diagnosis_date\n    ,max(last_diagnosis_date) as last_diagnosis_date\nfrom {{ref('tuva_chronic_conditions__chronic_conditions_hierarchy')}} h\ninner join patient_conditions pc\n    on h.icd_10_cm_code = pc.icd_10_cm\ngroup by \n    pc.patient_id\n    ,h.condition_family\n    ,h.condition", "language": "sql", "package_name": "tuva_chronic_conditions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\tuva_chronic_conditions", "path": "tuva_chronic_conditions__chronic_conditions_long.sql", "original_file_path": "models\\tuva_chronic_conditions__chronic_conditions_long.sql", "name": "tuva_chronic_conditions__chronic_conditions_long", "alias": "final_chronic_conditions_long", "checksum": {"name": "sha256", "checksum": "e891c12b9d63517ebc7a4135692f44f8f055e1bd5bc0de5b97b0a8c3efe73c28"}, "tags": ["tuva_chronic_conditions"], "refs": [["claims_preprocessing__condition"], ["tuva_chronic_conditions__chronic_conditions_hierarchy"]], "sources": [], "metrics": [], "description": "This model creates one record per patient per condition using the tuva chronic conditions hierarchy  as the grouper. The model pulls in the first and last date of the diagnosis that flagged the patient for this condition group.\n", "columns": {"patient_id": {"name": "patient_id", "description": "The unique identifier for a patient", "meta": {}, "data_type": null, "quote": null, "tags": []}, "condition_family": {"name": "condition_family", "description": "A higher level rollup grouping of conditions from the condition column", "meta": {}, "data_type": null, "quote": null, "tags": []}, "condition": {"name": "condition", "description": "The name of the condition that each diagnosis code rolls up to", "meta": {}, "data_type": null, "quote": null, "tags": []}, "first_diagnosis_date": {"name": "first_diagnosis_date", "description": "The first date when a diagnosis code that rolls up to this condition was coded to this patient", "meta": {}, "data_type": null, "quote": null, "tags": []}, "last_diagnosis_date": {"name": "last_diagnosis_date", "description": "The last date when a diagnosis code that rolls up to this condition was coded to this patient", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": "#804912"}, "patch_path": "tuva_chronic_conditions://models\\_models.yml", "compiled_path": "../target\\compiled\\tuva_chronic_conditions\\models\\tuva_chronic_conditions__chronic_conditions_long.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "tuva_chronic_conditions", "alias": "final_chronic_conditions_long", "tags": "tuva_chronic_conditions", "materialized": "table", "enabled": true, "docs": {"node_color": "#804912"}}, "created_at": 1674073791.0799687, "compiled_code": "\n\nwith condition_row_number as\n(\n    select \n        patient_id\n        ,code\n        ,condition_date\n        ,row_number() over(partition by patient_id, code order by condition_date asc) as rn_asc\n        ,row_number() over(partition by patient_id, code order by condition_date desc) as rn_desc\n    from tuva.core.condition\n)\n, patient_conditions as\n(\n    select \n        patient_id\n        ,code as icd_10_cm\n        ,max(case when rn_asc = 1 then condition_date end) as first_diagnosis_date\n        ,max(case when rn_desc = 1 then condition_date end) as last_diagnosis_date    \n    from condition_row_number\n    group by \n        patient_id\n        ,code\n)  \n\nselect \n    pc.patient_id\n    ,h.condition_family\n    ,h.condition\n    ,min(first_diagnosis_date) as first_diagnosis_date\n    ,max(last_diagnosis_date) as last_diagnosis_date\nfrom tuva.tuva_chronic_conditions.chronic_conditions_hierarchy h\ninner join patient_conditions pc\n    on h.icd_10_cm_code = pc.icd_10_cm\ngroup by \n    pc.patient_id\n    ,h.condition_family\n    ,h.condition", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.tuva_chronic_conditions.final_chronic_conditions_long"}, "model.tuva_chronic_conditions.tuva_chronic_conditions__chronic_conditions_wide": {"compiled": true, "resource_type": "model", "depends_on": {"macros": ["macro.dbt_utils.get_column_values", "macro.dbt_utils.pivot"], "nodes": ["seed.tuva_chronic_conditions.tuva_chronic_conditions__chronic_conditions_hierarchy", "seed.tuva_chronic_conditions.tuva_chronic_conditions__chronic_conditions_hierarchy", "model.tuva_chronic_conditions.tuva_chronic_conditions__chronic_conditions_long"]}, "config": {"enabled": true, "alias": "final_chronic_conditions_wide", "schema": "tuva_chronic_conditions", "database": "tuva", "tags": ["tuva_chronic_conditions"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#804912"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "tuva_chronic_conditions", "fqn": ["tuva_chronic_conditions", "tuva_chronic_conditions__chronic_conditions_wide"], "unique_id": "model.tuva_chronic_conditions.tuva_chronic_conditions__chronic_conditions_wide", "raw_code": "{{ config(enabled = var('tuva_chronic_conditions_enabled',var('tuva_packages_enabled',True)) ) }}\n\nwith condition_columns as\n    (select distinct condition, condition_column_name from {{ ref('tuva_chronic_conditions__chronic_conditions_hierarchy')}})\n\nselect\n    patient_id\n    , {{ dbt_utils.pivot(\n          column='cc.condition_column_name'\n        , values=dbt_utils.get_column_values(ref('tuva_chronic_conditions__chronic_conditions_hierarchy'), 'condition_column_name','condition_column_name')\n        , agg='max'\n        , then_value= 1\n        , else_value= 0\n      ) }}\nfrom {{ ref('tuva_chronic_conditions__chronic_conditions_long') }} l\ninner join condition_columns cc\n    on l.condition = cc.condition\ngroup by\n    patient_id", "language": "sql", "package_name": "tuva_chronic_conditions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\tuva_chronic_conditions", "path": "tuva_chronic_conditions__chronic_conditions_wide.sql", "original_file_path": "models\\tuva_chronic_conditions__chronic_conditions_wide.sql", "name": "tuva_chronic_conditions__chronic_conditions_wide", "alias": "final_chronic_conditions_wide", "checksum": {"name": "sha256", "checksum": "de4fd03d796e8c52a989e945097cde439f9414949d207e3d6f31fe924f0ecff4"}, "tags": ["tuva_chronic_conditions"], "refs": [["tuva_chronic_conditions__chronic_conditions_hierarchy"], ["tuva_chronic_conditions__chronic_conditions_hierarchy"], ["tuva_chronic_conditions__chronic_conditions_long"]], "sources": [], "metrics": [], "description": "This model creates one record per patient with flags for all the conditions in the tuva chronic conditions hierarchy. A patient will have a 1 in the column for a certain condition if they have every been coded with a diagnosis that rolls up to that condition and a 0 if not.", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": "#804912"}, "patch_path": "tuva_chronic_conditions://models\\_models.yml", "compiled_path": "../target\\compiled\\tuva_chronic_conditions\\models\\tuva_chronic_conditions__chronic_conditions_wide.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "tuva_chronic_conditions", "alias": "final_chronic_conditions_wide", "tags": "tuva_chronic_conditions", "materialized": "table", "enabled": true, "docs": {"node_color": "#804912"}}, "created_at": 1674073791.0889697, "compiled_code": "\n\nwith condition_columns as\n    (select distinct condition, condition_column_name from tuva.tuva_chronic_conditions.chronic_conditions_hierarchy)\n\nselect\n    patient_id\n    , \n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'acute_myocardial_infarction'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"acute_myocardial_infarction\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'alcohol'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"alcohol\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'alzheimers_disease'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"alzheimers_disease\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'amyotrophic_lateral_sclerosis'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"amyotrophic_lateral_sclerosis\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'anxiety'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"anxiety\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'asthma'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"asthma\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'atherosclerosis'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"atherosclerosis\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'atrial_fibrillation'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"atrial_fibrillation\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'attention_deficit_hyperactivity_disorder'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"attention_deficit_hyperactivity_disorder\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'bipolar'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"bipolar\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'breast_cancer'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"breast_cancer\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'chronic_kidney_disease'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"chronic_kidney_disease\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'chronic_obstructive_pulmonary_disease'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"chronic_obstructive_pulmonary_disease\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'cocaine'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"cocaine\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'colorectal_cancer'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"colorectal_cancer\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'crohns_disease'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"crohns_disease\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'cystic_fibrosis'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"cystic_fibrosis\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'dementia'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"dementia\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'depression'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"depression\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'heart_failure'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"heart_failure\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'hyperlipidemia'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"hyperlipidemia\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'hypertension'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"hypertension\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'lung_cancer'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"lung_cancer\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'lupus'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"lupus\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'metabolic_syndrome'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"metabolic_syndrome\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'multiple_sclerosis'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"multiple_sclerosis\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'muscular_dystrophy'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"muscular_dystrophy\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'obesity'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"obesity\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'obsessive_compulsive_disorder'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"obsessive_compulsive_disorder\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'opioid'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"opioid\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'parkinsons_disease'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"parkinsons_disease\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'personality_disorder'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"personality_disorder\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'post_traumatic_stress_disorder'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"post_traumatic_stress_disorder\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'rheumatoid_arthritis'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"rheumatoid_arthritis\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'schizophrenia'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"schizophrenia\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'stroke'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"stroke\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'tobacco'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"tobacco\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'type_1_diabetes'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"type_1_diabetes\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'type_2_diabetes'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"type_2_diabetes\"\n      \n    \n    ,\n  \n    max(\n      \n      case\n      when cc.condition_column_name = 'ulcerative_colitis'\n        then 1\n      else 0\n      end\n    )\n    \n      \n            as \"ulcerative_colitis\"\n      \n    \n    \n  \n\nfrom tuva.tuva_chronic_conditions.final_chronic_conditions_long l\ninner join condition_columns cc\n    on l.condition = cc.condition\ngroup by\n    patient_id", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.tuva_chronic_conditions.final_chronic_conditions_wide"}, "model.tuva_chronic_conditions.tuva_chronic_conditions__chronic_condition_groups": {"compiled": true, "resource_type": "model", "depends_on": {"macros": [], "nodes": ["seed.tuva_chronic_conditions.tuva_chronic_conditions__chronic_conditions_hierarchy"]}, "config": {"enabled": true, "alias": "final_chronic_condition_groups", "schema": "tuva_chronic_conditions", "database": "tuva", "tags": ["tuva_chronic_conditions"], "meta": {}, "materialized": "table", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#804912"}, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "tuva_chronic_conditions", "fqn": ["tuva_chronic_conditions", "tuva_chronic_conditions__chronic_condition_groups"], "unique_id": "model.tuva_chronic_conditions.tuva_chronic_conditions__chronic_condition_groups", "raw_code": "{{ config(enabled = var('tuva_chronic_conditions_enabled',var('tuva_packages_enabled',True)) ) }}\n\nselect distinct \n    condition_family\n    ,condition\nfrom {{ref('tuva_chronic_conditions__chronic_conditions_hierarchy')}}\norder by \n    condition_family\n    ,condition", "language": "sql", "package_name": "tuva_chronic_conditions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\tuva_chronic_conditions", "path": "tuva_chronic_conditions__chronic_condition_groups.sql", "original_file_path": "models\\tuva_chronic_conditions__chronic_condition_groups.sql", "name": "tuva_chronic_conditions__chronic_condition_groups", "alias": "final_chronic_condition_groups", "checksum": {"name": "sha256", "checksum": "250ce8f6042944ab89535ee64608176c92c1e0382a9340a6a7f9ec4e996bba97"}, "tags": ["tuva_chronic_conditions"], "refs": [["tuva_chronic_conditions__chronic_conditions_hierarchy"]], "sources": [], "metrics": [], "description": "This model rolls up the chronic conditions hierarchy one level to just show the conditions and condition families.\n", "columns": {"condition_family": {"name": "condition_family", "description": "A higher level rollup grouping of conditions from the condition column", "meta": {}, "data_type": null, "quote": null, "tags": []}, "condition": {"name": "condition", "description": "The name of the condition that each diagnosis code rolls up into", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": "#804912"}, "patch_path": "tuva_chronic_conditions://models\\_models.yml", "compiled_path": "../target\\compiled\\tuva_chronic_conditions\\models\\tuva_chronic_conditions__chronic_condition_groups.sql", "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "tuva_chronic_conditions", "alias": "final_chronic_condition_groups", "tags": "tuva_chronic_conditions", "materialized": "table", "enabled": true, "docs": {"node_color": "#804912"}}, "created_at": 1674073791.0687413, "compiled_code": "\n\nselect distinct \n    condition_family\n    ,condition\nfrom tuva.tuva_chronic_conditions.chronic_conditions_hierarchy\norder by \n    condition_family\n    ,condition", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.tuva_chronic_conditions.final_chronic_condition_groups"}, "seed.tuva_chronic_conditions.tuva_chronic_conditions__chronic_conditions_hierarchy": {"compiled": true, "resource_type": "seed", "depends_on": {"macros": [], "nodes": []}, "config": {"enabled": true, "alias": "chronic_conditions_hierarchy", "schema": "tuva_chronic_conditions", "database": "tuva", "tags": ["tuva_chronic_conditions"], "meta": {}, "materialized": "seed", "incremental_strategy": null, "persist_docs": {}, "quoting": {}, "column_types": {}, "full_refresh": null, "unique_key": null, "on_schema_change": "ignore", "grants": {}, "packages": [], "docs": {"show": true, "node_color": "#804912"}, "quote_columns": null, "post-hook": [], "pre-hook": []}, "database": "tuva", "schema": "tuva_chronic_conditions", "fqn": ["tuva_chronic_conditions", "tuva_chronic_conditions__chronic_conditions_hierarchy"], "unique_id": "seed.tuva_chronic_conditions.tuva_chronic_conditions__chronic_conditions_hierarchy", "raw_code": "", "language": "sql", "package_name": "tuva_chronic_conditions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\tuva_chronic_conditions", "path": "tuva_chronic_conditions__chronic_conditions_hierarchy.csv", "original_file_path": "seeds\\tuva_chronic_conditions__chronic_conditions_hierarchy.csv", "name": "tuva_chronic_conditions__chronic_conditions_hierarchy", "alias": "chronic_conditions_hierarchy", "checksum": {"name": "sha256", "checksum": "b73db4ca7467e8e5b8ba3e8dda13348f44868cac07f6147cca428b43c356bf59"}, "tags": ["tuva_chronic_conditions"], "refs": [], "sources": [], "metrics": [], "description": "A list of the diagnoses codes and their long and short names along with grouping logic classifying each code into a condition group and a condition family group.", "columns": {"condition_family": {"name": "condition_family", "description": "A higher level rollup grouping of conditions from the condition column", "meta": {}, "data_type": null, "quote": null, "tags": []}, "condition": {"name": "condition", "description": "The name of the condition that each diagnosis code rolls up into", "meta": {}, "data_type": null, "quote": null, "tags": []}, "icd_10_cm_code": {"name": "icd_10_cm_code", "description": "The icd10 code", "meta": {}, "data_type": null, "quote": null, "tags": []}, "icd_10_cm_description": {"name": "icd_10_cm_description", "description": "The description for the icd10 code", "meta": {}, "data_type": null, "quote": null, "tags": []}, "condition_column_name": {"name": "condition_column_name", "description": "The name of the column as it will appear in chronic_conditions_wide", "meta": {}, "data_type": null, "quote": null, "tags": []}}, "meta": {}, "docs": {"show": true, "node_color": "#804912"}, "patch_path": "tuva_chronic_conditions://seeds\\seeds.yml", "compiled_path": null, "build_path": null, "deferred": false, "unrendered_config": {"database": "tuva", "schema": "tuva_chronic_conditions", "enabled": true, "alias": "chronic_conditions_hierarchy", "tags": "tuva_chronic_conditions", "docs": {"node_color": "#804912"}}, "created_at": 1674073791.0571463, "compiled_code": "", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": "tuva.tuva_chronic_conditions.chronic_conditions_hierarchy"}, "test.cms_chronic_conditions.unique_cms_chronic_conditions__chronic_conditions_pivoted_patient_id.2c77d8b310": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "patient_id", "model": "{{ get_where_subquery(ref('cms_chronic_conditions__chronic_conditions_pivoted')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.cms_chronic_conditions.cms_chronic_conditions__chronic_conditions_pivoted"]}, "config": {"enabled": true, "alias": "unique_cms_chronic_conditions__47a4f767b9649785b8722ba3bfbe731f", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "tuva", "schema": "dbt_test__audit", "fqn": ["cms_chronic_conditions", "unique_cms_chronic_conditions__chronic_conditions_pivoted_patient_id"], "unique_id": "test.cms_chronic_conditions.unique_cms_chronic_conditions__chronic_conditions_pivoted_patient_id.2c77d8b310", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_cms_chronic_conditions__47a4f767b9649785b8722ba3bfbe731f\") }}", "language": "sql", "package_name": "cms_chronic_conditions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\cms_chronic_conditions", "path": "unique_cms_chronic_conditions__47a4f767b9649785b8722ba3bfbe731f.sql", "original_file_path": "models\\_models.yml", "name": "unique_cms_chronic_conditions__chronic_conditions_pivoted_patient_id", "alias": "unique_cms_chronic_conditions__47a4f767b9649785b8722ba3bfbe731f", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["cms_chronic_conditions__chronic_conditions_pivoted"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "../target\\compiled\\cms_chronic_conditions\\models\\_models.yml\\unique_cms_chronic_conditions__47a4f767b9649785b8722ba3bfbe731f.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_cms_chronic_conditions__47a4f767b9649785b8722ba3bfbe731f"}, "created_at": 1674073789.373608, "compiled_code": "\n    \n    \n\nselect\n    patient_id as unique_field,\n    count(*) as n_records\n\nfrom tuva.cms_chronic_conditions.chronic_conditions_pivoted\nwhere patient_id is not null\ngroup by patient_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "patient_id", "file_key_name": "models.cms_chronic_conditions__chronic_conditions_pivoted"}, "test.cms_chronic_conditions.not_null_cms_chronic_conditions__chronic_conditions_pivoted_patient_id.666f627a33": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "patient_id", "model": "{{ get_where_subquery(ref('cms_chronic_conditions__chronic_conditions_pivoted')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.cms_chronic_conditions.cms_chronic_conditions__chronic_conditions_pivoted"]}, "config": {"enabled": true, "alias": "not_null_cms_chronic_condition_54742ff72ebd30d2983126848324c5ab", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "tuva", "schema": "dbt_test__audit", "fqn": ["cms_chronic_conditions", "not_null_cms_chronic_conditions__chronic_conditions_pivoted_patient_id"], "unique_id": "test.cms_chronic_conditions.not_null_cms_chronic_conditions__chronic_conditions_pivoted_patient_id.666f627a33", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_cms_chronic_condition_54742ff72ebd30d2983126848324c5ab\") }}", "language": "sql", "package_name": "cms_chronic_conditions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\cms_chronic_conditions", "path": "not_null_cms_chronic_condition_54742ff72ebd30d2983126848324c5ab.sql", "original_file_path": "models\\_models.yml", "name": "not_null_cms_chronic_conditions__chronic_conditions_pivoted_patient_id", "alias": "not_null_cms_chronic_condition_54742ff72ebd30d2983126848324c5ab", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["cms_chronic_conditions__chronic_conditions_pivoted"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "../target\\compiled\\cms_chronic_conditions\\models\\_models.yml\\not_null_cms_chronic_condition_54742ff72ebd30d2983126848324c5ab.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_cms_chronic_condition_54742ff72ebd30d2983126848324c5ab"}, "created_at": 1674073789.3791368, "compiled_code": "\n    \n    \n\n\n\nselect patient_id\nfrom tuva.cms_chronic_conditions.chronic_conditions_pivoted\nwhere patient_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "patient_id", "file_key_name": "models.cms_chronic_conditions__chronic_conditions_pivoted"}, "test.cms_chronic_conditions.not_null_cms_chronic_conditions__chronic_conditions_unioned_patient_id.08dd497b51": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "patient_id", "model": "{{ get_where_subquery(ref('cms_chronic_conditions__chronic_conditions_unioned')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.cms_chronic_conditions.cms_chronic_conditions__chronic_conditions_unioned"]}, "config": {"enabled": true, "alias": "not_null_cms_chronic_condition_f65e69528c0646821ea54f5bdd4cafa2", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "tuva", "schema": "dbt_test__audit", "fqn": ["cms_chronic_conditions", "not_null_cms_chronic_conditions__chronic_conditions_unioned_patient_id"], "unique_id": "test.cms_chronic_conditions.not_null_cms_chronic_conditions__chronic_conditions_unioned_patient_id.08dd497b51", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_cms_chronic_condition_f65e69528c0646821ea54f5bdd4cafa2\") }}", "language": "sql", "package_name": "cms_chronic_conditions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\cms_chronic_conditions", "path": "not_null_cms_chronic_condition_f65e69528c0646821ea54f5bdd4cafa2.sql", "original_file_path": "models\\_models.yml", "name": "not_null_cms_chronic_conditions__chronic_conditions_unioned_patient_id", "alias": "not_null_cms_chronic_condition_f65e69528c0646821ea54f5bdd4cafa2", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["cms_chronic_conditions__chronic_conditions_unioned"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "../target\\compiled\\cms_chronic_conditions\\models\\_models.yml\\not_null_cms_chronic_condition_f65e69528c0646821ea54f5bdd4cafa2.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_cms_chronic_condition_f65e69528c0646821ea54f5bdd4cafa2"}, "created_at": 1674073789.3832088, "compiled_code": "\n    \n    \n\n\n\nselect patient_id\nfrom tuva.cms_chronic_conditions.chronic_conditions_unioned\nwhere patient_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "patient_id", "file_key_name": "models.cms_chronic_conditions__chronic_conditions_unioned"}, "test.cms_chronic_conditions.not_null_cms_chronic_conditions__chronic_conditions_unioned_encounter_id.a8e999f203": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "encounter_id", "model": "{{ get_where_subquery(ref('cms_chronic_conditions__chronic_conditions_unioned')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.cms_chronic_conditions.cms_chronic_conditions__chronic_conditions_unioned"]}, "config": {"enabled": true, "alias": "not_null_cms_chronic_condition_c6cb89fe27d837dcb4889f3b71db1afd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "tuva", "schema": "dbt_test__audit", "fqn": ["cms_chronic_conditions", "not_null_cms_chronic_conditions__chronic_conditions_unioned_encounter_id"], "unique_id": "test.cms_chronic_conditions.not_null_cms_chronic_conditions__chronic_conditions_unioned_encounter_id.a8e999f203", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_cms_chronic_condition_c6cb89fe27d837dcb4889f3b71db1afd\") }}", "language": "sql", "package_name": "cms_chronic_conditions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\cms_chronic_conditions", "path": "not_null_cms_chronic_condition_c6cb89fe27d837dcb4889f3b71db1afd.sql", "original_file_path": "models\\_models.yml", "name": "not_null_cms_chronic_conditions__chronic_conditions_unioned_encounter_id", "alias": "not_null_cms_chronic_condition_c6cb89fe27d837dcb4889f3b71db1afd", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["cms_chronic_conditions__chronic_conditions_unioned"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "../target\\compiled\\cms_chronic_conditions\\models\\_models.yml\\not_null_cms_chronic_condition_c6cb89fe27d837dcb4889f3b71db1afd.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_cms_chronic_condition_c6cb89fe27d837dcb4889f3b71db1afd"}, "created_at": 1674073789.3882098, "compiled_code": "\n    \n    \n\n\n\nselect encounter_id\nfrom tuva.cms_chronic_conditions.chronic_conditions_unioned\nwhere encounter_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "encounter_id", "file_key_name": "models.cms_chronic_conditions__chronic_conditions_unioned"}, "test.cms_chronic_conditions.not_null_cms_chronic_conditions__chronic_conditions_unioned_condition.5ab705f521": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "condition", "model": "{{ get_where_subquery(ref('cms_chronic_conditions__chronic_conditions_unioned')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.cms_chronic_conditions.cms_chronic_conditions__chronic_conditions_unioned"]}, "config": {"enabled": true, "alias": "not_null_cms_chronic_condition_98fb1ce79a55ad16301ec4357d7f6b38", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "tuva", "schema": "dbt_test__audit", "fqn": ["cms_chronic_conditions", "not_null_cms_chronic_conditions__chronic_conditions_unioned_condition"], "unique_id": "test.cms_chronic_conditions.not_null_cms_chronic_conditions__chronic_conditions_unioned_condition.5ab705f521", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_cms_chronic_condition_98fb1ce79a55ad16301ec4357d7f6b38\") }}", "language": "sql", "package_name": "cms_chronic_conditions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\cms_chronic_conditions", "path": "not_null_cms_chronic_condition_98fb1ce79a55ad16301ec4357d7f6b38.sql", "original_file_path": "models\\_models.yml", "name": "not_null_cms_chronic_conditions__chronic_conditions_unioned_condition", "alias": "not_null_cms_chronic_condition_98fb1ce79a55ad16301ec4357d7f6b38", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["cms_chronic_conditions__chronic_conditions_unioned"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "../target\\compiled\\cms_chronic_conditions\\models\\_models.yml\\not_null_cms_chronic_condition_98fb1ce79a55ad16301ec4357d7f6b38.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_cms_chronic_condition_98fb1ce79a55ad16301ec4357d7f6b38"}, "created_at": 1674073789.3931372, "compiled_code": "\n    \n    \n\n\n\nselect condition\nfrom tuva.cms_chronic_conditions.chronic_conditions_unioned\nwhere condition is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "condition", "file_key_name": "models.cms_chronic_conditions__chronic_conditions_unioned"}, "test.cms_chronic_conditions.unique_cms_chronic_conditions__chronic_conditions_unioned__patient_id_encounter_id_encounter_start_date_condition_.4c857f3bb8": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(patient_id || encounter_id || encounter_start_date || condition)", "model": "{{ get_where_subquery(ref('cms_chronic_conditions__chronic_conditions_unioned')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.cms_chronic_conditions.cms_chronic_conditions__chronic_conditions_unioned"]}, "config": {"enabled": true, "alias": "unique_cms_chronic_conditions__2e2d8c3850845c2c34a7586fa4a2c4da", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "tuva", "schema": "dbt_test__audit", "fqn": ["cms_chronic_conditions", "unique_cms_chronic_conditions__chronic_conditions_unioned__patient_id_encounter_id_encounter_start_date_condition_"], "unique_id": "test.cms_chronic_conditions.unique_cms_chronic_conditions__chronic_conditions_unioned__patient_id_encounter_id_encounter_start_date_condition_.4c857f3bb8", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_cms_chronic_conditions__2e2d8c3850845c2c34a7586fa4a2c4da\") }}", "language": "sql", "package_name": "cms_chronic_conditions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\cms_chronic_conditions", "path": "unique_cms_chronic_conditions__2e2d8c3850845c2c34a7586fa4a2c4da.sql", "original_file_path": "models\\_models.yml", "name": "unique_cms_chronic_conditions__chronic_conditions_unioned__patient_id_encounter_id_encounter_start_date_condition_", "alias": "unique_cms_chronic_conditions__2e2d8c3850845c2c34a7586fa4a2c4da", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["cms_chronic_conditions__chronic_conditions_unioned"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "../target\\compiled\\cms_chronic_conditions\\models\\_models.yml\\unique_cms_chronic_conditions__2e2d8c3850845c2c34a7586fa4a2c4da.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_cms_chronic_conditions__2e2d8c3850845c2c34a7586fa4a2c4da"}, "created_at": 1674073789.3956685, "compiled_code": "\n    \n    \n\nselect\n    (patient_id || encounter_id || encounter_start_date || condition) as unique_field,\n    count(*) as n_records\n\nfrom tuva.cms_chronic_conditions.chronic_conditions_unioned\nwhere (patient_id || encounter_id || encounter_start_date || condition) is not null\ngroup by (patient_id || encounter_id || encounter_start_date || condition)\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.cms_chronic_conditions__chronic_conditions_unioned"}, "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_all_patient_id.90e27b8290": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "patient_id", "model": "{{ get_where_subquery(ref('cms_chronic_conditions__stg_chronic_condition_all')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_all"]}, "config": {"enabled": true, "alias": "not_null_cms_chronic_condition_0f2ec71a6fffe994860009ab2f1f398b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "tuva", "schema": "dbt_test__audit", "fqn": ["cms_chronic_conditions", "not_null_cms_chronic_conditions__stg_chronic_condition_all_patient_id"], "unique_id": "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_all_patient_id.90e27b8290", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_cms_chronic_condition_0f2ec71a6fffe994860009ab2f1f398b\") }}", "language": "sql", "package_name": "cms_chronic_conditions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\cms_chronic_conditions", "path": "not_null_cms_chronic_condition_0f2ec71a6fffe994860009ab2f1f398b.sql", "original_file_path": "models\\_models.yml", "name": "not_null_cms_chronic_conditions__stg_chronic_condition_all_patient_id", "alias": "not_null_cms_chronic_condition_0f2ec71a6fffe994860009ab2f1f398b", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["cms_chronic_conditions__stg_chronic_condition_all"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "../target\\compiled\\cms_chronic_conditions\\models\\_models.yml\\not_null_cms_chronic_condition_0f2ec71a6fffe994860009ab2f1f398b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_cms_chronic_condition_0f2ec71a6fffe994860009ab2f1f398b"}, "created_at": 1674073789.3986683, "compiled_code": "\n    \n    \n\n\n\nselect patient_id\nfrom tuva.cms_chronic_conditions.stg_chronic_condition_all\nwhere patient_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "patient_id", "file_key_name": "models.cms_chronic_conditions__stg_chronic_condition_all"}, "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_all_encounter_id.86972656b2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "encounter_id", "model": "{{ get_where_subquery(ref('cms_chronic_conditions__stg_chronic_condition_all')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_all"]}, "config": {"enabled": true, "alias": "not_null_cms_chronic_condition_cb30014305673b92450e04b79c8b9131", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "tuva", "schema": "dbt_test__audit", "fqn": ["cms_chronic_conditions", "not_null_cms_chronic_conditions__stg_chronic_condition_all_encounter_id"], "unique_id": "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_all_encounter_id.86972656b2", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_cms_chronic_condition_cb30014305673b92450e04b79c8b9131\") }}", "language": "sql", "package_name": "cms_chronic_conditions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\cms_chronic_conditions", "path": "not_null_cms_chronic_condition_cb30014305673b92450e04b79c8b9131.sql", "original_file_path": "models\\_models.yml", "name": "not_null_cms_chronic_conditions__stg_chronic_condition_all_encounter_id", "alias": "not_null_cms_chronic_condition_cb30014305673b92450e04b79c8b9131", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["cms_chronic_conditions__stg_chronic_condition_all"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "../target\\compiled\\cms_chronic_conditions\\models\\_models.yml\\not_null_cms_chronic_condition_cb30014305673b92450e04b79c8b9131.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_cms_chronic_condition_cb30014305673b92450e04b79c8b9131"}, "created_at": 1674073789.40167, "compiled_code": "\n    \n    \n\n\n\nselect encounter_id\nfrom tuva.cms_chronic_conditions.stg_chronic_condition_all\nwhere encounter_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "encounter_id", "file_key_name": "models.cms_chronic_conditions__stg_chronic_condition_all"}, "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_all_condition.0039ccf034": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "condition", "model": "{{ get_where_subquery(ref('cms_chronic_conditions__stg_chronic_condition_all')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_all"]}, "config": {"enabled": true, "alias": "not_null_cms_chronic_condition_f0722338e74355eda360403442e02aa4", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "tuva", "schema": "dbt_test__audit", "fqn": ["cms_chronic_conditions", "not_null_cms_chronic_conditions__stg_chronic_condition_all_condition"], "unique_id": "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_all_condition.0039ccf034", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_cms_chronic_condition_f0722338e74355eda360403442e02aa4\") }}", "language": "sql", "package_name": "cms_chronic_conditions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\cms_chronic_conditions", "path": "not_null_cms_chronic_condition_f0722338e74355eda360403442e02aa4.sql", "original_file_path": "models\\_models.yml", "name": "not_null_cms_chronic_conditions__stg_chronic_condition_all_condition", "alias": "not_null_cms_chronic_condition_f0722338e74355eda360403442e02aa4", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["cms_chronic_conditions__stg_chronic_condition_all"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "../target\\compiled\\cms_chronic_conditions\\models\\_models.yml\\not_null_cms_chronic_condition_f0722338e74355eda360403442e02aa4.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_cms_chronic_condition_f0722338e74355eda360403442e02aa4"}, "created_at": 1674073789.4121885, "compiled_code": "\n    \n    \n\n\n\nselect condition\nfrom tuva.cms_chronic_conditions.stg_chronic_condition_all\nwhere condition is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "condition", "file_key_name": "models.cms_chronic_conditions__stg_chronic_condition_all"}, "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_hiv_aids_patient_id.efd798a4e2": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "patient_id", "model": "{{ get_where_subquery(ref('cms_chronic_conditions__stg_chronic_condition_hiv_aids')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_hiv_aids"]}, "config": {"enabled": true, "alias": "not_null_cms_chronic_condition_dbb72811ea5ab5714e80dc2125752bb6", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "tuva", "schema": "dbt_test__audit", "fqn": ["cms_chronic_conditions", "not_null_cms_chronic_conditions__stg_chronic_condition_hiv_aids_patient_id"], "unique_id": "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_hiv_aids_patient_id.efd798a4e2", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_cms_chronic_condition_dbb72811ea5ab5714e80dc2125752bb6\") }}", "language": "sql", "package_name": "cms_chronic_conditions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\cms_chronic_conditions", "path": "not_null_cms_chronic_condition_dbb72811ea5ab5714e80dc2125752bb6.sql", "original_file_path": "models\\_models.yml", "name": "not_null_cms_chronic_conditions__stg_chronic_condition_hiv_aids_patient_id", "alias": "not_null_cms_chronic_condition_dbb72811ea5ab5714e80dc2125752bb6", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["cms_chronic_conditions__stg_chronic_condition_hiv_aids"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "../target\\compiled\\cms_chronic_conditions\\models\\_models.yml\\not_null_cms_chronic_condition_dbb72811ea5ab5714e80dc2125752bb6.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_cms_chronic_condition_dbb72811ea5ab5714e80dc2125752bb6"}, "created_at": 1674073789.4151886, "compiled_code": "\n    \n    \n\n\n\nselect patient_id\nfrom tuva.cms_chronic_conditions.stg_chronic_condition_hiv_aids\nwhere patient_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "patient_id", "file_key_name": "models.cms_chronic_conditions__stg_chronic_condition_hiv_aids"}, "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_hiv_aids_encounter_id.d92cce8034": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "encounter_id", "model": "{{ get_where_subquery(ref('cms_chronic_conditions__stg_chronic_condition_hiv_aids')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_hiv_aids"]}, "config": {"enabled": true, "alias": "not_null_cms_chronic_condition_5633beacfbccbd9add6931bebb2b55f5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "tuva", "schema": "dbt_test__audit", "fqn": ["cms_chronic_conditions", "not_null_cms_chronic_conditions__stg_chronic_condition_hiv_aids_encounter_id"], "unique_id": "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_hiv_aids_encounter_id.d92cce8034", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_cms_chronic_condition_5633beacfbccbd9add6931bebb2b55f5\") }}", "language": "sql", "package_name": "cms_chronic_conditions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\cms_chronic_conditions", "path": "not_null_cms_chronic_condition_5633beacfbccbd9add6931bebb2b55f5.sql", "original_file_path": "models\\_models.yml", "name": "not_null_cms_chronic_conditions__stg_chronic_condition_hiv_aids_encounter_id", "alias": "not_null_cms_chronic_condition_5633beacfbccbd9add6931bebb2b55f5", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["cms_chronic_conditions__stg_chronic_condition_hiv_aids"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "../target\\compiled\\cms_chronic_conditions\\models\\_models.yml\\not_null_cms_chronic_condition_5633beacfbccbd9add6931bebb2b55f5.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_cms_chronic_condition_5633beacfbccbd9add6931bebb2b55f5"}, "created_at": 1674073789.4181886, "compiled_code": "\n    \n    \n\n\n\nselect encounter_id\nfrom tuva.cms_chronic_conditions.stg_chronic_condition_hiv_aids\nwhere encounter_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "encounter_id", "file_key_name": "models.cms_chronic_conditions__stg_chronic_condition_hiv_aids"}, "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_hiv_aids_condition.11afbdbbd5": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "condition", "model": "{{ get_where_subquery(ref('cms_chronic_conditions__stg_chronic_condition_hiv_aids')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_hiv_aids"]}, "config": {"enabled": true, "alias": "not_null_cms_chronic_condition_efd07a8bfff7332a3f0e26e11252e49b", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "tuva", "schema": "dbt_test__audit", "fqn": ["cms_chronic_conditions", "not_null_cms_chronic_conditions__stg_chronic_condition_hiv_aids_condition"], "unique_id": "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_hiv_aids_condition.11afbdbbd5", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_cms_chronic_condition_efd07a8bfff7332a3f0e26e11252e49b\") }}", "language": "sql", "package_name": "cms_chronic_conditions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\cms_chronic_conditions", "path": "not_null_cms_chronic_condition_efd07a8bfff7332a3f0e26e11252e49b.sql", "original_file_path": "models\\_models.yml", "name": "not_null_cms_chronic_conditions__stg_chronic_condition_hiv_aids_condition", "alias": "not_null_cms_chronic_condition_efd07a8bfff7332a3f0e26e11252e49b", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["cms_chronic_conditions__stg_chronic_condition_hiv_aids"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "../target\\compiled\\cms_chronic_conditions\\models\\_models.yml\\not_null_cms_chronic_condition_efd07a8bfff7332a3f0e26e11252e49b.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_cms_chronic_condition_efd07a8bfff7332a3f0e26e11252e49b"}, "created_at": 1674073789.4266899, "compiled_code": "\n    \n    \n\n\n\nselect condition\nfrom tuva.cms_chronic_conditions.stg_chronic_condition_hiv_aids\nwhere condition is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "condition", "file_key_name": "models.cms_chronic_conditions__stg_chronic_condition_hiv_aids"}, "test.cms_chronic_conditions.accepted_values_cms_chronic_conditions__stg_chronic_condition_hiv_aids_condition__Human_Immunodeficiency_Virus_and_or_Acquired_Immunodeficiency_Syndrome_HIV_AIDS_.3be06c6325": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Human Immunodeficiency Virus and/or Acquired Immunodeficiency Syndrome (HIV/AIDS)"], "column_name": "condition", "model": "{{ get_where_subquery(ref('cms_chronic_conditions__stg_chronic_condition_hiv_aids')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_hiv_aids"]}, "config": {"enabled": true, "alias": "accepted_values_cms_chronic_co_88a5c058eb909f2104829894b3b83ba3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "tuva", "schema": "dbt_test__audit", "fqn": ["cms_chronic_conditions", "accepted_values_cms_chronic_conditions__stg_chronic_condition_hiv_aids_condition__Human_Immunodeficiency_Virus_and_or_Acquired_Immunodeficiency_Syndrome_HIV_AIDS_"], "unique_id": "test.cms_chronic_conditions.accepted_values_cms_chronic_conditions__stg_chronic_condition_hiv_aids_condition__Human_Immunodeficiency_Virus_and_or_Acquired_Immunodeficiency_Syndrome_HIV_AIDS_.3be06c6325", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_cms_chronic_co_88a5c058eb909f2104829894b3b83ba3\") }}", "language": "sql", "package_name": "cms_chronic_conditions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\cms_chronic_conditions", "path": "accepted_values_cms_chronic_co_88a5c058eb909f2104829894b3b83ba3.sql", "original_file_path": "models\\_models.yml", "name": "accepted_values_cms_chronic_conditions__stg_chronic_condition_hiv_aids_condition__Human_Immunodeficiency_Virus_and_or_Acquired_Immunodeficiency_Syndrome_HIV_AIDS_", "alias": "accepted_values_cms_chronic_co_88a5c058eb909f2104829894b3b83ba3", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["cms_chronic_conditions__stg_chronic_condition_hiv_aids"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "../target\\compiled\\cms_chronic_conditions\\models\\_models.yml\\accepted_values_cms_chronic_co_88a5c058eb909f2104829894b3b83ba3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_cms_chronic_co_88a5c058eb909f2104829894b3b83ba3"}, "created_at": 1674073789.429701, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        condition as value_field,\n        count(*) as n_records\n\n    from tuva.cms_chronic_conditions.stg_chronic_condition_hiv_aids\n    group by condition\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Human Immunodeficiency Virus and/or Acquired Immunodeficiency Syndrome (HIV/AIDS)'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "condition", "file_key_name": "models.cms_chronic_conditions__stg_chronic_condition_hiv_aids"}, "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_oud_patient_id.825a9ddb55": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "patient_id", "model": "{{ get_where_subquery(ref('cms_chronic_conditions__stg_chronic_condition_oud')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_oud"]}, "config": {"enabled": true, "alias": "not_null_cms_chronic_condition_ce1061bfa71cfbc344007fbe4e3671bd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "tuva", "schema": "dbt_test__audit", "fqn": ["cms_chronic_conditions", "not_null_cms_chronic_conditions__stg_chronic_condition_oud_patient_id"], "unique_id": "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_oud_patient_id.825a9ddb55", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_cms_chronic_condition_ce1061bfa71cfbc344007fbe4e3671bd\") }}", "language": "sql", "package_name": "cms_chronic_conditions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\cms_chronic_conditions", "path": "not_null_cms_chronic_condition_ce1061bfa71cfbc344007fbe4e3671bd.sql", "original_file_path": "models\\_models.yml", "name": "not_null_cms_chronic_conditions__stg_chronic_condition_oud_patient_id", "alias": "not_null_cms_chronic_condition_ce1061bfa71cfbc344007fbe4e3671bd", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["cms_chronic_conditions__stg_chronic_condition_oud"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "../target\\compiled\\cms_chronic_conditions\\models\\_models.yml\\not_null_cms_chronic_condition_ce1061bfa71cfbc344007fbe4e3671bd.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_cms_chronic_condition_ce1061bfa71cfbc344007fbe4e3671bd"}, "created_at": 1674073789.4542358, "compiled_code": "\n    \n    \n\n\n\nselect patient_id\nfrom tuva.cms_chronic_conditions.stg_chronic_condition_oud\nwhere patient_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "patient_id", "file_key_name": "models.cms_chronic_conditions__stg_chronic_condition_oud"}, "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_oud_encounter_id.d20775e7f6": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "encounter_id", "model": "{{ get_where_subquery(ref('cms_chronic_conditions__stg_chronic_condition_oud')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_oud"]}, "config": {"enabled": true, "alias": "not_null_cms_chronic_condition_9187b196bb1123338951967185f83b00", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "tuva", "schema": "dbt_test__audit", "fqn": ["cms_chronic_conditions", "not_null_cms_chronic_conditions__stg_chronic_condition_oud_encounter_id"], "unique_id": "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_oud_encounter_id.d20775e7f6", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_cms_chronic_condition_9187b196bb1123338951967185f83b00\") }}", "language": "sql", "package_name": "cms_chronic_conditions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\cms_chronic_conditions", "path": "not_null_cms_chronic_condition_9187b196bb1123338951967185f83b00.sql", "original_file_path": "models\\_models.yml", "name": "not_null_cms_chronic_conditions__stg_chronic_condition_oud_encounter_id", "alias": "not_null_cms_chronic_condition_9187b196bb1123338951967185f83b00", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["cms_chronic_conditions__stg_chronic_condition_oud"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "../target\\compiled\\cms_chronic_conditions\\models\\_models.yml\\not_null_cms_chronic_condition_9187b196bb1123338951967185f83b00.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_cms_chronic_condition_9187b196bb1123338951967185f83b00"}, "created_at": 1674073789.4572363, "compiled_code": "\n    \n    \n\n\n\nselect encounter_id\nfrom tuva.cms_chronic_conditions.stg_chronic_condition_oud\nwhere encounter_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "encounter_id", "file_key_name": "models.cms_chronic_conditions__stg_chronic_condition_oud"}, "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_oud_condition.7e5b6672a7": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "condition", "model": "{{ get_where_subquery(ref('cms_chronic_conditions__stg_chronic_condition_oud')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_oud"]}, "config": {"enabled": true, "alias": "not_null_cms_chronic_condition_c9aa88bb15a57575cf5426f32f78924e", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "tuva", "schema": "dbt_test__audit", "fqn": ["cms_chronic_conditions", "not_null_cms_chronic_conditions__stg_chronic_condition_oud_condition"], "unique_id": "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_oud_condition.7e5b6672a7", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_cms_chronic_condition_c9aa88bb15a57575cf5426f32f78924e\") }}", "language": "sql", "package_name": "cms_chronic_conditions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\cms_chronic_conditions", "path": "not_null_cms_chronic_condition_c9aa88bb15a57575cf5426f32f78924e.sql", "original_file_path": "models\\_models.yml", "name": "not_null_cms_chronic_conditions__stg_chronic_condition_oud_condition", "alias": "not_null_cms_chronic_condition_c9aa88bb15a57575cf5426f32f78924e", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["cms_chronic_conditions__stg_chronic_condition_oud"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "../target\\compiled\\cms_chronic_conditions\\models\\_models.yml\\not_null_cms_chronic_condition_c9aa88bb15a57575cf5426f32f78924e.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_cms_chronic_condition_c9aa88bb15a57575cf5426f32f78924e"}, "created_at": 1674073789.459743, "compiled_code": "\n    \n    \n\n\n\nselect condition\nfrom tuva.cms_chronic_conditions.stg_chronic_condition_oud\nwhere condition is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "condition", "file_key_name": "models.cms_chronic_conditions__stg_chronic_condition_oud"}, "test.cms_chronic_conditions.accepted_values_cms_chronic_conditions__stg_chronic_condition_oud_condition__Opioid_Use_Disorder_OUD_.eafe801066": {"test_metadata": {"name": "accepted_values", "kwargs": {"values": ["Opioid Use Disorder (OUD)"], "column_name": "condition", "model": "{{ get_where_subquery(ref('cms_chronic_conditions__stg_chronic_condition_oud')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_accepted_values", "macro.dbt.get_where_subquery"], "nodes": ["model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_oud"]}, "config": {"enabled": true, "alias": "accepted_values_cms_chronic_co_1bd985097d34c053d8276d3fe57239c5", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "tuva", "schema": "dbt_test__audit", "fqn": ["cms_chronic_conditions", "accepted_values_cms_chronic_conditions__stg_chronic_condition_oud_condition__Opioid_Use_Disorder_OUD_"], "unique_id": "test.cms_chronic_conditions.accepted_values_cms_chronic_conditions__stg_chronic_condition_oud_condition__Opioid_Use_Disorder_OUD_.eafe801066", "raw_code": "{{ test_accepted_values(**_dbt_generic_test_kwargs) }}{{ config(alias=\"accepted_values_cms_chronic_co_1bd985097d34c053d8276d3fe57239c5\") }}", "language": "sql", "package_name": "cms_chronic_conditions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\cms_chronic_conditions", "path": "accepted_values_cms_chronic_co_1bd985097d34c053d8276d3fe57239c5.sql", "original_file_path": "models\\_models.yml", "name": "accepted_values_cms_chronic_conditions__stg_chronic_condition_oud_condition__Opioid_Use_Disorder_OUD_", "alias": "accepted_values_cms_chronic_co_1bd985097d34c053d8276d3fe57239c5", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["cms_chronic_conditions__stg_chronic_condition_oud"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "../target\\compiled\\cms_chronic_conditions\\models\\_models.yml\\accepted_values_cms_chronic_co_1bd985097d34c053d8276d3fe57239c5.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "accepted_values_cms_chronic_co_1bd985097d34c053d8276d3fe57239c5"}, "created_at": 1674073789.46275, "compiled_code": "\n    \n    \n\nwith all_values as (\n\n    select\n        condition as value_field,\n        count(*) as n_records\n\n    from tuva.cms_chronic_conditions.stg_chronic_condition_oud\n    group by condition\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    'Opioid Use Disorder (OUD)'\n)\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "condition", "file_key_name": "models.cms_chronic_conditions__stg_chronic_condition_oud"}, "test.data_profiling.unique_data_profiling__eligibility_detail__patient_id_member_id_enrollment_start_date_enrollment_end_date_payer_payer_type_.08852652f8": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(patient_id||'-'||member_id||'-'||enrollment_start_date||'-'||enrollment_end_date||'-'||payer||'-'||payer_type)", "model": "{{ get_where_subquery(ref('data_profiling__eligibility_detail')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.data_profiling.data_profiling__eligibility_detail"]}, "config": {"enabled": true, "alias": "unique_data_profiling__eligibi_f520adcd6cb28230403403f0660c3271", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "tuva", "schema": "dbt_test__audit", "fqn": ["data_profiling", "unique_data_profiling__eligibility_detail__patient_id_member_id_enrollment_start_date_enrollment_end_date_payer_payer_type_"], "unique_id": "test.data_profiling.unique_data_profiling__eligibility_detail__patient_id_member_id_enrollment_start_date_enrollment_end_date_payer_payer_type_.08852652f8", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_data_profiling__eligibi_f520adcd6cb28230403403f0660c3271\") }}", "language": "sql", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "unique_data_profiling__eligibi_f520adcd6cb28230403403f0660c3271.sql", "original_file_path": "models\\_models.yml", "name": "unique_data_profiling__eligibility_detail__patient_id_member_id_enrollment_start_date_enrollment_end_date_payer_payer_type_", "alias": "unique_data_profiling__eligibi_f520adcd6cb28230403403f0660c3271", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_profiling__eligibility_detail"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "../target\\compiled\\data_profiling\\models\\_models.yml\\unique_data_profiling__eligibi_f520adcd6cb28230403403f0660c3271.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_data_profiling__eligibi_f520adcd6cb28230403403f0660c3271"}, "created_at": 1674073789.7245796, "compiled_code": "\n    \n    \n\nselect\n    (patient_id||'-'||member_id||'-'||enrollment_start_date||'-'||enrollment_end_date||'-'||payer||'-'||payer_type) as unique_field,\n    count(*) as n_records\n\nfrom tuva.data_profiling.eligibility_detail\nwhere (patient_id||'-'||member_id||'-'||enrollment_start_date||'-'||enrollment_end_date||'-'||payer||'-'||payer_type) is not null\ngroup by (patient_id||'-'||member_id||'-'||enrollment_start_date||'-'||enrollment_end_date||'-'||payer||'-'||payer_type)\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.data_profiling__eligibility_detail"}, "test.data_profiling.unique_data_profiling__medical_claim_detail__claim_id_claim_line_number_.87c8994d54": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(claim_id||'-'||claim_line_number)", "model": "{{ get_where_subquery(ref('data_profiling__medical_claim_detail')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.data_profiling.data_profiling__medical_claim_detail"]}, "config": {"enabled": true, "alias": "unique_data_profiling__medical_17ad059a4cfe8097a5f64221b6ac685a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "tuva", "schema": "dbt_test__audit", "fqn": ["data_profiling", "unique_data_profiling__medical_claim_detail__claim_id_claim_line_number_"], "unique_id": "test.data_profiling.unique_data_profiling__medical_claim_detail__claim_id_claim_line_number_.87c8994d54", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_data_profiling__medical_17ad059a4cfe8097a5f64221b6ac685a\") }}", "language": "sql", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "unique_data_profiling__medical_17ad059a4cfe8097a5f64221b6ac685a.sql", "original_file_path": "models\\_models.yml", "name": "unique_data_profiling__medical_claim_detail__claim_id_claim_line_number_", "alias": "unique_data_profiling__medical_17ad059a4cfe8097a5f64221b6ac685a", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_profiling__medical_claim_detail"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "../target\\compiled\\data_profiling\\models\\_models.yml\\unique_data_profiling__medical_17ad059a4cfe8097a5f64221b6ac685a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_data_profiling__medical_17ad059a4cfe8097a5f64221b6ac685a"}, "created_at": 1674073789.7280924, "compiled_code": "\n    \n    \n\nselect\n    (claim_id||'-'||claim_line_number) as unique_field,\n    count(*) as n_records\n\nfrom tuva.data_profiling.medical_claim_detail\nwhere (claim_id||'-'||claim_line_number) is not null\ngroup by (claim_id||'-'||claim_line_number)\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.data_profiling__medical_claim_detail"}, "test.data_profiling.unique_data_profiling__pharmacy_claim_detail__claim_id_claim_line_number_.f510dfc4d6": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(claim_id||'-'||claim_line_number)", "model": "{{ get_where_subquery(ref('data_profiling__pharmacy_claim_detail')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.data_profiling.data_profiling__pharmacy_claim_detail"]}, "config": {"enabled": true, "alias": "unique_data_profiling__pharmac_32801c2f7f65e58a67f260d15121d636", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "tuva", "schema": "dbt_test__audit", "fqn": ["data_profiling", "unique_data_profiling__pharmacy_claim_detail__claim_id_claim_line_number_"], "unique_id": "test.data_profiling.unique_data_profiling__pharmacy_claim_detail__claim_id_claim_line_number_.f510dfc4d6", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_data_profiling__pharmac_32801c2f7f65e58a67f260d15121d636\") }}", "language": "sql", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "unique_data_profiling__pharmac_32801c2f7f65e58a67f260d15121d636.sql", "original_file_path": "models\\_models.yml", "name": "unique_data_profiling__pharmacy_claim_detail__claim_id_claim_line_number_", "alias": "unique_data_profiling__pharmac_32801c2f7f65e58a67f260d15121d636", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_profiling__pharmacy_claim_detail"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "../target\\compiled\\data_profiling\\models\\_models.yml\\unique_data_profiling__pharmac_32801c2f7f65e58a67f260d15121d636.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_data_profiling__pharmac_32801c2f7f65e58a67f260d15121d636"}, "created_at": 1674073789.7310975, "compiled_code": "\n    \n    \n\nselect\n    (claim_id||'-'||claim_line_number) as unique_field,\n    count(*) as n_records\n\nfrom tuva.data_profiling.pharmacy_claim_detail\nwhere (claim_id||'-'||claim_line_number) is not null\ngroup by (claim_id||'-'||claim_line_number)\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.data_profiling__pharmacy_claim_detail"}, "test.data_profiling.unique_data_profiling__claim_summary_test_name.8edbb84f60": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "test_name", "model": "{{ get_where_subquery(ref('data_profiling__claim_summary')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.data_profiling.data_profiling__claim_summary"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "tuva", "schema": "dbt_test__audit", "fqn": ["data_profiling", "unique_data_profiling__claim_summary_test_name"], "unique_id": "test.data_profiling.unique_data_profiling__claim_summary_test_name.8edbb84f60", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "unique_data_profiling__claim_summary_test_name.sql", "original_file_path": "models\\_models.yml", "name": "unique_data_profiling__claim_summary_test_name", "alias": "unique_data_profiling__claim_summary_test_name", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["data_profiling__claim_summary"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "../target\\compiled\\data_profiling\\models\\_models.yml\\unique_data_profiling__claim_summary_test_name.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674073789.7360966, "compiled_code": "\n    \n    \n\nselect\n    test_name as unique_field,\n    count(*) as n_records\n\nfrom tuva.data_profiling.claim_summary\nwhere test_name is not null\ngroup by test_name\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "test_name", "file_key_name": "models.data_profiling__claim_summary"}, "test.pmpm.unique_pmpm__member_months__patient_id___year_month_.1691717a43": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(patient_id || '_' || year_month)", "model": "{{ get_where_subquery(ref('pmpm__member_months')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.pmpm.pmpm__member_months"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "tuva", "schema": "dbt_test__audit", "fqn": ["pmpm", "unique_pmpm__member_months__patient_id___year_month_"], "unique_id": "test.pmpm.unique_pmpm__member_months__patient_id___year_month_.1691717a43", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "pmpm", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\pmpm", "path": "unique_pmpm__member_months__patient_id___year_month_.sql", "original_file_path": "models\\_models.yml", "name": "unique_pmpm__member_months__patient_id___year_month_", "alias": "unique_pmpm__member_months__patient_id___year_month_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["pmpm__member_months"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "../target\\compiled\\pmpm\\models\\_models.yml\\unique_pmpm__member_months__patient_id___year_month_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674073789.8233652, "compiled_code": "\n    \n    \n\nselect\n    (patient_id || '_' || year_month) as unique_field,\n    count(*) as n_records\n\nfrom tuva.pmpm.intermediate_member_months\nwhere (patient_id || '_' || year_month) is not null\ngroup by (patient_id || '_' || year_month)\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.pmpm__member_months"}, "test.pmpm.unique_pmpm__claim_spend_and_utilization__patient_id___claim_type___year_month_.a9eb7c1e1a": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(patient_id || '_'  || claim_type || '_' || year_month)", "model": "{{ get_where_subquery(ref('pmpm__claim_spend_and_utilization')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.pmpm.pmpm__claim_spend_and_utilization"]}, "config": {"enabled": true, "alias": "unique_pmpm__claim_spend_and_u_bf7fdb90858eb4413cc4f9c6d13a9fe3", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "tuva", "schema": "dbt_test__audit", "fqn": ["pmpm", "unique_pmpm__claim_spend_and_utilization__patient_id___claim_type___year_month_"], "unique_id": "test.pmpm.unique_pmpm__claim_spend_and_utilization__patient_id___claim_type___year_month_.a9eb7c1e1a", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_pmpm__claim_spend_and_u_bf7fdb90858eb4413cc4f9c6d13a9fe3\") }}", "language": "sql", "package_name": "pmpm", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\pmpm", "path": "unique_pmpm__claim_spend_and_u_bf7fdb90858eb4413cc4f9c6d13a9fe3.sql", "original_file_path": "models\\_models.yml", "name": "unique_pmpm__claim_spend_and_utilization__patient_id___claim_type___year_month_", "alias": "unique_pmpm__claim_spend_and_u_bf7fdb90858eb4413cc4f9c6d13a9fe3", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["pmpm__claim_spend_and_utilization"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "../target\\compiled\\pmpm\\models\\_models.yml\\unique_pmpm__claim_spend_and_u_bf7fdb90858eb4413cc4f9c6d13a9fe3.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_pmpm__claim_spend_and_u_bf7fdb90858eb4413cc4f9c6d13a9fe3"}, "created_at": 1674073789.8851109, "compiled_code": "\n    \n    \n\nselect\n    (patient_id || '_'  || claim_type || '_' || year_month) as unique_field,\n    count(*) as n_records\n\nfrom tuva.pmpm.intermediate_claim_spend_and_utilization\nwhere (patient_id || '_'  || claim_type || '_' || year_month) is not null\ngroup by (patient_id || '_'  || claim_type || '_' || year_month)\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.pmpm__claim_spend_and_utilization"}, "test.pmpm.unique_pmpm__pmpm_builder__patient_id___year_month_.a62156aeb4": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(patient_id || '_' || year_month)", "model": "{{ get_where_subquery(ref('pmpm__pmpm_builder')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.pmpm.pmpm__pmpm_builder"]}, "config": {"enabled": true, "alias": null, "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "tuva", "schema": "dbt_test__audit", "fqn": ["pmpm", "unique_pmpm__pmpm_builder__patient_id___year_month_"], "unique_id": "test.pmpm.unique_pmpm__pmpm_builder__patient_id___year_month_.a62156aeb4", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}", "language": "sql", "package_name": "pmpm", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\pmpm", "path": "unique_pmpm__pmpm_builder__patient_id___year_month_.sql", "original_file_path": "models\\_models.yml", "name": "unique_pmpm__pmpm_builder__patient_id___year_month_", "alias": "unique_pmpm__pmpm_builder__patient_id___year_month_", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["pmpm__pmpm_builder"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "../target\\compiled\\pmpm\\models\\_models.yml\\unique_pmpm__pmpm_builder__patient_id___year_month_.sql", "build_path": null, "deferred": false, "unrendered_config": {}, "created_at": 1674073789.8911166, "compiled_code": "\n    \n    \n\nselect\n    (patient_id || '_' || year_month) as unique_field,\n    count(*) as n_records\n\nfrom tuva.pmpm.final_pmpm_builder\nwhere (patient_id || '_' || year_month) is not null\ngroup by (patient_id || '_' || year_month)\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.pmpm__pmpm_builder"}, "test.tuva_chronic_conditions.unique_tuva_chronic_conditions__chronic_condition_groups_condition.02a997bfe2": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "condition", "model": "{{ get_where_subquery(ref('tuva_chronic_conditions__chronic_condition_groups')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.tuva_chronic_conditions.tuva_chronic_conditions__chronic_condition_groups"]}, "config": {"enabled": true, "alias": "unique_tuva_chronic_conditions_4453a58acf5cf7f1be70a404f48a9f38", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "tuva", "schema": "dbt_test__audit", "fqn": ["tuva_chronic_conditions", "unique_tuva_chronic_conditions__chronic_condition_groups_condition"], "unique_id": "test.tuva_chronic_conditions.unique_tuva_chronic_conditions__chronic_condition_groups_condition.02a997bfe2", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_tuva_chronic_conditions_4453a58acf5cf7f1be70a404f48a9f38\") }}", "language": "sql", "package_name": "tuva_chronic_conditions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\tuva_chronic_conditions", "path": "unique_tuva_chronic_conditions_4453a58acf5cf7f1be70a404f48a9f38.sql", "original_file_path": "models\\_models.yml", "name": "unique_tuva_chronic_conditions__chronic_condition_groups_condition", "alias": "unique_tuva_chronic_conditions_4453a58acf5cf7f1be70a404f48a9f38", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tuva_chronic_conditions__chronic_condition_groups"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "../target\\compiled\\tuva_chronic_conditions\\models\\_models.yml\\unique_tuva_chronic_conditions_4453a58acf5cf7f1be70a404f48a9f38.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_tuva_chronic_conditions_4453a58acf5cf7f1be70a404f48a9f38"}, "created_at": 1674073791.0899801, "compiled_code": "\n    \n    \n\nselect\n    condition as unique_field,\n    count(*) as n_records\n\nfrom tuva.tuva_chronic_conditions.final_chronic_condition_groups\nwhere condition is not null\ngroup by condition\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "condition", "file_key_name": "models.tuva_chronic_conditions__chronic_condition_groups"}, "test.tuva_chronic_conditions.not_null_tuva_chronic_conditions__chronic_condition_groups_condition.78508ce31d": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "condition", "model": "{{ get_where_subquery(ref('tuva_chronic_conditions__chronic_condition_groups')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.tuva_chronic_conditions.tuva_chronic_conditions__chronic_condition_groups"]}, "config": {"enabled": true, "alias": "not_null_tuva_chronic_conditio_2556d5b6d499e653800d0fc2dbe0376a", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "tuva", "schema": "dbt_test__audit", "fqn": ["tuva_chronic_conditions", "not_null_tuva_chronic_conditions__chronic_condition_groups_condition"], "unique_id": "test.tuva_chronic_conditions.not_null_tuva_chronic_conditions__chronic_condition_groups_condition.78508ce31d", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_tuva_chronic_conditio_2556d5b6d499e653800d0fc2dbe0376a\") }}", "language": "sql", "package_name": "tuva_chronic_conditions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\tuva_chronic_conditions", "path": "not_null_tuva_chronic_conditio_2556d5b6d499e653800d0fc2dbe0376a.sql", "original_file_path": "models\\_models.yml", "name": "not_null_tuva_chronic_conditions__chronic_condition_groups_condition", "alias": "not_null_tuva_chronic_conditio_2556d5b6d499e653800d0fc2dbe0376a", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tuva_chronic_conditions__chronic_condition_groups"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "../target\\compiled\\tuva_chronic_conditions\\models\\_models.yml\\not_null_tuva_chronic_conditio_2556d5b6d499e653800d0fc2dbe0376a.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_tuva_chronic_conditio_2556d5b6d499e653800d0fc2dbe0376a"}, "created_at": 1674073791.0929701, "compiled_code": "\n    \n    \n\n\n\nselect condition\nfrom tuva.tuva_chronic_conditions.final_chronic_condition_groups\nwhere condition is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": "condition", "file_key_name": "models.tuva_chronic_conditions__chronic_condition_groups"}, "test.tuva_chronic_conditions.unique_tuva_chronic_conditions__chronic_conditions_long__patient_id___condition_.6e492a9f4a": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "(patient_id || '_' || condition)", "model": "{{ get_where_subquery(ref('tuva_chronic_conditions__chronic_conditions_long')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.tuva_chronic_conditions.tuva_chronic_conditions__chronic_conditions_long"]}, "config": {"enabled": true, "alias": "unique_tuva_chronic_conditions_18d088583dcf3a22b2ac89344712b29d", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "tuva", "schema": "dbt_test__audit", "fqn": ["tuva_chronic_conditions", "unique_tuva_chronic_conditions__chronic_conditions_long__patient_id___condition_"], "unique_id": "test.tuva_chronic_conditions.unique_tuva_chronic_conditions__chronic_conditions_long__patient_id___condition_.6e492a9f4a", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_tuva_chronic_conditions_18d088583dcf3a22b2ac89344712b29d\") }}", "language": "sql", "package_name": "tuva_chronic_conditions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\tuva_chronic_conditions", "path": "unique_tuva_chronic_conditions_18d088583dcf3a22b2ac89344712b29d.sql", "original_file_path": "models\\_models.yml", "name": "unique_tuva_chronic_conditions__chronic_conditions_long__patient_id___condition_", "alias": "unique_tuva_chronic_conditions_18d088583dcf3a22b2ac89344712b29d", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tuva_chronic_conditions__chronic_conditions_long"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "../target\\compiled\\tuva_chronic_conditions\\models\\_models.yml\\unique_tuva_chronic_conditions_18d088583dcf3a22b2ac89344712b29d.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_tuva_chronic_conditions_18d088583dcf3a22b2ac89344712b29d"}, "created_at": 1674073791.0956063, "compiled_code": "\n    \n    \n\nselect\n    (patient_id || '_' || condition) as unique_field,\n    count(*) as n_records\n\nfrom tuva.tuva_chronic_conditions.final_chronic_conditions_long\nwhere (patient_id || '_' || condition) is not null\ngroup by (patient_id || '_' || condition)\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.tuva_chronic_conditions__chronic_conditions_long"}, "test.tuva_chronic_conditions.unique_tuva_chronic_conditions__chronic_conditions_wide_patient_id.508660f196": {"test_metadata": {"name": "unique", "kwargs": {"column_name": "patient_id", "model": "{{ get_where_subquery(ref('tuva_chronic_conditions__chronic_conditions_wide')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_unique", "macro.dbt.get_where_subquery"], "nodes": ["model.tuva_chronic_conditions.tuva_chronic_conditions__chronic_conditions_wide"]}, "config": {"enabled": true, "alias": "unique_tuva_chronic_conditions_2f5b6cf842d852bc9851080ca6b2c023", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "tuva", "schema": "dbt_test__audit", "fqn": ["tuva_chronic_conditions", "unique_tuva_chronic_conditions__chronic_conditions_wide_patient_id"], "unique_id": "test.tuva_chronic_conditions.unique_tuva_chronic_conditions__chronic_conditions_wide_patient_id.508660f196", "raw_code": "{{ test_unique(**_dbt_generic_test_kwargs) }}{{ config(alias=\"unique_tuva_chronic_conditions_2f5b6cf842d852bc9851080ca6b2c023\") }}", "language": "sql", "package_name": "tuva_chronic_conditions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\tuva_chronic_conditions", "path": "unique_tuva_chronic_conditions_2f5b6cf842d852bc9851080ca6b2c023.sql", "original_file_path": "models\\_models.yml", "name": "unique_tuva_chronic_conditions__chronic_conditions_wide_patient_id", "alias": "unique_tuva_chronic_conditions_2f5b6cf842d852bc9851080ca6b2c023", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tuva_chronic_conditions__chronic_conditions_wide"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "../target\\compiled\\tuva_chronic_conditions\\models\\_models.yml\\unique_tuva_chronic_conditions_2f5b6cf842d852bc9851080ca6b2c023.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "unique_tuva_chronic_conditions_2f5b6cf842d852bc9851080ca6b2c023"}, "created_at": 1674073791.0986056, "compiled_code": "\n    \n    \n\nselect\n    patient_id as unique_field,\n    count(*) as n_records\n\nfrom tuva.tuva_chronic_conditions.final_chronic_conditions_wide\nwhere patient_id is not null\ngroup by patient_id\nhaving count(*) > 1\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.tuva_chronic_conditions__chronic_conditions_wide"}, "test.tuva_chronic_conditions.not_null_tuva_chronic_conditions__chronic_conditions_wide_patient_id.cac012dc7e": {"test_metadata": {"name": "not_null", "kwargs": {"column_name": "patient_id", "model": "{{ get_where_subquery(ref('tuva_chronic_conditions__chronic_conditions_wide')) }}"}, "namespace": null}, "compiled": true, "resource_type": "test", "depends_on": {"macros": ["macro.dbt.test_not_null", "macro.dbt.get_where_subquery"], "nodes": ["model.tuva_chronic_conditions.tuva_chronic_conditions__chronic_conditions_wide"]}, "config": {"enabled": true, "alias": "not_null_tuva_chronic_conditio_6a466031e2b78a2510438eee5163f6dd", "schema": "dbt_test__audit", "database": null, "tags": [], "meta": {}, "materialized": "test", "severity": "ERROR", "store_failures": null, "where": null, "limit": null, "fail_calc": "count(*)", "warn_if": "!= 0", "error_if": "!= 0"}, "database": "tuva", "schema": "dbt_test__audit", "fqn": ["tuva_chronic_conditions", "not_null_tuva_chronic_conditions__chronic_conditions_wide_patient_id"], "unique_id": "test.tuva_chronic_conditions.not_null_tuva_chronic_conditions__chronic_conditions_wide_patient_id.cac012dc7e", "raw_code": "{{ test_not_null(**_dbt_generic_test_kwargs) }}{{ config(alias=\"not_null_tuva_chronic_conditio_6a466031e2b78a2510438eee5163f6dd\") }}", "language": "sql", "package_name": "tuva_chronic_conditions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\tuva_chronic_conditions", "path": "not_null_tuva_chronic_conditio_6a466031e2b78a2510438eee5163f6dd.sql", "original_file_path": "models\\_models.yml", "name": "not_null_tuva_chronic_conditions__chronic_conditions_wide_patient_id", "alias": "not_null_tuva_chronic_conditio_6a466031e2b78a2510438eee5163f6dd", "checksum": {"name": "none", "checksum": ""}, "tags": [], "refs": [["tuva_chronic_conditions__chronic_conditions_wide"]], "sources": [], "metrics": [], "description": "", "columns": {}, "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "compiled_path": "../target\\compiled\\tuva_chronic_conditions\\models\\_models.yml\\not_null_tuva_chronic_conditio_6a466031e2b78a2510438eee5163f6dd.sql", "build_path": null, "deferred": false, "unrendered_config": {"alias": "not_null_tuva_chronic_conditio_6a466031e2b78a2510438eee5163f6dd"}, "created_at": 1674073791.1006072, "compiled_code": "\n    \n    \n\n\n\nselect patient_id\nfrom tuva.tuva_chronic_conditions.final_chronic_conditions_wide\nwhere patient_id is null\n\n\n", "extra_ctes_injected": true, "extra_ctes": [], "relation_name": null, "column_name": null, "file_key_name": "models.tuva_chronic_conditions__chronic_conditions_wide"}}, "sources": {}, "macros": {"macro.dbt_snowflake.snowflake__create_table_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_table_as", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__create_table_as", "macro_sql": "{% macro snowflake__create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {%- if language == 'sql' -%}\n    {%- set transient = config.get('transient', default=true) -%}\n    {%- set cluster_by_keys = config.get('cluster_by', default=none) -%}\n    {%- set enable_automatic_clustering = config.get('automatic_clustering', default=false) -%}\n    {%- set copy_grants = config.get('copy_grants', default=false) -%}\n\n    {%- if cluster_by_keys is not none and cluster_by_keys is string -%}\n      {%- set cluster_by_keys = [cluster_by_keys] -%}\n    {%- endif -%}\n    {%- if cluster_by_keys is not none -%}\n      {%- set cluster_by_string = cluster_by_keys|join(\", \")-%}\n    {% else %}\n      {%- set cluster_by_string = none -%}\n    {%- endif -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none }}\n\n        create or replace {% if temporary -%}\n          temporary\n        {%- elif transient -%}\n          transient\n        {%- endif %} table {{ relation }} {% if copy_grants and not temporary -%} copy grants {%- endif %} as\n        (\n          {%- if cluster_by_string is not none -%}\n            select * from(\n              {{ compiled_code }}\n              ) order by ({{ cluster_by_string }})\n          {%- else -%}\n            {{ compiled_code }}\n          {%- endif %}\n        );\n      {% if cluster_by_string is not none and not temporary -%}\n        alter table {{relation}} cluster by ({{cluster_by_string}});\n      {%- endif -%}\n      {% if enable_automatic_clustering and cluster_by_string is not none and not temporary  -%}\n        alter table {{relation}} resume recluster;\n      {%- endif -%}\n\n  {%- elif language == 'python' -%}\n    {{ py_write_table(compiled_code=compiled_code, target_relation=relation, temporary=temporary) }}\n  {%- else -%}\n      {% do exceptions.raise_compiler_error(\"snowflake__create_table_as macro didn't get supported language, it got %s\" % language) %}\n  {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.py_write_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.0002286, "supported_languages": null}, "macro.dbt_snowflake.get_column_comment_sql": {"unique_id": "macro.dbt_snowflake.get_column_comment_sql", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "get_column_comment_sql", "macro_sql": "{% macro get_column_comment_sql(column_name, column_dict) -%}\n  {% if (column_name|upper in column_dict) -%}\n    {% set matched_column = column_name|upper -%}\n  {% elif (column_name|lower in column_dict) -%}\n    {% set matched_column = column_name|lower -%}\n  {% elif (column_name in column_dict) -%}\n    {% set matched_column = column_name -%}\n  {% else -%}\n    {% set matched_column = None -%}\n  {% endif -%}\n  {% if matched_column -%}\n    {{ adapter.quote(column_name) }} COMMENT $${{ column_dict[matched_column]['description'] | replace('$', '[$]') }}$$\n  {%- else -%}\n    {{ adapter.quote(column_name) }} COMMENT $$$$\n  {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.0052302, "supported_languages": null}, "macro.dbt_snowflake.get_persist_docs_column_list": {"unique_id": "macro.dbt_snowflake.get_persist_docs_column_list", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "get_persist_docs_column_list", "macro_sql": "{% macro get_persist_docs_column_list(model_columns, query_columns) %}\n(\n  {% for column_name in query_columns %}\n    {{ get_column_comment_sql(column_name, model_columns) }}\n    {{- \", \" if not loop.last else \"\" }}\n  {% endfor %}\n)\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.00623, "supported_languages": null}, "macro.dbt_snowflake.snowflake__create_view_as": {"unique_id": "macro.dbt_snowflake.snowflake__create_view_as", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__create_view_as", "macro_sql": "{% macro snowflake__create_view_as(relation, sql) -%}\n  {%- set secure = config.get('secure', default=false) -%}\n  {%- set copy_grants = config.get('copy_grants', default=false) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create or replace {% if secure -%}\n    secure\n  {%- endif %} view {{ relation }}\n  {% if config.persist_column_docs() -%}\n    {% set model_columns = model.columns %}\n    {% set query_columns = get_columns_in_query(sql) %}\n    {{ get_persist_docs_column_list(model_columns, query_columns) }}\n\n  {%- endif %}\n  {% if copy_grants -%} copy grants {%- endif %} as (\n    {{ sql }}\n  );\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query", "macro.dbt_snowflake.get_persist_docs_column_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.0097353, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_columns_in_relation": {"unique_id": "macro.dbt_snowflake.snowflake__get_columns_in_relation", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__get_columns_in_relation", "macro_sql": "{% macro snowflake__get_columns_in_relation(relation) -%}\n  {%- set sql -%}\n    describe table {{ relation }}\n  {%- endset -%}\n  {%- set result = run_query(sql) -%}\n\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many columns in relation {{ relation }}! dbt can only get\n      information about relations with fewer than {{ maximum }} columns.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n\n  {% set columns = [] %}\n  {% for row in result %}\n    {% do columns.append(api.Column.from_description(row['name'], row['type'])) %}\n  {% endfor %}\n  {% do return(columns) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.0127444, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_schemas": {"unique_id": "macro.dbt_snowflake.snowflake__list_schemas", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__list_schemas", "macro_sql": "{% macro snowflake__list_schemas(database) -%}\n  {# 10k limit from here: https://docs.snowflake.net/manuals/sql-reference/sql/show-schemas.html#usage-notes #}\n  {% set maximum = 10000 %}\n  {% set sql -%}\n    show terse schemas in database {{ database }}\n    limit {{ maximum }}\n  {%- endset %}\n  {% set result = run_query(sql) %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in database {{ database }}! dbt can only get\n      information about databases with fewer than {{ maximum }} schemas.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {{ return(result) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.0147445, "supported_languages": null}, "macro.dbt_snowflake.snowflake__list_relations_without_caching": {"unique_id": "macro.dbt_snowflake.snowflake__list_relations_without_caching", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__list_relations_without_caching", "macro_sql": "{% macro snowflake__list_relations_without_caching(schema_relation) %}\n  {%- set sql -%}\n    show terse objects in {{ schema_relation }}\n  {%- endset -%}\n\n  {%- set result = run_query(sql) -%}\n  {% set maximum = 10000 %}\n  {% if (result | length) >= maximum %}\n    {% set msg %}\n      Too many schemas in schema  {{ schema_relation }}! dbt can only get\n      information about schemas with fewer than {{ maximum }} objects.\n    {% endset %}\n    {% do exceptions.raise_compiler_error(msg) %}\n  {% endif %}\n  {%- do return(result) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.016746, "supported_languages": null}, "macro.dbt_snowflake.snowflake__check_schema_exists": {"unique_id": "macro.dbt_snowflake.snowflake__check_schema_exists", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__check_schema_exists", "macro_sql": "{% macro snowflake__check_schema_exists(information_schema, schema) -%}\n  {% call statement('check_schema_exists', fetch_result=True) -%}\n        select count(*)\n        from {{ information_schema }}.schemata\n        where upper(schema_name) = upper('{{ schema }}')\n            and upper(catalog_name) = upper('{{ information_schema.database }}')\n  {%- endcall %}\n  {{ return(load_result('check_schema_exists').table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.0187452, "supported_languages": null}, "macro.dbt_snowflake.snowflake__rename_relation": {"unique_id": "macro.dbt_snowflake.snowflake__rename_relation", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__rename_relation", "macro_sql": "{% macro snowflake__rename_relation(from_relation, to_relation) -%}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ to_relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.019745, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_type": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_type", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_column_type", "macro_sql": "{% macro snowflake__alter_column_type(relation, column_name, new_column_type) -%}\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} alter {{ adapter.quote(column_name) }} set data type {{ new_column_type }};\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.0207455, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_comment", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_relation_comment", "macro_sql": "{% macro snowflake__alter_relation_comment(relation, relation_comment) -%}\n  comment on {{ relation.type }} {{ relation }} IS $${{ relation_comment | replace('$', '[$]') }}$$;\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.0217457, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_column_comment": {"unique_id": "macro.dbt_snowflake.snowflake__alter_column_comment", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_column_comment", "macro_sql": "{% macro snowflake__alter_column_comment(relation, column_dict) -%}\n    {% set existing_columns = adapter.get_columns_in_relation(relation) | map(attribute=\"name\") | list %}\n    alter {{ relation.type }} {{ relation }} alter\n    {% for column_name in existing_columns if (column_name in existing_columns) or (column_name|lower in existing_columns) %}\n        {{ get_column_comment_sql(column_name, column_dict) }} {{- ',' if not loop.last else ';' }}\n    {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_column_comment_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.0237455, "supported_languages": null}, "macro.dbt_snowflake.get_current_query_tag": {"unique_id": "macro.dbt_snowflake.get_current_query_tag", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "get_current_query_tag", "macro_sql": "{% macro get_current_query_tag() -%}\n  {{ return(run_query(\"show parameters like 'query_tag' in session\").rows[0]['value']) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.0237455, "supported_languages": null}, "macro.dbt_snowflake.set_query_tag": {"unique_id": "macro.dbt_snowflake.set_query_tag", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "set_query_tag", "macro_sql": "{% macro set_query_tag() -%}\n    {{ return(adapter.dispatch('set_query_tag', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__set_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.024745, "supported_languages": null}, "macro.dbt_snowflake.snowflake__set_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__set_query_tag", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__set_query_tag", "macro_sql": "{% macro snowflake__set_query_tag() -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% set original_query_tag = get_current_query_tag() %}\n    {{ log(\"Setting query_tag to '\" ~ new_query_tag ~ \"'. Will reset to '\" ~ original_query_tag ~ \"' after materialization.\") }}\n    {% do run_query(\"alter session set query_tag = '{}'\".format(new_query_tag)) %}\n    {{ return(original_query_tag)}}\n  {% endif %}\n  {{ return(none)}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.get_current_query_tag", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.0282574, "supported_languages": null}, "macro.dbt_snowflake.unset_query_tag": {"unique_id": "macro.dbt_snowflake.unset_query_tag", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "unset_query_tag", "macro_sql": "{% macro unset_query_tag(original_query_tag) -%}\n    {{ return(adapter.dispatch('unset_query_tag', 'dbt')(original_query_tag)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.029258, "supported_languages": null}, "macro.dbt_snowflake.snowflake__unset_query_tag": {"unique_id": "macro.dbt_snowflake.snowflake__unset_query_tag", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__unset_query_tag", "macro_sql": "{% macro snowflake__unset_query_tag(original_query_tag) -%}\n  {% set new_query_tag = config.get('query_tag') %}\n  {% if new_query_tag %}\n    {% if original_query_tag %}\n      {{ log(\"Resetting query_tag to '\" ~ original_query_tag ~ \"'.\") }}\n      {% do run_query(\"alter session set query_tag = '{}'\".format(original_query_tag)) %}\n    {% else %}\n      {{ log(\"No original query_tag, unsetting parameter.\") }}\n      {% do run_query(\"alter session unset query_tag\") %}\n    {% endif %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.0312579, "supported_languages": null}, "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns": {"unique_id": "macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__alter_relation_add_remove_columns", "macro_sql": "{% macro snowflake__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns %}\n\n    {% set sql -%}\n       alter {{ relation.type }} {{ relation }} add column\n          {% for column in add_columns %}\n            {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n          {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n  {% if remove_columns %}\n\n    {% set sql -%}\n        alter {{ relation.type }} {{ relation }} drop column\n            {% for column in remove_columns %}\n                {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n    {%- endset -%}\n\n    {% do run_query(sql) %}\n\n  {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.0342584, "supported_languages": null}, "macro.dbt_snowflake.snowflake_dml_explicit_transaction": {"unique_id": "macro.dbt_snowflake.snowflake_dml_explicit_transaction", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake_dml_explicit_transaction", "macro_sql": "{% macro snowflake_dml_explicit_transaction(dml) %}\n  {#\n    Use this macro to wrap all INSERT, MERGE, UPDATE, DELETE, and TRUNCATE\n    statements before passing them into run_query(), or calling in the 'main' statement\n    of a materialization\n  #}\n  {% set dml_transaction -%}\n    begin;\n    {{ dml }};\n    commit;\n  {%- endset %}\n\n  {% do return(dml_transaction) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.035258, "supported_languages": null}, "macro.dbt_snowflake.snowflake__truncate_relation": {"unique_id": "macro.dbt_snowflake.snowflake__truncate_relation", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\adapters.sql", "original_file_path": "macros\\adapters.sql", "name": "snowflake__truncate_relation", "macro_sql": "{% macro snowflake__truncate_relation(relation) -%}\n  {% set truncate_dml %}\n    truncate table {{ relation }}\n  {% endset %}\n  {% call statement('truncate_relation') -%}\n    {{ snowflake_dml_explicit_transaction(truncate_dml) }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.0362573, "supported_languages": null}, "macro.dbt_snowflake.snowflake__copy_grants": {"unique_id": "macro.dbt_snowflake.snowflake__copy_grants", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\apply_grants.sql", "original_file_path": "macros\\apply_grants.sql", "name": "snowflake__copy_grants", "macro_sql": "{% macro snowflake__copy_grants() %}\n    {% set copy_grants = config.get('copy_grants', False) %}\n    {{ return(copy_grants) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.0382576, "supported_languages": null}, "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\apply_grants.sql", "original_file_path": "macros\\apply_grants.sql", "name": "snowflake__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro snowflake__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(False) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.039257, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_catalog": {"unique_id": "macro.dbt_snowflake.snowflake__get_catalog", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\catalog.sql", "original_file_path": "macros\\catalog.sql", "name": "snowflake__get_catalog", "macro_sql": "{% macro snowflake__get_catalog(information_schema, schemas) -%}\n  {% set query %}\n      with tables as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n              table_type as \"table_type\",\n              comment as \"table_comment\",\n\n              -- note: this is the _role_ that owns the table\n              table_owner as \"table_owner\",\n\n              'Clustering Key' as \"stats:clustering_key:label\",\n              clustering_key as \"stats:clustering_key:value\",\n              'The key used to cluster this table' as \"stats:clustering_key:description\",\n              (clustering_key is not null) as \"stats:clustering_key:include\",\n\n              'Row Count' as \"stats:row_count:label\",\n              row_count as \"stats:row_count:value\",\n              'An approximate count of rows in this table' as \"stats:row_count:description\",\n              (row_count is not null) as \"stats:row_count:include\",\n\n              'Approximate Size' as \"stats:bytes:label\",\n              bytes as \"stats:bytes:value\",\n              'Approximate size of the table as reported by Snowflake' as \"stats:bytes:description\",\n              (bytes is not null) as \"stats:bytes:include\",\n\n              'Last Modified' as \"stats:last_modified:label\",\n              to_varchar(convert_timezone('UTC', last_altered), 'yyyy-mm-dd HH24:MI'||'UTC') as \"stats:last_modified:value\",\n              'The timestamp for last update/change' as \"stats:last_modified:description\",\n              (last_altered is not null and table_type='BASE TABLE') as \"stats:last_modified:include\"\n\n          from {{ information_schema }}.tables\n\n      ),\n\n      columns as (\n\n          select\n              table_catalog as \"table_database\",\n              table_schema as \"table_schema\",\n              table_name as \"table_name\",\n\n              column_name as \"column_name\",\n              ordinal_position as \"column_index\",\n              data_type as \"column_type\",\n              comment as \"column_comment\"\n\n          from {{ information_schema }}.columns\n      )\n\n      select *\n      from tables\n      join columns using (\"table_database\", \"table_schema\", \"table_name\")\n      where (\n        {%- for schema in schemas -%}\n          upper(\"table_schema\") = upper('{{ schema }}'){%- if not loop.last %} or {% endif -%}\n        {%- endfor -%}\n      )\n      order by \"column_index\"\n    {%- endset -%}\n\n  {{ return(run_query(query)) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.042258, "supported_languages": null}, "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type": {"unique_id": "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "dbt_snowflake_get_tmp_relation_type", "macro_sql": "{% macro dbt_snowflake_get_tmp_relation_type(strategy, unique_key, language) %}\n\n  /* {#\n       If we are running multiple statements (DELETE + INSERT),\n       we must first save the model query results as a temporary table\n       in order to guarantee consistent inputs to both statements.\n\n       If we are running a single statement (MERGE or INSERT alone),\n       we can save the model query definition as a view instead,\n       for faster overall incremental processing.\n  #} */\n\n  {% if language == 'sql' and (strategy in ('default', 'append', 'merge') or (unique_key is none)) %}\n    {{ return('view') }}\n  {% else %}  {#--  play it safe -- #}\n    {{ return('table') }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.0622792, "supported_languages": null}, "macro.dbt_snowflake.materialization_incremental_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_incremental_snowflake", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "materialization_incremental_snowflake", "macro_sql": "{% materialization incremental, adapter='snowflake', supported_languages=['sql', 'python'] -%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {#-- Set vars --#}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n  {%- set language = model['language'] -%}\n  {% set target_relation = this %}\n  {% set existing_relation = load_relation(this) %}\n\n  {#-- The temp relation will be a view (faster) or temp table, depending on upsert/merge strategy --#}\n  {%- set unique_key = config.get('unique_key') -%}\n  {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n  {% set tmp_relation_type = dbt_snowflake_get_tmp_relation_type(incremental_strategy, unique_key, language) %}\n  {% set tmp_relation = make_temp_relation(this).incorporate(type=tmp_relation_type) %}\n\n  {% set grant_config = config.get('grants') %}\n\n  {% set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {% if existing_relation is none %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% elif existing_relation.is_view %}\n    {#-- Can't overwrite a view with a table - we must drop --#}\n    {{ log(\"Dropping relation \" ~ target_relation ~ \" because it is a view and this model is a table.\") }}\n    {% do adapter.drop_relation(existing_relation) %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n  {% elif full_refresh_mode %}\n    {%- call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n    {%- endcall -%}\n\n  {% else %}\n    {#-- Create the temp relation, either as a view or as a temp table --#}\n    {% if tmp_relation_type == 'view' %}\n        {%- call statement('create_tmp_relation') -%}\n          {{ create_view_as(tmp_relation, compiled_code) }}\n        {%- endcall -%}\n    {% else %}\n        {%- call statement('create_tmp_relation', language=language) -%}\n          {{ create_table_as(True, tmp_relation, compiled_code, language) }}\n        {%- endcall -%}\n    {% endif %}\n\n    {% do adapter.expand_target_column_types(\n           from_relation=tmp_relation,\n           to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, tmp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_predicates = config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': tmp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'predicates': incremental_predicates }) %}\n\n    {%- call statement('main') -%}\n      {{ strategy_sql_macro_func(strategy_arg_dict) }}\n    {%- endcall -%}\n  {% endif %}\n\n  {% do drop_relation_if_exists(tmp_relation) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set target_relation = target_relation.incorporate(type='table') %}\n\n  {% set should_revoke =\n   should_revoke(existing_relation.is_table, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.should_full_refresh", "macro.dbt.load_relation", "macro.dbt_snowflake.dbt_snowflake_get_tmp_relation_type", "macro.dbt.make_temp_relation", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.create_view_as", "macro.dbt.process_schema_changes", "macro.dbt.drop_relation_if_exists", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.0747912, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.snowflake__get_incremental_default_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_incremental_default_sql", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\incremental.sql", "original_file_path": "macros\\materializations\\incremental.sql", "name": "snowflake__get_incremental_default_sql", "macro_sql": "{% macro snowflake__get_incremental_default_sql(arg_dict) %}\n  {{ return(get_incremental_merge_sql(arg_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.0747912, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_merge_sql", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "name": "snowflake__get_merge_sql", "macro_sql": "{% macro snowflake__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) -%}\n\n    {#\n       Workaround for Snowflake not being happy with a merge on a constant-false predicate.\n       When no unique_key is provided, this macro will do a regular insert. If a unique_key\n       is provided, then this macro will do a proper merge instead.\n    #}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute='name')) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {%- set dml -%}\n    {%- if unique_key is none -%}\n\n        {{ sql_header if sql_header is not none }}\n\n        insert into {{ target }} ({{ dest_cols_csv }})\n        (\n            select {{ dest_cols_csv }}\n            from {{ source_sql }}\n        )\n\n    {%- else -%}\n\n        {{ default__get_merge_sql(target, source_sql, unique_key, dest_columns, predicates) }}\n\n    {%- endif -%}\n    {%- endset -%}\n\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.default__get_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.080308, "supported_languages": null}, "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "name": "snowflake__get_delete_insert_merge_sql", "macro_sql": "{% macro snowflake__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% set dml = default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_delete_insert_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.081308, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_merge_sql": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_merge_sql", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\merge.sql", "original_file_path": "macros\\materializations\\merge.sql", "name": "snowflake__snapshot_merge_sql", "macro_sql": "{% macro snowflake__snapshot_merge_sql(target, source, insert_cols) %}\n    {% set dml = default__snapshot_merge_sql(target, source, insert_cols) %}\n    {% do return(snowflake_dml_explicit_transaction(dml)) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_merge_sql", "macro.dbt_snowflake.snowflake_dml_explicit_transaction"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.0823078, "supported_languages": null}, "macro.dbt_snowflake.snowflake__load_csv_rows": {"unique_id": "macro.dbt_snowflake.snowflake__load_csv_rows", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "name": "snowflake__load_csv_rows", "macro_sql": "{% macro snowflake__load_csv_rows(model, agate_table) %}\n    {% set batch_size = get_batch_size() %}\n    {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n    {% set bindings = [] %}\n\n    {% set statements = [] %}\n\n    {% for chunk in agate_table.rows | batch(batch_size) %}\n        {% set bindings = [] %}\n\n        {% for row in chunk %}\n            {% do bindings.extend(row) %}\n        {% endfor %}\n\n        {% set sql %}\n            insert into {{ this.render() }} ({{ cols_sql }}) values\n            {% for row in chunk -%}\n                ({%- for column in agate_table.column_names -%}\n                    %s\n                    {%- if not loop.last%},{%- endif %}\n                {%- endfor -%})\n                {%- if not loop.last%},{%- endif %}\n            {%- endfor %}\n        {% endset %}\n\n        {% do adapter.add_query('BEGIN', auto_begin=False) %}\n        {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n        {% do adapter.add_query('COMMIT', auto_begin=False) %}\n\n        {% if loop.index0 == 0 %}\n            {% do statements.append(sql) %}\n        {% endif %}\n    {% endfor %}\n\n    {# Return SQL so we can render it out into the compiled files #}\n    {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.089309, "supported_languages": null}, "macro.dbt_snowflake.materialization_seed_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_seed_snowflake", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\seed.sql", "original_file_path": "macros\\materializations\\seed.sql", "name": "materialization_seed_snowflake", "macro_sql": "{% materialization seed, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n\n    {% set relations = materialization_seed_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_seed_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.0913074, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_snapshot_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_snapshot_snowflake", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshot.sql", "name": "materialization_snapshot_snowflake", "macro_sql": "{% materialization snapshot, adapter='snowflake' %}\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_snapshot_default() %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n    {{ return(relations) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_snapshot_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.099821, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_table_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_table_snowflake", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "name": "materialization_table_snowflake", "macro_sql": "{% materialization table, adapter='snowflake', supported_languages=['sql', 'python']%}\n\n  {% set original_query_tag = set_query_tag() %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set language = model['language'] -%}\n\n  {% set grant_config = config.get('grants') %}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier,\n                                                schema=schema,\n                                                database=database, type='table') -%}\n\n  {{ run_hooks(pre_hooks) }}\n\n  {#-- Drop the relation if it was a view to \"convert\" it in a table. This may lead to\n    -- downtime, but it should be a relatively infrequent occurrence  #}\n  {% if old_relation is not none and not old_relation.is_table %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ drop_relation_if_exists(old_relation) }}\n  {% endif %}\n\n  {% call statement('main', language=language) -%}\n      {{ create_table_as(False, target_relation, compiled_code, language) }}\n  {%- endcall %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% do unset_query_tag(original_query_tag) %}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.1133356, "supported_languages": ["sql", "python"]}, "macro.dbt_snowflake.py_write_table": {"unique_id": "macro.dbt_snowflake.py_write_table", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "name": "py_write_table", "macro_sql": "{% macro py_write_table(compiled_code, target_relation, temporary=False) %}\n{{ compiled_code }}\ndef materialize(session, df, target_relation):\n    # make sure pandas exists\n    import importlib.util\n    package_name = 'pandas'\n    if importlib.util.find_spec(package_name):\n        import pandas\n        if isinstance(df, pandas.core.frame.DataFrame):\n          # session.write_pandas does not have overwrite function\n          df = session.createDataFrame(df)\n    df.write.mode(\"overwrite\").save_as_table(\"{{ target_relation }}\", create_temp_table={{temporary}})\n\ndef main(session):\n    dbt = dbtObj(session.table)\n    df = model(dbt, session)\n    materialize(session, df, dbt.this)\n    return \"OK\"\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.1143358, "supported_languages": null}, "macro.dbt_snowflake.py_script_comment": {"unique_id": "macro.dbt_snowflake.py_script_comment", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\table.sql", "original_file_path": "macros\\materializations\\table.sql", "name": "py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n# To run this in snowsight, you need to select entry point to be main\n# And you may have to modify the return type to text to get the result back\n# def main(session):\n#     dbt = dbtObj(session.table)\n#     df = model(dbt, session)\n#     return df.collect()\n\n# to run this in local notebook, you need to create a session following examples https://github.com/Snowflake-Labs/sfguide-getting-started-snowpark-python\n# then you can do the following to run model\n# dbt = dbtObj(session.table)\n# df = model(dbt, session)\n{%endmacro%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.1143358, "supported_languages": null}, "macro.dbt_snowflake.materialization_test_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_test_snowflake", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\test.sql", "original_file_path": "macros\\materializations\\test.sql", "name": "materialization_test_snowflake", "macro_sql": "{%- materialization test, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set relations = materialization_test_default() %}\n    {% do unset_query_tag(original_query_tag) %}\n    {{ return(relations) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.materialization_test_default", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.1163356, "supported_languages": ["sql"]}, "macro.dbt_snowflake.materialization_view_snowflake": {"unique_id": "macro.dbt_snowflake.materialization_view_snowflake", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\materializations\\view.sql", "original_file_path": "macros\\materializations\\view.sql", "name": "materialization_view_snowflake", "macro_sql": "{% materialization view, adapter='snowflake' -%}\n\n    {% set original_query_tag = set_query_tag() %}\n    {% set to_return = create_or_replace_view() %}\n\n    {% set target_relation = this.incorporate(type='view') %}\n\n    {% do persist_docs(target_relation, model, for_columns=false) %}\n\n    {% do return(to_return) %}\n\n    {% do unset_query_tag(original_query_tag) %}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.set_query_tag", "macro.dbt.create_or_replace_view", "macro.dbt.persist_docs", "macro.dbt_snowflake.unset_query_tag"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.1183357, "supported_languages": ["sql"]}, "macro.dbt_snowflake.snowflake__array_construct": {"unique_id": "macro.dbt_snowflake.snowflake__array_construct", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "name": "snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.1193361, "supported_languages": null}, "macro.dbt_snowflake.snowflake__bool_or": {"unique_id": "macro.dbt_snowflake.snowflake__bool_or", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "name": "snowflake__bool_or", "macro_sql": "{% macro snowflake__bool_or(expression) -%}\n\n    boolor_agg({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.1203363, "supported_languages": null}, "macro.dbt_snowflake.snowflake__escape_single_quotes": {"unique_id": "macro.dbt_snowflake.snowflake__escape_single_quotes", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "name": "snowflake__escape_single_quotes", "macro_sql": "{% macro snowflake__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\", \"\\\\'\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.1213362, "supported_languages": null}, "macro.dbt_snowflake.snowflake__right": {"unique_id": "macro.dbt_snowflake.snowflake__right", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "name": "snowflake__right", "macro_sql": "{% macro snowflake__right(string_text, length_expression) %}\n\n    case when {{ length_expression }} = 0\n        then ''\n    else\n        right(\n            {{ string_text }},\n            {{ length_expression }}\n        )\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.1233356, "supported_languages": null}, "macro.dbt_snowflake.snowflake__safe_cast": {"unique_id": "macro.dbt_snowflake.snowflake__safe_cast", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "name": "snowflake__safe_cast", "macro_sql": "{% macro snowflake__safe_cast(field, type) %}\n    try_cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.1243355, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "name": "snowflake__current_timestamp", "macro_sql": "{% macro snowflake__current_timestamp() -%}\n  convert_timezone('UTC', current_timestamp())\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.125337, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_string_as_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_string_as_time", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "name": "snowflake__snapshot_string_as_time", "macro_sql": "{% macro snowflake__snapshot_string_as_time(timestamp) -%}\n  {%- set result = \"to_timestamp_ntz('\" ~ timestamp ~ \"')\" -%}\n  {{ return(result) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.1268384, "supported_languages": null}, "macro.dbt_snowflake.snowflake__snapshot_get_time": {"unique_id": "macro.dbt_snowflake.snowflake__snapshot_get_time", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "name": "snowflake__snapshot_get_time", "macro_sql": "{% macro snowflake__snapshot_get_time() -%}\n  to_timestamp_ntz({{ current_timestamp() }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.1268384, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_backcompat": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "name": "snowflake__current_timestamp_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_backcompat() %}\n  current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.1278415, "supported_languages": null}, "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat", "package_name": "dbt_snowflake", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\snowflake", "path": "macros\\utils\\timestamps.sql", "original_file_path": "macros\\utils\\timestamps.sql", "name": "snowflake__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro snowflake__current_timestamp_in_utc_backcompat() %}\n  convert_timezone('UTC', {{ snowflake__current_timestamp_backcompat() }})::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.1278415, "supported_languages": null}, "macro.dbt.copy_grants": {"unique_id": "macro.dbt.copy_grants", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "copy_grants", "macro_sql": "{% macro copy_grants() %}\n    {{ return(adapter.dispatch('copy_grants', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.1328452, "supported_languages": null}, "macro.dbt.default__copy_grants": {"unique_id": "macro.dbt.default__copy_grants", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__copy_grants", "macro_sql": "{% macro default__copy_grants() %}\n    {{ return(True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.133845, "supported_languages": null}, "macro.dbt.support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "support_multiple_grantees_per_dcl_statement", "macro_sql": "{% macro support_multiple_grantees_per_dcl_statement() %}\n    {{ return(adapter.dispatch('support_multiple_grantees_per_dcl_statement', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.133845, "supported_languages": null}, "macro.dbt.default__support_multiple_grantees_per_dcl_statement": {"unique_id": "macro.dbt.default__support_multiple_grantees_per_dcl_statement", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__support_multiple_grantees_per_dcl_statement", "macro_sql": "\n\n{%- macro default__support_multiple_grantees_per_dcl_statement() -%}\n    {{ return(True) }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.1348453, "supported_languages": null}, "macro.dbt.should_revoke": {"unique_id": "macro.dbt.should_revoke", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "should_revoke", "macro_sql": "{% macro should_revoke(existing_relation, full_refresh_mode=True) %}\n\n    {% if not existing_relation %}\n        {#-- The table doesn't already exist, so no grants to copy over --#}\n        {{ return(False) }}\n    {% elif full_refresh_mode %}\n        {#-- The object is being REPLACED -- whether grants are copied over depends on the value of user config --#}\n        {{ return(copy_grants()) }}\n    {% else %}\n        {#-- The table is being merged/upserted/inserted -- grants will be carried over --#}\n        {{ return(True) }}\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.copy_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.135845, "supported_languages": null}, "macro.dbt.get_show_grant_sql": {"unique_id": "macro.dbt.get_show_grant_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_show_grant_sql", "macro_sql": "{% macro get_show_grant_sql(relation) %}\n    {{ return(adapter.dispatch(\"get_show_grant_sql\", \"dbt\")(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_show_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.1368454, "supported_languages": null}, "macro.dbt.default__get_show_grant_sql": {"unique_id": "macro.dbt.default__get_show_grant_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_show_grant_sql", "macro_sql": "{% macro default__get_show_grant_sql(relation) %}\n    show grants on {{ relation }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.1368454, "supported_languages": null}, "macro.dbt.get_grant_sql": {"unique_id": "macro.dbt.get_grant_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_grant_sql", "macro_sql": "{% macro get_grant_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_grant_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_grant_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.1378453, "supported_languages": null}, "macro.dbt.default__get_grant_sql": {"unique_id": "macro.dbt.default__get_grant_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_grant_sql", "macro_sql": "\n\n{%- macro default__get_grant_sql(relation, privilege, grantees) -%}\n    grant {{ privilege }} on {{ relation }} to {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.1378453, "supported_languages": null}, "macro.dbt.get_revoke_sql": {"unique_id": "macro.dbt.get_revoke_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_revoke_sql", "macro_sql": "{% macro get_revoke_sql(relation, privilege, grantees) %}\n    {{ return(adapter.dispatch('get_revoke_sql', 'dbt')(relation, privilege, grantees)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_revoke_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.138845, "supported_languages": null}, "macro.dbt.default__get_revoke_sql": {"unique_id": "macro.dbt.default__get_revoke_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_revoke_sql", "macro_sql": "\n\n{%- macro default__get_revoke_sql(relation, privilege, grantees) -%}\n    revoke {{ privilege }} on {{ relation }} from {{ grantees | join(', ') }}\n{%- endmacro -%}\n\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.146363, "supported_languages": null}, "macro.dbt.get_dcl_statement_list": {"unique_id": "macro.dbt.get_dcl_statement_list", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "get_dcl_statement_list", "macro_sql": "{% macro get_dcl_statement_list(relation, grant_config, get_dcl_macro) %}\n    {{ return(adapter.dispatch('get_dcl_statement_list', 'dbt')(relation, grant_config, get_dcl_macro)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_dcl_statement_list"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.1473627, "supported_languages": null}, "macro.dbt.default__get_dcl_statement_list": {"unique_id": "macro.dbt.default__get_dcl_statement_list", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__get_dcl_statement_list", "macro_sql": "\n\n{%- macro default__get_dcl_statement_list(relation, grant_config, get_dcl_macro) -%}\n    {#\n      -- Unpack grant_config into specific privileges and the set of users who need them granted/revoked.\n      -- Depending on whether this database supports multiple grantees per statement, pass in the list of\n      -- all grantees per privilege, or (if not) template one statement per privilege-grantee pair.\n      -- `get_dcl_macro` will be either `get_grant_sql` or `get_revoke_sql`\n    #}\n    {%- set dcl_statements = [] -%}\n    {%- for privilege, grantees in grant_config.items() %}\n        {%- if support_multiple_grantees_per_dcl_statement() and grantees -%}\n          {%- set dcl = get_dcl_macro(relation, privilege, grantees) -%}\n          {%- do dcl_statements.append(dcl) -%}\n        {%- else -%}\n          {%- for grantee in grantees -%}\n              {% set dcl = get_dcl_macro(relation, privilege, [grantee]) %}\n              {%- do dcl_statements.append(dcl) -%}\n          {% endfor -%}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return(dcl_statements) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.support_multiple_grantees_per_dcl_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.1503623, "supported_languages": null}, "macro.dbt.call_dcl_statements": {"unique_id": "macro.dbt.call_dcl_statements", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "call_dcl_statements", "macro_sql": "{% macro call_dcl_statements(dcl_statement_list) %}\n    {{ return(adapter.dispatch(\"call_dcl_statements\", \"dbt\")(dcl_statement_list)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.1513617, "supported_languages": null}, "macro.dbt.default__call_dcl_statements": {"unique_id": "macro.dbt.default__call_dcl_statements", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__call_dcl_statements", "macro_sql": "{% macro default__call_dcl_statements(dcl_statement_list) %}\n    {#\n      -- By default, supply all grant + revoke statements in a single semicolon-separated block,\n      -- so that they're all processed together.\n\n      -- Some databases do not support this. Those adapters will need to override this macro\n      -- to run each statement individually.\n    #}\n    {% call statement('grants') %}\n        {% for dcl_statement in dcl_statement_list %}\n            {{ dcl_statement }};\n        {% endfor %}\n    {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.1523623, "supported_languages": null}, "macro.dbt.apply_grants": {"unique_id": "macro.dbt.apply_grants", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "apply_grants", "macro_sql": "{% macro apply_grants(relation, grant_config, should_revoke) %}\n    {{ return(adapter.dispatch(\"apply_grants\", \"dbt\")(relation, grant_config, should_revoke)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.1523623, "supported_languages": null}, "macro.dbt.default__apply_grants": {"unique_id": "macro.dbt.default__apply_grants", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\apply_grants.sql", "original_file_path": "macros\\adapters\\apply_grants.sql", "name": "default__apply_grants", "macro_sql": "{% macro default__apply_grants(relation, grant_config, should_revoke=True) %}\n    {#-- If grant_config is {} or None, this is a no-op --#}\n    {% if grant_config %}\n        {% if should_revoke %}\n            {#-- We think previous grants may have carried over --#}\n            {#-- Show current grants and calculate diffs --#}\n            {% set current_grants_table = run_query(get_show_grant_sql(relation)) %}\n            {% set current_grants_dict = adapter.standardize_grants_dict(current_grants_table) %}\n            {% set needs_granting = diff_of_two_dicts(grant_config, current_grants_dict) %}\n            {% set needs_revoking = diff_of_two_dicts(current_grants_dict, grant_config) %}\n            {% if not (needs_granting or needs_revoking) %}\n                {{ log('On ' ~ relation ~': All grants are in place, no revocation or granting needed.')}}\n            {% endif %}\n        {% else %}\n            {#-- We don't think there's any chance of previous grants having carried over. --#}\n            {#-- Jump straight to granting what the user has configured. --#}\n            {% set needs_revoking = {} %}\n            {% set needs_granting = grant_config %}\n        {% endif %}\n        {% if needs_granting or needs_revoking %}\n            {% set revoke_statement_list = get_dcl_statement_list(relation, needs_revoking, get_revoke_sql) %}\n            {% set grant_statement_list = get_dcl_statement_list(relation, needs_granting, get_grant_sql) %}\n            {% set dcl_statement_list = revoke_statement_list + grant_statement_list %}\n            {% if dcl_statement_list %}\n                {{ call_dcl_statements(dcl_statement_list) }}\n            {% endif %}\n        {% endif %}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.get_show_grant_sql", "macro.dbt.get_dcl_statement_list", "macro.dbt.call_dcl_statements"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.1828954, "supported_languages": null}, "macro.dbt.get_columns_in_relation": {"unique_id": "macro.dbt.get_columns_in_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "get_columns_in_relation", "macro_sql": "{% macro get_columns_in_relation(relation) -%}\n  {{ return(adapter.dispatch('get_columns_in_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.1889017, "supported_languages": null}, "macro.dbt.default__get_columns_in_relation": {"unique_id": "macro.dbt.default__get_columns_in_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__get_columns_in_relation", "macro_sql": "{% macro default__get_columns_in_relation(relation) -%}\n  {{ exceptions.raise_not_implemented(\n    'get_columns_in_relation macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.1899056, "supported_languages": null}, "macro.dbt.sql_convert_columns_in_relation": {"unique_id": "macro.dbt.sql_convert_columns_in_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "sql_convert_columns_in_relation", "macro_sql": "{% macro sql_convert_columns_in_relation(table) -%}\n  {% set columns = [] %}\n  {% for row in table %}\n    {% do columns.append(api.Column(*row)) %}\n  {% endfor %}\n  {{ return(columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.190903, "supported_languages": null}, "macro.dbt.get_columns_in_query": {"unique_id": "macro.dbt.get_columns_in_query", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "get_columns_in_query", "macro_sql": "{% macro get_columns_in_query(select_sql) -%}\n  {{ return(adapter.dispatch('get_columns_in_query', 'dbt')(select_sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.1919029, "supported_languages": null}, "macro.dbt.default__get_columns_in_query": {"unique_id": "macro.dbt.default__get_columns_in_query", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__get_columns_in_query", "macro_sql": "{% macro default__get_columns_in_query(select_sql) %}\n    {% call statement('get_columns_in_query', fetch_result=True, auto_begin=False) -%}\n        select * from (\n            {{ select_sql }}\n        ) as __dbt_sbq\n        where false\n        limit 0\n    {% endcall %}\n\n    {{ return(load_result('get_columns_in_query').table.columns | map(attribute='name') | list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.1929026, "supported_languages": null}, "macro.dbt.alter_column_type": {"unique_id": "macro.dbt.alter_column_type", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "alter_column_type", "macro_sql": "{% macro alter_column_type(relation, column_name, new_column_type) -%}\n  {{ return(adapter.dispatch('alter_column_type', 'dbt')(relation, column_name, new_column_type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.1934114, "supported_languages": null}, "macro.dbt.default__alter_column_type": {"unique_id": "macro.dbt.default__alter_column_type", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__alter_column_type", "macro_sql": "{% macro default__alter_column_type(relation, column_name, new_column_type) -%}\n  {#\n    1. Create a new column (w/ temp name and correct type)\n    2. Copy data over to it\n    3. Drop the existing column (cascade!)\n    4. Rename the new column to existing column\n  #}\n  {%- set tmp_column = column_name + \"__dbt_alter\" -%}\n\n  {% call statement('alter_column_type') %}\n    alter table {{ relation }} add column {{ adapter.quote(tmp_column) }} {{ new_column_type }};\n    update {{ relation }} set {{ adapter.quote(tmp_column) }} = {{ adapter.quote(column_name) }};\n    alter table {{ relation }} drop column {{ adapter.quote(column_name) }} cascade;\n    alter table {{ relation }} rename column {{ adapter.quote(tmp_column) }} to {{ adapter.quote(column_name) }}\n  {% endcall %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.1964278, "supported_languages": null}, "macro.dbt.alter_relation_add_remove_columns": {"unique_id": "macro.dbt.alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "alter_relation_add_remove_columns", "macro_sql": "{% macro alter_relation_add_remove_columns(relation, add_columns = none, remove_columns = none) -%}\n  {{ return(adapter.dispatch('alter_relation_add_remove_columns', 'dbt')(relation, add_columns, remove_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_add_remove_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.1974313, "supported_languages": null}, "macro.dbt.default__alter_relation_add_remove_columns": {"unique_id": "macro.dbt.default__alter_relation_add_remove_columns", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\columns.sql", "original_file_path": "macros\\adapters\\columns.sql", "name": "default__alter_relation_add_remove_columns", "macro_sql": "{% macro default__alter_relation_add_remove_columns(relation, add_columns, remove_columns) %}\n\n  {% if add_columns is none %}\n    {% set add_columns = [] %}\n  {% endif %}\n  {% if remove_columns is none %}\n    {% set remove_columns = [] %}\n  {% endif %}\n\n  {% set sql -%}\n\n     alter {{ relation.type }} {{ relation }}\n\n            {% for column in add_columns %}\n               add column {{ column.name }} {{ column.data_type }}{{ ',' if not loop.last }}\n            {% endfor %}{{ ',' if add_columns and remove_columns }}\n\n            {% for column in remove_columns %}\n                drop column {{ column.name }}{{ ',' if not loop.last }}\n            {% endfor %}\n\n  {%- endset -%}\n\n  {% do run_query(sql) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.1994283, "supported_languages": null}, "macro.dbt.collect_freshness": {"unique_id": "macro.dbt.collect_freshness", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "collect_freshness", "macro_sql": "{% macro collect_freshness(source, loaded_at_field, filter) %}\n  {{ return(adapter.dispatch('collect_freshness', 'dbt')(source, loaded_at_field, filter))}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__collect_freshness"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.2014298, "supported_languages": null}, "macro.dbt.default__collect_freshness": {"unique_id": "macro.dbt.default__collect_freshness", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\freshness.sql", "original_file_path": "macros\\adapters\\freshness.sql", "name": "default__collect_freshness", "macro_sql": "{% macro default__collect_freshness(source, loaded_at_field, filter) %}\n  {% call statement('collect_freshness', fetch_result=True, auto_begin=False) -%}\n    select\n      max({{ loaded_at_field }}) as max_loaded_at,\n      {{ current_timestamp() }} as snapshotted_at\n    from {{ source }}\n    {% if filter %}\n    where {{ filter }}\n    {% endif %}\n  {% endcall %}\n  {{ return(load_result('collect_freshness').table) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.2044334, "supported_languages": null}, "macro.dbt.get_create_index_sql": {"unique_id": "macro.dbt.get_create_index_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "get_create_index_sql", "macro_sql": "{% macro get_create_index_sql(relation, index_dict) -%}\n  {{ return(adapter.dispatch('get_create_index_sql', 'dbt')(relation, index_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_index_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.2074325, "supported_languages": null}, "macro.dbt.default__get_create_index_sql": {"unique_id": "macro.dbt.default__get_create_index_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "default__get_create_index_sql", "macro_sql": "{% macro default__get_create_index_sql(relation, index_dict) -%}\n  {% do return(None) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.2084324, "supported_languages": null}, "macro.dbt.create_indexes": {"unique_id": "macro.dbt.create_indexes", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "create_indexes", "macro_sql": "{% macro create_indexes(relation) -%}\n  {{ adapter.dispatch('create_indexes', 'dbt')(relation) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.2084324, "supported_languages": null}, "macro.dbt.default__create_indexes": {"unique_id": "macro.dbt.default__create_indexes", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\indexes.sql", "original_file_path": "macros\\adapters\\indexes.sql", "name": "default__create_indexes", "macro_sql": "{% macro default__create_indexes(relation) -%}\n  {%- set _indexes = config.get('indexes', default=[]) -%}\n\n  {% for _index_dict in _indexes %}\n    {% set create_index_sql = get_create_index_sql(relation, _index_dict) %}\n    {% if create_index_sql %}\n      {% do run_query(create_index_sql) %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_create_index_sql", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.21096, "supported_languages": null}, "macro.dbt.get_catalog": {"unique_id": "macro.dbt.get_catalog", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "get_catalog", "macro_sql": "{% macro get_catalog(information_schema, schemas) -%}\n  {{ return(adapter.dispatch('get_catalog', 'dbt')(information_schema, schemas)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_catalog"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.2249649, "supported_languages": null}, "macro.dbt.default__get_catalog": {"unique_id": "macro.dbt.default__get_catalog", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__get_catalog", "macro_sql": "{% macro default__get_catalog(information_schema, schemas) -%}\n\n  {% set typename = adapter.type() %}\n  {% set msg -%}\n    get_catalog not implemented for {{ typename }}\n  {%- endset %}\n\n  {{ exceptions.raise_compiler_error(msg) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.2264807, "supported_languages": null}, "macro.dbt.information_schema_name": {"unique_id": "macro.dbt.information_schema_name", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "information_schema_name", "macro_sql": "{% macro information_schema_name(database) %}\n  {{ return(adapter.dispatch('information_schema_name', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__information_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.2264807, "supported_languages": null}, "macro.dbt.default__information_schema_name": {"unique_id": "macro.dbt.default__information_schema_name", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__information_schema_name", "macro_sql": "{% macro default__information_schema_name(database) -%}\n  {%- if database -%}\n    {{ database }}.INFORMATION_SCHEMA\n  {%- else -%}\n    INFORMATION_SCHEMA\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.227499, "supported_languages": null}, "macro.dbt.list_schemas": {"unique_id": "macro.dbt.list_schemas", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "list_schemas", "macro_sql": "{% macro list_schemas(database) -%}\n  {{ return(adapter.dispatch('list_schemas', 'dbt')(database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.228513, "supported_languages": null}, "macro.dbt.default__list_schemas": {"unique_id": "macro.dbt.default__list_schemas", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__list_schemas", "macro_sql": "{% macro default__list_schemas(database) -%}\n  {% set sql %}\n    select distinct schema_name\n    from {{ information_schema_name(database) }}.SCHEMATA\n    where catalog_name ilike '{{ database }}'\n  {% endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.information_schema_name", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.228513, "supported_languages": null}, "macro.dbt.check_schema_exists": {"unique_id": "macro.dbt.check_schema_exists", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "check_schema_exists", "macro_sql": "{% macro check_schema_exists(information_schema, schema) -%}\n  {{ return(adapter.dispatch('check_schema_exists', 'dbt')(information_schema, schema)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__check_schema_exists"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.229513, "supported_languages": null}, "macro.dbt.default__check_schema_exists": {"unique_id": "macro.dbt.default__check_schema_exists", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__check_schema_exists", "macro_sql": "{% macro default__check_schema_exists(information_schema, schema) -%}\n  {% set sql -%}\n        select count(*)\n        from {{ information_schema.replace(information_schema_view='SCHEMATA') }}\n        where catalog_name='{{ information_schema.database }}'\n          and schema_name='{{ schema }}'\n  {%- endset %}\n  {{ return(run_query(sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.2305124, "supported_languages": null}, "macro.dbt.list_relations_without_caching": {"unique_id": "macro.dbt.list_relations_without_caching", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "list_relations_without_caching", "macro_sql": "{% macro list_relations_without_caching(schema_relation) %}\n  {{ return(adapter.dispatch('list_relations_without_caching', 'dbt')(schema_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__list_relations_without_caching"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.231513, "supported_languages": null}, "macro.dbt.default__list_relations_without_caching": {"unique_id": "macro.dbt.default__list_relations_without_caching", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\metadata.sql", "original_file_path": "macros\\adapters\\metadata.sql", "name": "default__list_relations_without_caching", "macro_sql": "{% macro default__list_relations_without_caching(schema_relation) %}\n  {{ exceptions.raise_not_implemented(\n    'list_relations_without_caching macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.231513, "supported_languages": null}, "macro.dbt.alter_column_comment": {"unique_id": "macro.dbt.alter_column_comment", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "alter_column_comment", "macro_sql": "{% macro alter_column_comment(relation, column_dict) -%}\n  {{ return(adapter.dispatch('alter_column_comment', 'dbt')(relation, column_dict)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.2356641, "supported_languages": null}, "macro.dbt.default__alter_column_comment": {"unique_id": "macro.dbt.default__alter_column_comment", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__alter_column_comment", "macro_sql": "{% macro default__alter_column_comment(relation, column_dict) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_column_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.2366767, "supported_languages": null}, "macro.dbt.alter_relation_comment": {"unique_id": "macro.dbt.alter_relation_comment", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "alter_relation_comment", "macro_sql": "{% macro alter_relation_comment(relation, relation_comment) -%}\n  {{ return(adapter.dispatch('alter_relation_comment', 'dbt')(relation, relation_comment)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__alter_relation_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.237675, "supported_languages": null}, "macro.dbt.default__alter_relation_comment": {"unique_id": "macro.dbt.default__alter_relation_comment", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__alter_relation_comment", "macro_sql": "{% macro default__alter_relation_comment(relation, relation_comment) -%}\n  {{ exceptions.raise_not_implemented(\n    'alter_relation_comment macro not implemented for adapter '+adapter.type()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.2386742, "supported_languages": null}, "macro.dbt.persist_docs": {"unique_id": "macro.dbt.persist_docs", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "persist_docs", "macro_sql": "{% macro persist_docs(relation, model, for_relation=true, for_columns=true) -%}\n  {{ return(adapter.dispatch('persist_docs', 'dbt')(relation, model, for_relation, for_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.2406814, "supported_languages": null}, "macro.dbt.default__persist_docs": {"unique_id": "macro.dbt.default__persist_docs", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\persist_docs.sql", "original_file_path": "macros\\adapters\\persist_docs.sql", "name": "default__persist_docs", "macro_sql": "{% macro default__persist_docs(relation, model, for_relation, for_columns) -%}\n  {% if for_relation and config.persist_relation_docs() and model.description %}\n    {% do run_query(alter_relation_comment(relation, model.description)) %}\n  {% endif %}\n\n  {% if for_columns and config.persist_column_docs() and model.columns %}\n    {% do run_query(alter_column_comment(relation, model.columns)) %}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query", "macro.dbt.alter_relation_comment", "macro.dbt.alter_column_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.2431993, "supported_languages": null}, "macro.dbt.make_intermediate_relation": {"unique_id": "macro.dbt.make_intermediate_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "make_intermediate_relation", "macro_sql": "{% macro make_intermediate_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_intermediate_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_intermediate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.2542253, "supported_languages": null}, "macro.dbt.default__make_intermediate_relation": {"unique_id": "macro.dbt.default__make_intermediate_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__make_intermediate_relation", "macro_sql": "{% macro default__make_intermediate_relation(base_relation, suffix) %}\n    {{ return(default__make_temp_relation(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.255226, "supported_languages": null}, "macro.dbt.make_temp_relation": {"unique_id": "macro.dbt.make_temp_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "make_temp_relation", "macro_sql": "{% macro make_temp_relation(base_relation, suffix='__dbt_tmp') %}\n  {{ return(adapter.dispatch('make_temp_relation', 'dbt')(base_relation, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_temp_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.2562253, "supported_languages": null}, "macro.dbt.default__make_temp_relation": {"unique_id": "macro.dbt.default__make_temp_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__make_temp_relation", "macro_sql": "{% macro default__make_temp_relation(base_relation, suffix) %}\n    {%- set temp_identifier = base_relation.identifier ~ suffix -%}\n    {%- set temp_relation = base_relation.incorporate(\n                                path={\"identifier\": temp_identifier}) -%}\n\n    {{ return(temp_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.2572253, "supported_languages": null}, "macro.dbt.make_backup_relation": {"unique_id": "macro.dbt.make_backup_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "make_backup_relation", "macro_sql": "{% macro make_backup_relation(base_relation, backup_relation_type, suffix='__dbt_backup') %}\n    {{ return(adapter.dispatch('make_backup_relation', 'dbt')(base_relation, backup_relation_type, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__make_backup_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.258226, "supported_languages": null}, "macro.dbt.default__make_backup_relation": {"unique_id": "macro.dbt.default__make_backup_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__make_backup_relation", "macro_sql": "{% macro default__make_backup_relation(base_relation, backup_relation_type, suffix) %}\n    {%- set backup_identifier = base_relation.identifier ~ suffix -%}\n    {%- set backup_relation = base_relation.incorporate(\n                                  path={\"identifier\": backup_identifier},\n                                  type=backup_relation_type\n    ) -%}\n    {{ return(backup_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.258226, "supported_languages": null}, "macro.dbt.drop_relation": {"unique_id": "macro.dbt.drop_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "drop_relation", "macro_sql": "{% macro drop_relation(relation) -%}\n  {{ return(adapter.dispatch('drop_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.259729, "supported_languages": null}, "macro.dbt.default__drop_relation": {"unique_id": "macro.dbt.default__drop_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__drop_relation", "macro_sql": "{% macro default__drop_relation(relation) -%}\n  {% call statement('drop_relation', auto_begin=False) -%}\n    drop {{ relation.type }} if exists {{ relation }} cascade\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.2607343, "supported_languages": null}, "macro.dbt.truncate_relation": {"unique_id": "macro.dbt.truncate_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "truncate_relation", "macro_sql": "{% macro truncate_relation(relation) -%}\n  {{ return(adapter.dispatch('truncate_relation', 'dbt')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__truncate_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.2617338, "supported_languages": null}, "macro.dbt.default__truncate_relation": {"unique_id": "macro.dbt.default__truncate_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__truncate_relation", "macro_sql": "{% macro default__truncate_relation(relation) -%}\n  {% call statement('truncate_relation') -%}\n    truncate table {{ relation }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.2617338, "supported_languages": null}, "macro.dbt.rename_relation": {"unique_id": "macro.dbt.rename_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "rename_relation", "macro_sql": "{% macro rename_relation(from_relation, to_relation) -%}\n  {{ return(adapter.dispatch('rename_relation', 'dbt')(from_relation, to_relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__rename_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.2627332, "supported_languages": null}, "macro.dbt.default__rename_relation": {"unique_id": "macro.dbt.default__rename_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__rename_relation", "macro_sql": "{% macro default__rename_relation(from_relation, to_relation) -%}\n  {% set target_name = adapter.quote_as_configured(to_relation.identifier, 'identifier') %}\n  {% call statement('rename_relation') -%}\n    alter table {{ from_relation }} rename to {{ target_name }}\n  {%- endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.2637331, "supported_languages": null}, "macro.dbt.get_or_create_relation": {"unique_id": "macro.dbt.get_or_create_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "get_or_create_relation", "macro_sql": "{% macro get_or_create_relation(database, schema, identifier, type) -%}\n  {{ return(adapter.dispatch('get_or_create_relation', 'dbt')(database, schema, identifier, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_or_create_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.2712438, "supported_languages": null}, "macro.dbt.default__get_or_create_relation": {"unique_id": "macro.dbt.default__get_or_create_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "default__get_or_create_relation", "macro_sql": "{% macro default__get_or_create_relation(database, schema, identifier, type) %}\n  {%- set target_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n\n  {% if target_relation %}\n    {% do return([true, target_relation]) %}\n  {% endif %}\n\n  {%- set new_relation = api.Relation.create(\n      database=database,\n      schema=schema,\n      identifier=identifier,\n      type=type\n  ) -%}\n  {% do return([false, new_relation]) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.2732468, "supported_languages": null}, "macro.dbt.load_cached_relation": {"unique_id": "macro.dbt.load_cached_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "load_cached_relation", "macro_sql": "{% macro load_cached_relation(relation) %}\n  {% do return(adapter.get_relation(\n    database=relation.database,\n    schema=relation.schema,\n    identifier=relation.identifier\n  )) -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.2742474, "supported_languages": null}, "macro.dbt.load_relation": {"unique_id": "macro.dbt.load_relation", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "load_relation", "macro_sql": "{% macro load_relation(relation) %}\n    {{ return(load_cached_relation(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.2742474, "supported_languages": null}, "macro.dbt.drop_relation_if_exists": {"unique_id": "macro.dbt.drop_relation_if_exists", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\relation.sql", "original_file_path": "macros\\adapters\\relation.sql", "name": "drop_relation_if_exists", "macro_sql": "{% macro drop_relation_if_exists(relation) %}\n  {% if relation is not none %}\n    {{ adapter.drop_relation(relation) }}\n  {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.2752473, "supported_languages": null}, "macro.dbt.create_schema": {"unique_id": "macro.dbt.create_schema", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "create_schema", "macro_sql": "{% macro create_schema(relation) -%}\n  {{ adapter.dispatch('create_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.276763, "supported_languages": null}, "macro.dbt.default__create_schema": {"unique_id": "macro.dbt.default__create_schema", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "default__create_schema", "macro_sql": "{% macro default__create_schema(relation) -%}\n  {%- call statement('create_schema') -%}\n    create schema if not exists {{ relation.without_identifier() }}\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.2777708, "supported_languages": null}, "macro.dbt.drop_schema": {"unique_id": "macro.dbt.drop_schema", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "drop_schema", "macro_sql": "{% macro drop_schema(relation) -%}\n  {{ adapter.dispatch('drop_schema', 'dbt')(relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__drop_schema"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.2777708, "supported_languages": null}, "macro.dbt.default__drop_schema": {"unique_id": "macro.dbt.default__drop_schema", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\schema.sql", "original_file_path": "macros\\adapters\\schema.sql", "name": "default__drop_schema", "macro_sql": "{% macro default__drop_schema(relation) -%}\n  {%- call statement('drop_schema') -%}\n    drop schema if exists {{ relation.without_identifier() }} cascade\n  {% endcall %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.2787783, "supported_languages": null}, "macro.dbt.current_timestamp": {"unique_id": "macro.dbt.current_timestamp", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "current_timestamp", "macro_sql": "{%- macro current_timestamp() -%}\n    {{ adapter.dispatch('current_timestamp', 'dbt')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.281775, "supported_languages": null}, "macro.dbt.default__current_timestamp": {"unique_id": "macro.dbt.default__current_timestamp", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() -%}\n  {{ exceptions.raise_not_implemented(\n    'current_timestamp macro not implemented for adapter ' + adapter.type()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.282779, "supported_languages": null}, "macro.dbt.snapshot_get_time": {"unique_id": "macro.dbt.snapshot_get_time", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "snapshot_get_time", "macro_sql": "\n\n{%- macro snapshot_get_time() -%}\n    {{ adapter.dispatch('snapshot_get_time', 'dbt')() }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.282779, "supported_languages": null}, "macro.dbt.default__snapshot_get_time": {"unique_id": "macro.dbt.default__snapshot_get_time", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "default__snapshot_get_time", "macro_sql": "{% macro default__snapshot_get_time() %}\n    {{ current_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.2837925, "supported_languages": null}, "macro.dbt.current_timestamp_backcompat": {"unique_id": "macro.dbt.current_timestamp_backcompat", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "current_timestamp_backcompat", "macro_sql": "{% macro current_timestamp_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.2847931, "supported_languages": null}, "macro.dbt.default__current_timestamp_backcompat": {"unique_id": "macro.dbt.default__current_timestamp_backcompat", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "default__current_timestamp_backcompat", "macro_sql": "{% macro default__current_timestamp_backcompat() %}\n    current_timestamp::timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.2847931, "supported_languages": null}, "macro.dbt.current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt.current_timestamp_in_utc_backcompat", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "current_timestamp_in_utc_backcompat", "macro_sql": "{% macro current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_in_utc_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__current_timestamp_in_utc_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.28579, "supported_languages": null}, "macro.dbt.default__current_timestamp_in_utc_backcompat": {"unique_id": "macro.dbt.default__current_timestamp_in_utc_backcompat", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\adapters\\timestamps.sql", "original_file_path": "macros\\adapters\\timestamps.sql", "name": "default__current_timestamp_in_utc_backcompat", "macro_sql": "{% macro default__current_timestamp_in_utc_backcompat() %}\n    {{ return(adapter.dispatch('current_timestamp_backcompat', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.current_timestamp_backcompat", "macro.dbt_snowflake.snowflake__current_timestamp_backcompat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.2867794, "supported_languages": null}, "macro.dbt.convert_datetime": {"unique_id": "macro.dbt.convert_datetime", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "convert_datetime", "macro_sql": "{% macro convert_datetime(date_str, date_fmt) %}\n\n  {% set error_msg -%}\n      The provided partition date '{{ date_str }}' does not match the expected format '{{ date_fmt }}'\n  {%- endset %}\n\n  {% set res = try_or_compiler_error(error_msg, modules.datetime.datetime.strptime, date_str.strip(), date_fmt) %}\n  {{ return(res) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.295606, "supported_languages": null}, "macro.dbt.dates_in_range": {"unique_id": "macro.dbt.dates_in_range", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "dates_in_range", "macro_sql": "{% macro dates_in_range(start_date_str, end_date_str=none, in_fmt=\"%Y%m%d\", out_fmt=\"%Y%m%d\") %}\n    {% set end_date_str = start_date_str if end_date_str is none else end_date_str %}\n\n    {% set start_date = convert_datetime(start_date_str, in_fmt) %}\n    {% set end_date = convert_datetime(end_date_str, in_fmt) %}\n\n    {% set day_count = (end_date - start_date).days %}\n    {% if day_count < 0 %}\n        {% set msg -%}\n            Partiton start date is after the end date ({{ start_date }}, {{ end_date }})\n        {%- endset %}\n\n        {{ exceptions.raise_compiler_error(msg, model) }}\n    {% endif %}\n\n    {% set date_list = [] %}\n    {% for i in range(0, day_count + 1) %}\n        {% set the_date = (modules.datetime.timedelta(days=i) + start_date) %}\n        {% if not out_fmt %}\n            {% set _ = date_list.append(the_date) %}\n        {% else %}\n            {% set _ = date_list.append(the_date.strftime(out_fmt)) %}\n        {% endif %}\n    {% endfor %}\n\n    {{ return(date_list) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.convert_datetime"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.3086028, "supported_languages": null}, "macro.dbt.partition_range": {"unique_id": "macro.dbt.partition_range", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "partition_range", "macro_sql": "{% macro partition_range(raw_partition_date, date_fmt='%Y%m%d') %}\n    {% set partition_range = (raw_partition_date | string).split(\",\") %}\n\n    {% if (partition_range | length) == 1 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = none %}\n    {% elif (partition_range | length) == 2 %}\n      {% set start_date = partition_range[0] %}\n      {% set end_date = partition_range[1] %}\n    {% else %}\n      {{ exceptions.raise_compiler_error(\"Invalid partition time. Expected format: {Start Date}[,{End Date}]. Got: \" ~ raw_partition_date) }}\n    {% endif %}\n\n    {{ return(dates_in_range(start_date, end_date, in_fmt=date_fmt)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dates_in_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.3123553, "supported_languages": null}, "macro.dbt.py_current_timestring": {"unique_id": "macro.dbt.py_current_timestring", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\datetime.sql", "original_file_path": "macros\\etc\\datetime.sql", "name": "py_current_timestring", "macro_sql": "{% macro py_current_timestring() %}\n    {% set dt = modules.datetime.datetime.now() %}\n    {% do return(dt.strftime(\"%Y%m%d%H%M%S%f\")) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.3145618, "supported_languages": null}, "macro.dbt.statement": {"unique_id": "macro.dbt.statement", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "statement", "macro_sql": "\n{%- macro statement(name=None, fetch_result=False, auto_begin=True, language='sql') -%}\n  {%- if execute: -%}\n    {%- set compiled_code = caller() -%}\n\n    {%- if name == 'main' -%}\n      {{ log('Writing runtime {} for node \"{}\"'.format(language, model['unique_id'])) }}\n      {{ write(compiled_code) }}\n    {%- endif -%}\n    {%- if language == 'sql'-%}\n      {%- set res, table = adapter.execute(compiled_code, auto_begin=auto_begin, fetch=fetch_result) -%}\n    {%- elif language == 'python' -%}\n      {%- set res = submit_python_job(model, compiled_code) -%}\n      {#-- TODO: What should table be for python models? --#}\n      {%- set table = None -%}\n    {%- else -%}\n      {% do exceptions.raise_compiler_error(\"statement macro didn't get supported language\") %}\n    {%- endif -%}\n\n    {%- if name is not none -%}\n      {{ store_result(name, response=res, agate_table=table) }}\n    {%- endif -%}\n\n  {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.320441, "supported_languages": null}, "macro.dbt.noop_statement": {"unique_id": "macro.dbt.noop_statement", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "noop_statement", "macro_sql": "{% macro noop_statement(name=None, message=None, code=None, rows_affected=None, res=None) -%}\n  {%- set sql = caller() -%}\n\n  {%- if name == 'main' -%}\n    {{ log('Writing runtime SQL for node \"{}\"'.format(model['unique_id'])) }}\n    {{ write(sql) }}\n  {%- endif -%}\n\n  {%- if name is not none -%}\n    {{ store_raw_result(name, message=message, code=code, rows_affected=rows_affected, agate_table=res) }}\n  {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.3224418, "supported_languages": null}, "macro.dbt.run_query": {"unique_id": "macro.dbt.run_query", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\etc\\statement.sql", "original_file_path": "macros\\etc\\statement.sql", "name": "run_query", "macro_sql": "{% macro run_query(sql) %}\n  {% call statement(\"run_query_statement\", fetch_result=true, auto_begin=false) %}\n    {{ sql }}\n  {% endcall %}\n\n  {% do return(load_result(\"run_query_statement\").table) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.3244421, "supported_languages": null}, "macro.dbt.default__test_accepted_values": {"unique_id": "macro.dbt.default__test_accepted_values", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\accepted_values.sql", "original_file_path": "macros\\generic_test_sql\\accepted_values.sql", "name": "default__test_accepted_values", "macro_sql": "{% macro default__test_accepted_values(model, column_name, values, quote=True) %}\n\nwith all_values as (\n\n    select\n        {{ column_name }} as value_field,\n        count(*) as n_records\n\n    from {{ model }}\n    group by {{ column_name }}\n\n)\n\nselect *\nfrom all_values\nwhere value_field not in (\n    {% for value in values -%}\n        {% if quote -%}\n        '{{ value }}'\n        {%- else -%}\n        {{ value }}\n        {%- endif -%}\n        {%- if not loop.last -%},{%- endif %}\n    {%- endfor %}\n)\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.326945, "supported_languages": null}, "macro.dbt.default__test_not_null": {"unique_id": "macro.dbt.default__test_not_null", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\not_null.sql", "original_file_path": "macros\\generic_test_sql\\not_null.sql", "name": "default__test_not_null", "macro_sql": "{% macro default__test_not_null(model, column_name) %}\n\n{% set column_list = '*' if should_store_failures() else column_name %}\n\nselect {{ column_list }}\nfrom {{ model }}\nwhere {{ column_name }} is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.3279486, "supported_languages": null}, "macro.dbt.default__test_relationships": {"unique_id": "macro.dbt.default__test_relationships", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\relationships.sql", "original_file_path": "macros\\generic_test_sql\\relationships.sql", "name": "default__test_relationships", "macro_sql": "{% macro default__test_relationships(model, column_name, to, field) %}\n\nwith child as (\n    select {{ column_name }} as from_field\n    from {{ model }}\n    where {{ column_name }} is not null\n),\n\nparent as (\n    select {{ field }} as to_field\n    from {{ to }}\n)\n\nselect\n    from_field\n\nfrom child\nleft join parent\n    on child.from_field = parent.to_field\n\nwhere parent.to_field is null\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.3299575, "supported_languages": null}, "macro.dbt.default__test_unique": {"unique_id": "macro.dbt.default__test_unique", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\generic_test_sql\\unique.sql", "original_file_path": "macros\\generic_test_sql\\unique.sql", "name": "default__test_unique", "macro_sql": "{% macro default__test_unique(model, column_name) %}\n\nselect\n    {{ column_name }} as unique_field,\n    count(*) as n_records\n\nfrom {{ model }}\nwhere {{ column_name }} is not null\ngroup by {{ column_name }}\nhaving count(*) > 1\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.3309567, "supported_languages": null}, "macro.dbt.generate_alias_name": {"unique_id": "macro.dbt.generate_alias_name", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "name": "generate_alias_name", "macro_sql": "{% macro generate_alias_name(custom_alias_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_alias_name', 'dbt')(custom_alias_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_alias_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.3329573, "supported_languages": null}, "macro.dbt.default__generate_alias_name": {"unique_id": "macro.dbt.default__generate_alias_name", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_alias.sql", "original_file_path": "macros\\get_custom_name\\get_custom_alias.sql", "name": "default__generate_alias_name", "macro_sql": "{% macro default__generate_alias_name(custom_alias_name=none, node=none) -%}\n\n    {%- if custom_alias_name is none -%}\n\n        {{ node.name }}\n\n    {%- else -%}\n\n        {{ custom_alias_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.3339572, "supported_languages": null}, "macro.dbt.generate_database_name": {"unique_id": "macro.dbt.generate_database_name", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "name": "generate_database_name", "macro_sql": "{% macro generate_database_name(custom_database_name=none, node=none) -%}\n    {% do return(adapter.dispatch('generate_database_name', 'dbt')(custom_database_name, node)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__generate_database_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.335957, "supported_languages": null}, "macro.dbt.default__generate_database_name": {"unique_id": "macro.dbt.default__generate_database_name", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_database.sql", "original_file_path": "macros\\get_custom_name\\get_custom_database.sql", "name": "default__generate_database_name", "macro_sql": "{% macro default__generate_database_name(custom_database_name=none, node=none) -%}\n    {%- set default_database = target.database -%}\n    {%- if custom_database_name is none -%}\n\n        {{ default_database }}\n\n    {%- else -%}\n\n        {{ custom_database_name }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.335957, "supported_languages": null}, "macro.dbt.generate_schema_name": {"unique_id": "macro.dbt.generate_schema_name", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "generate_schema_name", "macro_sql": "{% macro generate_schema_name(custom_schema_name=none, node=none) -%}\n    {{ return(adapter.dispatch('generate_schema_name', 'dbt')(custom_schema_name, node)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.the_tuva_project.default__generate_schema_name"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.337957, "supported_languages": null}, "macro.dbt.default__generate_schema_name": {"unique_id": "macro.dbt.default__generate_schema_name", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is none -%}\n\n        {{ default_schema }}\n\n    {%- else -%}\n\n        {{ default_schema }}_{{ custom_schema_name | trim }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.3389568, "supported_languages": null}, "macro.dbt.generate_schema_name_for_env": {"unique_id": "macro.dbt.generate_schema_name_for_env", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\get_custom_name\\get_custom_schema.sql", "original_file_path": "macros\\get_custom_name\\get_custom_schema.sql", "name": "generate_schema_name_for_env", "macro_sql": "{% macro generate_schema_name_for_env(custom_schema_name, node) -%}\n\n    {%- set default_schema = target.schema -%}\n    {%- if target.name == 'prod' and custom_schema_name is not none -%}\n\n        {{ custom_schema_name | trim }}\n\n    {%- else -%}\n\n        {{ default_schema }}\n\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.3399565, "supported_languages": null}, "macro.dbt.set_sql_header": {"unique_id": "macro.dbt.set_sql_header", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "set_sql_header", "macro_sql": "{% macro set_sql_header(config) -%}\n  {{ config.set('sql_header', caller()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.341957, "supported_languages": null}, "macro.dbt.should_full_refresh": {"unique_id": "macro.dbt.should_full_refresh", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "should_full_refresh", "macro_sql": "{% macro should_full_refresh() %}\n  {% set config_full_refresh = config.get('full_refresh') %}\n  {% if config_full_refresh is none %}\n    {% set config_full_refresh = flags.FULL_REFRESH %}\n  {% endif %}\n  {% do return(config_full_refresh) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.3494732, "supported_languages": null}, "macro.dbt.should_store_failures": {"unique_id": "macro.dbt.should_store_failures", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\configs.sql", "original_file_path": "macros\\materializations\\configs.sql", "name": "should_store_failures", "macro_sql": "{% macro should_store_failures() %}\n  {% set config_store_failures = config.get('store_failures') %}\n  {% if config_store_failures is none %}\n    {% set config_store_failures = flags.STORE_FAILURES %}\n  {% endif %}\n  {% do return(config_store_failures) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.3504722, "supported_languages": null}, "macro.dbt.run_hooks": {"unique_id": "macro.dbt.run_hooks", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "run_hooks", "macro_sql": "{% macro run_hooks(hooks, inside_transaction=True) %}\n  {% for hook in hooks | selectattr('transaction', 'equalto', inside_transaction)  %}\n    {% if not inside_transaction and loop.first %}\n      {% call statement(auto_begin=inside_transaction) %}\n        commit;\n      {% endcall %}\n    {% endif %}\n    {% set rendered = render(hook.get('sql')) | trim %}\n    {% if (rendered | length) > 0 %}\n      {% call statement(auto_begin=inside_transaction) %}\n        {{ rendered }}\n      {% endcall %}\n    {% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.3544712, "supported_languages": null}, "macro.dbt.make_hook_config": {"unique_id": "macro.dbt.make_hook_config", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "make_hook_config", "macro_sql": "{% macro make_hook_config(sql, inside_transaction) %}\n    {{ tojson({\"sql\": sql, \"transaction\": inside_transaction}) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.3554714, "supported_languages": null}, "macro.dbt.before_begin": {"unique_id": "macro.dbt.before_begin", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "before_begin", "macro_sql": "{% macro before_begin(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.3554714, "supported_languages": null}, "macro.dbt.in_transaction": {"unique_id": "macro.dbt.in_transaction", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "in_transaction", "macro_sql": "{% macro in_transaction(sql) %}\n    {{ make_hook_config(sql, inside_transaction=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.3564713, "supported_languages": null}, "macro.dbt.after_commit": {"unique_id": "macro.dbt.after_commit", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\hooks.sql", "original_file_path": "macros\\materializations\\hooks.sql", "name": "after_commit", "macro_sql": "{% macro after_commit(sql) %}\n    {{ make_hook_config(sql, inside_transaction=False) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_hook_config"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.3564713, "supported_languages": null}, "macro.dbt.get_quoted_csv": {"unique_id": "macro.dbt.get_quoted_csv", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "get_quoted_csv", "macro_sql": "{% macro get_quoted_csv(column_names) %}\n\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote(col)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.3629854, "supported_languages": null}, "macro.dbt.diff_columns": {"unique_id": "macro.dbt.diff_columns", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "diff_columns", "macro_sql": "{% macro diff_columns(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% set source_names = source_columns | map(attribute = 'column') | list %}\n  {% set target_names = target_columns | map(attribute = 'column') | list %}\n\n   {# --check whether the name attribute exists in the target - this does not perform a data type check #}\n   {% for sc in source_columns %}\n     {% if sc.name not in target_names %}\n        {{ result.append(sc) }}\n     {% endif %}\n   {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.3649914, "supported_languages": null}, "macro.dbt.diff_column_data_types": {"unique_id": "macro.dbt.diff_column_data_types", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "diff_column_data_types", "macro_sql": "{% macro diff_column_data_types(source_columns, target_columns) %}\n\n  {% set result = [] %}\n  {% for sc in source_columns %}\n    {% set tc = target_columns | selectattr(\"name\", \"equalto\", sc.name) | list | first %}\n    {% if tc %}\n      {% if sc.data_type != tc.data_type and not sc.can_expand_to(other_column=tc) %}\n        {{ result.append( { 'column_name': tc.name, 'new_type': sc.data_type } ) }}\n      {% endif %}\n    {% endif %}\n  {% endfor %}\n\n  {{ return(result) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.3665166, "supported_languages": null}, "macro.dbt.get_merge_update_columns": {"unique_id": "macro.dbt.get_merge_update_columns", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "get_merge_update_columns", "macro_sql": "{% macro get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {{ return(adapter.dispatch('get_merge_update_columns', 'dbt')(merge_update_columns, merge_exclude_columns, dest_columns)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.3675222, "supported_languages": null}, "macro.dbt.default__get_merge_update_columns": {"unique_id": "macro.dbt.default__get_merge_update_columns", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "original_file_path": "macros\\materializations\\models\\incremental\\column_helpers.sql", "name": "default__get_merge_update_columns", "macro_sql": "{% macro default__get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) %}\n  {%- set default_cols = dest_columns | map(attribute=\"quoted\") | list -%}\n\n  {%- if merge_update_columns and merge_exclude_columns -%}\n    {{ exceptions.raise_compiler_error(\n        'Model cannot specify merge_update_columns and merge_exclude_columns. Please update model to use only one config'\n    )}}\n  {%- elif merge_update_columns -%}\n    {%- set update_columns = merge_update_columns -%}\n  {%- elif merge_exclude_columns -%}\n    {%- set update_columns = [] -%}\n    {%- for column in dest_columns -%}\n      {% if column.column | lower not in merge_exclude_columns | map(\"lower\") | list %}\n        {%- do update_columns.append(column.quoted) -%}\n      {% endif %}\n    {%- endfor -%}\n  {%- else -%}\n    {%- set update_columns = default_cols -%}\n  {%- endif -%}\n\n  {{ return(update_columns) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.3695219, "supported_languages": null}, "macro.dbt.materialization_incremental_default": {"unique_id": "macro.dbt.materialization_incremental_default", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\incremental.sql", "name": "materialization_incremental_default", "macro_sql": "{% materialization incremental, default -%}\n\n  -- relations\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') -%}\n  {%- set temp_relation = make_temp_relation(target_relation)-%}\n  {%- set intermediate_relation = make_intermediate_relation(target_relation)-%}\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n\n  -- configs\n  {%- set unique_key = config.get('unique_key') -%}\n  {%- set full_refresh_mode = (should_full_refresh()  or existing_relation.is_view) -%}\n  {%- set on_schema_change = incremental_validate_on_schema_change(config.get('on_schema_change'), default='ignore') -%}\n\n  -- the temp_ and backup_ relations should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation. This has to happen before\n  -- BEGIN, in a separate transaction\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation)-%}\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n   -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set to_drop = [] %}\n\n  {% if existing_relation is none %}\n      {% set build_sql = get_create_table_as_sql(False, target_relation, sql) %}\n  {% elif full_refresh_mode %}\n      {% set build_sql = get_create_table_as_sql(False, intermediate_relation, sql) %}\n      {% set need_swap = true %}\n  {% else %}\n    {% do run_query(get_create_table_as_sql(True, temp_relation, sql)) %}\n    {% do adapter.expand_target_column_types(\n             from_relation=temp_relation,\n             to_relation=target_relation) %}\n    {#-- Process schema changes. Returns dict of changes if successful. Use source columns for upserting/merging --#}\n    {% set dest_columns = process_schema_changes(on_schema_change, temp_relation, existing_relation) %}\n    {% if not dest_columns %}\n      {% set dest_columns = adapter.get_columns_in_relation(existing_relation) %}\n    {% endif %}\n\n    {#-- Get the incremental_strategy, the macro to use for the strategy, and build the sql --#}\n    {% set incremental_strategy = config.get('incremental_strategy') or 'default' %}\n    {% set incremental_predicates = config.get('incremental_predicates', none) %}\n    {% set strategy_sql_macro_func = adapter.get_incremental_strategy_macro(context, incremental_strategy) %}\n    {% set strategy_arg_dict = ({'target_relation': target_relation, 'temp_relation': temp_relation, 'unique_key': unique_key, 'dest_columns': dest_columns, 'predicates': incremental_predicates }) %}\n    {% set build_sql = strategy_sql_macro_func(strategy_arg_dict) %}\n\n  {% endif %}\n\n  {% call statement(\"main\") %}\n      {{ build_sql }}\n  {% endcall %}\n\n  {% if need_swap %}\n      {% do adapter.rename_relation(target_relation, backup_relation) %}\n      {% do adapter.rename_relation(intermediate_relation, target_relation) %}\n      {% do to_drop.append(backup_relation) %}\n  {% endif %}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if existing_relation is none or existing_relation.is_view or should_full_refresh() %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {% do adapter.commit() %}\n\n  {% for rel in to_drop %}\n      {% do adapter.drop_relation(rel) %}\n  {% endfor %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_temp_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.should_full_refresh", "macro.dbt.incremental_validate_on_schema_change", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.get_create_table_as_sql", "macro.dbt.run_query", "macro.dbt.process_schema_changes", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.4175336, "supported_languages": ["sql"]}, "macro.dbt.is_incremental": {"unique_id": "macro.dbt.is_incremental", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "original_file_path": "macros\\materializations\\models\\incremental\\is_incremental.sql", "name": "is_incremental", "macro_sql": "{% macro is_incremental() %}\n    {#-- do not run introspective queries in parsing #}\n    {% if not execute %}\n        {{ return(False) }}\n    {% else %}\n        {% set relation = adapter.get_relation(this.database, this.schema, this.table) %}\n        {{ return(relation is not none\n                  and relation.type == 'table'\n                  and model.config.materialized == 'incremental'\n                  and not should_full_refresh()) }}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.4370568, "supported_languages": null}, "macro.dbt.get_merge_sql": {"unique_id": "macro.dbt.get_merge_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_merge_sql", "macro_sql": "{% macro get_merge_sql(target, source, unique_key, dest_columns, predicates=none) -%}\n  {{ adapter.dispatch('get_merge_sql', 'dbt')(target, source, unique_key, dest_columns, predicates) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.456611, "supported_languages": null}, "macro.dbt.default__get_merge_sql": {"unique_id": "macro.dbt.default__get_merge_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_merge_sql", "macro_sql": "{% macro default__get_merge_sql(target, source, unique_key, dest_columns, predicates) -%}\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set merge_update_columns = config.get('merge_update_columns') -%}\n    {%- set merge_exclude_columns = config.get('merge_exclude_columns') -%}\n    {%- set update_columns = get_merge_update_columns(merge_update_columns, merge_exclude_columns, dest_columns) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not mapping and unique_key is not string %}\n            {% for key in unique_key %}\n                {% set this_key_match %}\n                    DBT_INTERNAL_SOURCE.{{ key }} = DBT_INTERNAL_DEST.{{ key }}\n                {% endset %}\n                {% do predicates.append(this_key_match) %}\n            {% endfor %}\n        {% else %}\n            {% set unique_key_match %}\n                DBT_INTERNAL_SOURCE.{{ unique_key }} = DBT_INTERNAL_DEST.{{ unique_key }}\n            {% endset %}\n            {% do predicates.append(unique_key_match) %}\n        {% endif %}\n    {% else %}\n        {% do predicates.append('FALSE') %}\n    {% endif %}\n\n    {{ sql_header if sql_header is not none }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on {{ predicates | join(' and ') }}\n\n    {% if unique_key %}\n    when matched then update set\n        {% for column_name in update_columns -%}\n            {{ column_name }} = DBT_INTERNAL_SOURCE.{{ column_name }}\n            {%- if not loop.last %}, {%- endif %}\n        {%- endfor %}\n    {% endif %}\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv", "macro.dbt.get_merge_update_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.4652262, "supported_languages": null}, "macro.dbt.get_delete_insert_merge_sql": {"unique_id": "macro.dbt.get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_delete_insert_merge_sql", "macro_sql": "{% macro get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n  {{ adapter.dispatch('get_delete_insert_merge_sql', 'dbt')(target, source, unique_key, dest_columns) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.4712307, "supported_languages": null}, "macro.dbt.default__get_delete_insert_merge_sql": {"unique_id": "macro.dbt.default__get_delete_insert_merge_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_delete_insert_merge_sql", "macro_sql": "{% macro default__get_delete_insert_merge_sql(target, source, unique_key, dest_columns) -%}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    {% if unique_key %}\n        {% if unique_key is sequence and unique_key is not string %}\n            delete from {{target }}\n            using {{ source }}\n            where (\n                {% for key in unique_key %}\n                    {{ source }}.{{ key }} = {{ target }}.{{ key }}\n                    {{ \"and \" if not loop.last }}\n                {% endfor %}\n            );\n        {% else %}\n            delete from {{ target }}\n            where (\n                {{ unique_key }}) in (\n                select ({{ unique_key }})\n                from {{ source }}\n            );\n\n        {% endif %}\n    {% endif %}\n\n    insert into {{ target }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ source }}\n    )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.4762363, "supported_languages": null}, "macro.dbt.get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "get_insert_overwrite_merge_sql", "macro_sql": "{% macro get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header=false) -%}\n  {{ adapter.dispatch('get_insert_overwrite_merge_sql', 'dbt')(target, source, dest_columns, predicates, include_sql_header) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.4777634, "supported_languages": null}, "macro.dbt.default__get_insert_overwrite_merge_sql": {"unique_id": "macro.dbt.default__get_insert_overwrite_merge_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\merge.sql", "original_file_path": "macros\\materializations\\models\\incremental\\merge.sql", "name": "default__get_insert_overwrite_merge_sql", "macro_sql": "{% macro default__get_insert_overwrite_merge_sql(target, source, dest_columns, predicates, include_sql_header) -%}\n    {#-- The only time include_sql_header is True: --#}\n    {#-- BigQuery + insert_overwrite strategy + \"static\" partitions config --#}\n    {#-- We should consider including the sql header at the materialization level instead --#}\n\n    {%- set predicates = [] if predicates is none else [] + predicates -%}\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n    {%- set sql_header = config.get('sql_header', none) -%}\n\n    {{ sql_header if sql_header is not none and include_sql_header }}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n        using {{ source }} as DBT_INTERNAL_SOURCE\n        on FALSE\n\n    when not matched by source\n        {% if predicates %} and {{ predicates | join(' and ') }} {% endif %}\n        then delete\n\n    when not matched then insert\n        ({{ dest_cols_csv }})\n    values\n        ({{ dest_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.479768, "supported_languages": null}, "macro.dbt.incremental_validate_on_schema_change": {"unique_id": "macro.dbt.incremental_validate_on_schema_change", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "incremental_validate_on_schema_change", "macro_sql": "{% macro incremental_validate_on_schema_change(on_schema_change, default='ignore') %}\n\n   {% if on_schema_change not in ['sync_all_columns', 'append_new_columns', 'fail', 'ignore'] %}\n\n     {% set log_message = 'Invalid value for on_schema_change (%s) specified. Setting default value of %s.' % (on_schema_change, default) %}\n     {% do log(log_message) %}\n\n     {{ return(default) }}\n\n   {% else %}\n\n     {{ return(on_schema_change) }}\n\n   {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.4962966, "supported_languages": null}, "macro.dbt.check_for_schema_changes": {"unique_id": "macro.dbt.check_for_schema_changes", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "check_for_schema_changes", "macro_sql": "{% macro check_for_schema_changes(source_relation, target_relation) %}\n\n  {% set schema_changed = False %}\n\n  {%- set source_columns = adapter.get_columns_in_relation(source_relation) -%}\n  {%- set target_columns = adapter.get_columns_in_relation(target_relation) -%}\n  {%- set source_not_in_target = diff_columns(source_columns, target_columns) -%}\n  {%- set target_not_in_source = diff_columns(target_columns, source_columns) -%}\n\n  {% set new_target_types = diff_column_data_types(source_columns, target_columns) %}\n\n  {% if source_not_in_target != [] %}\n    {% set schema_changed = True %}\n  {% elif target_not_in_source != [] or new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% elif new_target_types != [] %}\n    {% set schema_changed = True %}\n  {% endif %}\n\n  {% set changes_dict = {\n    'schema_changed': schema_changed,\n    'source_not_in_target': source_not_in_target,\n    'target_not_in_source': target_not_in_source,\n    'source_columns': source_columns,\n    'target_columns': target_columns,\n    'new_target_types': new_target_types\n  } %}\n\n  {% set msg %}\n    In {{ target_relation }}:\n        Schema changed: {{ schema_changed }}\n        Source columns not in target: {{ source_not_in_target }}\n        Target columns not in source: {{ target_not_in_source }}\n        New column types: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(msg) %}\n\n  {{ return(changes_dict) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.diff_columns", "macro.dbt.diff_column_data_types"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.5002959, "supported_languages": null}, "macro.dbt.sync_column_schemas": {"unique_id": "macro.dbt.sync_column_schemas", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "sync_column_schemas", "macro_sql": "{% macro sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n  {%- set add_to_target_arr = schema_changes_dict['source_not_in_target'] -%}\n\n  {%- if on_schema_change == 'append_new_columns'-%}\n     {%- if add_to_target_arr | length > 0 -%}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, none) -%}\n     {%- endif -%}\n\n  {% elif on_schema_change == 'sync_all_columns' %}\n     {%- set remove_from_target_arr = schema_changes_dict['target_not_in_source'] -%}\n     {%- set new_target_types = schema_changes_dict['new_target_types'] -%}\n\n     {% if add_to_target_arr | length > 0 or remove_from_target_arr | length > 0 %}\n       {%- do alter_relation_add_remove_columns(target_relation, add_to_target_arr, remove_from_target_arr) -%}\n     {% endif %}\n\n     {% if new_target_types != [] %}\n       {% for ntt in new_target_types %}\n         {% set column_name = ntt['column_name'] %}\n         {% set new_type = ntt['new_type'] %}\n         {% do alter_column_type(target_relation, column_name, new_type) %}\n       {% endfor %}\n     {% endif %}\n\n  {% endif %}\n\n  {% set schema_change_message %}\n    In {{ target_relation }}:\n        Schema change approach: {{ on_schema_change }}\n        Columns added: {{ add_to_target_arr }}\n        Columns removed: {{ remove_from_target_arr }}\n        Data types changed: {{ new_target_types }}\n  {% endset %}\n\n  {% do log(schema_change_message) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.alter_relation_add_remove_columns", "macro.dbt.alter_column_type"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.5052962, "supported_languages": null}, "macro.dbt.process_schema_changes": {"unique_id": "macro.dbt.process_schema_changes", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "original_file_path": "macros\\materializations\\models\\incremental\\on_schema_change.sql", "name": "process_schema_changes", "macro_sql": "{% macro process_schema_changes(on_schema_change, source_relation, target_relation) %}\n\n    {% if on_schema_change == 'ignore' %}\n\n     {{ return({}) }}\n\n    {% else %}\n\n      {% set schema_changes_dict = check_for_schema_changes(source_relation, target_relation) %}\n\n      {% if schema_changes_dict['schema_changed'] %}\n\n        {% if on_schema_change == 'fail' %}\n\n          {% set fail_msg %}\n              The source and target schemas on this incremental model are out of sync!\n              They can be reconciled in several ways:\n                - set the `on_schema_change` config to either append_new_columns or sync_all_columns, depending on your situation.\n                - Re-run the incremental model with `full_refresh: True` to update the target schema.\n                - update the schema manually and re-run the process.\n\n              Additional troubleshooting context:\n                 Source columns not in target: {{ schema_changes_dict['source_not_in_target'] }}\n                 Target columns not in source: {{ schema_changes_dict['target_not_in_source'] }}\n                 New column types: {{ schema_changes_dict['new_target_types'] }}\n          {% endset %}\n\n          {% do exceptions.raise_compiler_error(fail_msg) %}\n\n        {# -- unless we ignore, run the sync operation per the config #}\n        {% else %}\n\n          {% do sync_column_schemas(on_schema_change, target_relation, schema_changes_dict) %}\n\n        {% endif %}\n\n      {% endif %}\n\n      {{ return(schema_changes_dict['source_columns']) }}\n\n    {% endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.check_for_schema_changes", "macro.dbt.sync_column_schemas"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.508295, "supported_languages": null}, "macro.dbt.get_incremental_append_sql": {"unique_id": "macro.dbt.get_incremental_append_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "get_incremental_append_sql", "macro_sql": "{% macro get_incremental_append_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_append_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.5118167, "supported_languages": null}, "macro.dbt.default__get_incremental_append_sql": {"unique_id": "macro.dbt.default__get_incremental_append_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "default__get_incremental_append_sql", "macro_sql": "{% macro default__get_incremental_append_sql(arg_dict) %}\n\n  {% do return(get_insert_into_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_into_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.5128174, "supported_languages": null}, "macro.dbt.get_incremental_delete_insert_sql": {"unique_id": "macro.dbt.get_incremental_delete_insert_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "get_incremental_delete_insert_sql", "macro_sql": "{% macro get_incremental_delete_insert_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_delete_insert_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_delete_insert_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.5198195, "supported_languages": null}, "macro.dbt.default__get_incremental_delete_insert_sql": {"unique_id": "macro.dbt.default__get_incremental_delete_insert_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "default__get_incremental_delete_insert_sql", "macro_sql": "{% macro default__get_incremental_delete_insert_sql(arg_dict) %}\n\n  {% do return(get_delete_insert_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_delete_insert_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.5208168, "supported_languages": null}, "macro.dbt.get_incremental_merge_sql": {"unique_id": "macro.dbt.get_incremental_merge_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "get_incremental_merge_sql", "macro_sql": "{% macro get_incremental_merge_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_merge_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.5218174, "supported_languages": null}, "macro.dbt.default__get_incremental_merge_sql": {"unique_id": "macro.dbt.default__get_incremental_merge_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "default__get_incremental_merge_sql", "macro_sql": "{% macro default__get_incremental_merge_sql(arg_dict) %}\n\n  {% do return(get_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"unique_key\"], arg_dict[\"dest_columns\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.5218174, "supported_languages": null}, "macro.dbt.get_incremental_insert_overwrite_sql": {"unique_id": "macro.dbt.get_incremental_insert_overwrite_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "get_incremental_insert_overwrite_sql", "macro_sql": "{% macro get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_insert_overwrite_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_incremental_insert_overwrite_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.5228174, "supported_languages": null}, "macro.dbt.default__get_incremental_insert_overwrite_sql": {"unique_id": "macro.dbt.default__get_incremental_insert_overwrite_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "default__get_incremental_insert_overwrite_sql", "macro_sql": "{% macro default__get_incremental_insert_overwrite_sql(arg_dict) %}\n\n  {% do return(get_insert_overwrite_merge_sql(arg_dict[\"target_relation\"], arg_dict[\"temp_relation\"], arg_dict[\"dest_columns\"], arg_dict[\"predicates\"])) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_insert_overwrite_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.523818, "supported_languages": null}, "macro.dbt.get_incremental_default_sql": {"unique_id": "macro.dbt.get_incremental_default_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "get_incremental_default_sql", "macro_sql": "{% macro get_incremental_default_sql(arg_dict) %}\n\n  {{ return(adapter.dispatch('get_incremental_default_sql', 'dbt')(arg_dict)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__get_incremental_default_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.5248175, "supported_languages": null}, "macro.dbt.default__get_incremental_default_sql": {"unique_id": "macro.dbt.default__get_incremental_default_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "default__get_incremental_default_sql", "macro_sql": "{% macro default__get_incremental_default_sql(arg_dict) %}\n\n  {% do return(get_incremental_append_sql(arg_dict)) %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_incremental_append_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.5248175, "supported_languages": null}, "macro.dbt.get_insert_into_sql": {"unique_id": "macro.dbt.get_insert_into_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\incremental\\strategies.sql", "original_file_path": "macros\\materializations\\models\\incremental\\strategies.sql", "name": "get_insert_into_sql", "macro_sql": "{% macro get_insert_into_sql(target_relation, temp_relation, dest_columns) %}\n\n    {%- set dest_cols_csv = get_quoted_csv(dest_columns | map(attribute=\"name\")) -%}\n\n    insert into {{ target_relation }} ({{ dest_cols_csv }})\n    (\n        select {{ dest_cols_csv }}\n        from {{ temp_relation }}\n    )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_quoted_csv"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.5263264, "supported_languages": null}, "macro.dbt.get_create_table_as_sql": {"unique_id": "macro.dbt.get_create_table_as_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "get_create_table_as_sql", "macro_sql": "{% macro get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ adapter.dispatch('get_create_table_as_sql', 'dbt')(temporary, relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_table_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.528341, "supported_languages": null}, "macro.dbt.default__get_create_table_as_sql": {"unique_id": "macro.dbt.default__get_create_table_as_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "default__get_create_table_as_sql", "macro_sql": "{% macro default__get_create_table_as_sql(temporary, relation, sql) -%}\n  {{ return(create_table_as(temporary, relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.5333383, "supported_languages": null}, "macro.dbt.create_table_as": {"unique_id": "macro.dbt.create_table_as", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "create_table_as", "macro_sql": "{% macro create_table_as(temporary, relation, compiled_code, language='sql') -%}\n  {# backward compatibility for create_table_as that does not support language #}\n  {% if language == \"sql\" %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code)}}\n  {% else %}\n    {{ adapter.dispatch('create_table_as', 'dbt')(temporary, relation, compiled_code, language) }}\n  {% endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.5353427, "supported_languages": null}, "macro.dbt.default__create_table_as": {"unique_id": "macro.dbt.default__create_table_as", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\create_table_as.sql", "original_file_path": "macros\\materializations\\models\\table\\create_table_as.sql", "name": "default__create_table_as", "macro_sql": "{% macro default__create_table_as(temporary, relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n\n  create {% if temporary: -%}temporary{%- endif %} table\n    {{ relation.include(database=(not temporary), schema=(not temporary)) }}\n  as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.537341, "supported_languages": null}, "macro.dbt.materialization_table_default": {"unique_id": "macro.dbt.materialization_table_default", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\table\\table.sql", "original_file_path": "macros\\materializations\\models\\table\\table.sql", "name": "materialization_table_default", "macro_sql": "{% materialization table, default %}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='table') %}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n      See ../view/view.sql for more information about this relation.\n  */\n  {%- set backup_relation_type = 'table' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_table_as_sql(False, intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  {% if existing_relation is not none %}\n      {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% do create_indexes(target_relation) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  -- finally, drop the existing/backup relation after the commit\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.drop_relation_if_exists", "macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.get_create_table_as_sql", "macro.dbt.create_indexes", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.546874, "supported_languages": ["sql"]}, "macro.dbt.create_or_replace_view": {"unique_id": "macro.dbt.create_or_replace_view", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "original_file_path": "macros\\materializations\\models\\view\\create_or_replace_view.sql", "name": "create_or_replace_view", "macro_sql": "{% macro create_or_replace_view() %}\n  {%- set identifier = model['alias'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set target_relation = api.Relation.create(\n      identifier=identifier, schema=schema, database=database,\n      type='view') -%}\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks) }}\n\n  -- If there's a table with the same name and we weren't told to full refresh,\n  -- that's an error. If we were told to full refresh, drop it. This behavior differs\n  -- for Snowflake and BigQuery, so multiple dispatch is used.\n  {%- if old_relation is not none and old_relation.is_table -%}\n    {{ handle_existing_table(should_full_refresh(), old_relation) }}\n  {%- endif -%}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(target_relation, sql) }}\n  {%- endcall %}\n\n  {% set should_revoke = should_revoke(exists_as_view, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=True) %}\n\n  {{ run_hooks(post_hooks) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.handle_existing_table", "macro.dbt.should_full_refresh", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.5528731, "supported_languages": null}, "macro.dbt.get_create_view_as_sql": {"unique_id": "macro.dbt.get_create_view_as_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "get_create_view_as_sql", "macro_sql": "{% macro get_create_view_as_sql(relation, sql) -%}\n  {{ adapter.dispatch('get_create_view_as_sql', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_create_view_as_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.5548732, "supported_languages": null}, "macro.dbt.default__get_create_view_as_sql": {"unique_id": "macro.dbt.default__get_create_view_as_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "default__get_create_view_as_sql", "macro_sql": "{% macro default__get_create_view_as_sql(relation, sql) -%}\n  {{ return(create_view_as(relation, sql)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.5548732, "supported_languages": null}, "macro.dbt.create_view_as": {"unique_id": "macro.dbt.create_view_as", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "create_view_as", "macro_sql": "{% macro create_view_as(relation, sql) -%}\n  {{ adapter.dispatch('create_view_as', 'dbt')(relation, sql) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__create_view_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.5558734, "supported_languages": null}, "macro.dbt.default__create_view_as": {"unique_id": "macro.dbt.default__create_view_as", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\create_view_as.sql", "original_file_path": "macros\\materializations\\models\\view\\create_view_as.sql", "name": "default__create_view_as", "macro_sql": "{% macro default__create_view_as(relation, sql) -%}\n  {%- set sql_header = config.get('sql_header', none) -%}\n\n  {{ sql_header if sql_header is not none }}\n  create view {{ relation }} as (\n    {{ sql }}\n  );\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.5568736, "supported_languages": null}, "macro.dbt.handle_existing_table": {"unique_id": "macro.dbt.handle_existing_table", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "name": "handle_existing_table", "macro_sql": "{% macro handle_existing_table(full_refresh, old_relation) %}\n    {{ adapter.dispatch('handle_existing_table', 'dbt')(full_refresh, old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__handle_existing_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.5588732, "supported_languages": null}, "macro.dbt.default__handle_existing_table": {"unique_id": "macro.dbt.default__handle_existing_table", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\helpers.sql", "original_file_path": "macros\\materializations\\models\\view\\helpers.sql", "name": "default__handle_existing_table", "macro_sql": "{% macro default__handle_existing_table(full_refresh, old_relation) %}\n    {{ log(\"Dropping relation \" ~ old_relation ~ \" because it is of type \" ~ old_relation.type) }}\n    {{ adapter.drop_relation(old_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.5588732, "supported_languages": null}, "macro.dbt.materialization_view_default": {"unique_id": "macro.dbt.materialization_view_default", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\models\\view\\view.sql", "original_file_path": "macros\\materializations\\models\\view\\view.sql", "name": "materialization_view_default", "macro_sql": "{%- materialization view, default -%}\n\n  {%- set existing_relation = load_cached_relation(this) -%}\n  {%- set target_relation = this.incorporate(type='view') -%}\n  {%- set intermediate_relation =  make_intermediate_relation(target_relation) -%}\n\n  -- the intermediate_relation should not already exist in the database; get_relation\n  -- will return None in that case. Otherwise, we get a relation that we can drop\n  -- later, before we try to use this name for the current operation\n  {%- set preexisting_intermediate_relation = load_cached_relation(intermediate_relation) -%}\n  /*\n     This relation (probably) doesn't exist yet. If it does exist, it's a leftover from\n     a previous run, and we're going to try to drop it immediately. At the end of this\n     materialization, we're going to rename the \"existing_relation\" to this identifier,\n     and then we're going to drop it. In order to make sure we run the correct one of:\n       - drop view ...\n       - drop table ...\n\n     We need to set the type of this relation to be the type of the existing_relation, if it exists,\n     or else \"view\" as a sane default if it does not. Note that if the existing_relation does not\n     exist, then there is nothing to move out of the way and subsequentally drop. In that case,\n     this relation will be effectively unused.\n  */\n  {%- set backup_relation_type = 'view' if existing_relation is none else existing_relation.type -%}\n  {%- set backup_relation = make_backup_relation(target_relation, backup_relation_type) -%}\n  -- as above, the backup_relation should not already exist\n  {%- set preexisting_backup_relation = load_cached_relation(backup_relation) -%}\n  -- grab current tables grants config for comparision later on\n  {% set grant_config = config.get('grants') %}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- drop the temp relations if they exist already in the database\n  {{ drop_relation_if_exists(preexisting_intermediate_relation) }}\n  {{ drop_relation_if_exists(preexisting_backup_relation) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% call statement('main') -%}\n    {{ get_create_view_as_sql(intermediate_relation, sql) }}\n  {%- endcall %}\n\n  -- cleanup\n  -- move the existing view out of the way\n  {% if existing_relation is not none %}\n    {{ adapter.rename_relation(existing_relation, backup_relation) }}\n  {% endif %}\n  {{ adapter.rename_relation(intermediate_relation, target_relation) }}\n\n  {% set should_revoke = should_revoke(existing_relation, full_refresh_mode=True) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {{ drop_relation_if_exists(backup_relation) }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.load_cached_relation", "macro.dbt.make_intermediate_relation", "macro.dbt.make_backup_relation", "macro.dbt.run_hooks", "macro.dbt.drop_relation_if_exists", "macro.dbt.statement", "macro.dbt.get_create_view_as_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.5738955, "supported_languages": ["sql"]}, "macro.dbt.create_csv_table": {"unique_id": "macro.dbt.create_csv_table", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "create_csv_table", "macro_sql": "{% macro create_csv_table(model, agate_table) -%}\n  {{ adapter.dispatch('create_csv_table', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.5929282, "supported_languages": null}, "macro.dbt.default__create_csv_table": {"unique_id": "macro.dbt.default__create_csv_table", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__create_csv_table", "macro_sql": "{% macro default__create_csv_table(model, agate_table) %}\n  {%- set column_override = model['config'].get('column_types', {}) -%}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n\n  {% set sql %}\n    create table {{ this.render() }} (\n        {%- for col_name in agate_table.column_names -%}\n            {%- set inferred_type = adapter.convert_type(agate_table, loop.index0) -%}\n            {%- set type = column_override.get(col_name, inferred_type) -%}\n            {%- set column_name = (col_name | string) -%}\n            {{ adapter.quote_seed_column(column_name, quote_seed_column) }} {{ type }} {%- if not loop.last -%}, {%- endif -%}\n        {%- endfor -%}\n    )\n  {% endset %}\n\n  {% call statement('_') -%}\n    {{ sql }}\n  {%- endcall %}\n\n  {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.596941, "supported_languages": null}, "macro.dbt.reset_csv_table": {"unique_id": "macro.dbt.reset_csv_table", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "reset_csv_table", "macro_sql": "{% macro reset_csv_table(model, full_refresh, old_relation, agate_table) -%}\n  {{ adapter.dispatch('reset_csv_table', 'dbt')(model, full_refresh, old_relation, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__reset_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.5979414, "supported_languages": null}, "macro.dbt.default__reset_csv_table": {"unique_id": "macro.dbt.default__reset_csv_table", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__reset_csv_table", "macro_sql": "{% macro default__reset_csv_table(model, full_refresh, old_relation, agate_table) %}\n    {% set sql = \"\" %}\n    {% if full_refresh %}\n        {{ adapter.drop_relation(old_relation) }}\n        {% set sql = create_csv_table(model, agate_table) %}\n    {% else %}\n        {{ adapter.truncate_relation(old_relation) }}\n        {% set sql = \"truncate table \" ~ old_relation %}\n    {% endif %}\n\n    {{ return(sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.create_csv_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.6009402, "supported_languages": null}, "macro.dbt.get_csv_sql": {"unique_id": "macro.dbt.get_csv_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_csv_sql", "macro_sql": "{% macro get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ adapter.dispatch('get_csv_sql', 'dbt')(create_or_truncate_sql, insert_sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_csv_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.6019402, "supported_languages": null}, "macro.dbt.default__get_csv_sql": {"unique_id": "macro.dbt.default__get_csv_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_csv_sql", "macro_sql": "{% macro default__get_csv_sql(create_or_truncate_sql, insert_sql) %}\n    {{ create_or_truncate_sql }};\n    -- dbt seed --\n    {{ insert_sql }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.6029403, "supported_languages": null}, "macro.dbt.get_binding_char": {"unique_id": "macro.dbt.get_binding_char", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_binding_char", "macro_sql": "{% macro get_binding_char() -%}\n  {{ adapter.dispatch('get_binding_char', 'dbt')() }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.6039412, "supported_languages": null}, "macro.dbt.default__get_binding_char": {"unique_id": "macro.dbt.default__get_binding_char", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_binding_char", "macro_sql": "{% macro default__get_binding_char() %}\n  {{ return('%s') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.6039412, "supported_languages": null}, "macro.dbt.get_batch_size": {"unique_id": "macro.dbt.get_batch_size", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_batch_size", "macro_sql": "{% macro get_batch_size() -%}\n  {{ return(adapter.dispatch('get_batch_size', 'dbt')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_batch_size"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.6049407, "supported_languages": null}, "macro.dbt.default__get_batch_size": {"unique_id": "macro.dbt.default__get_batch_size", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__get_batch_size", "macro_sql": "{% macro default__get_batch_size() %}\n  {{ return(10000) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.6059408, "supported_languages": null}, "macro.dbt.get_seed_column_quoted_csv": {"unique_id": "macro.dbt.get_seed_column_quoted_csv", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "get_seed_column_quoted_csv", "macro_sql": "{% macro get_seed_column_quoted_csv(model, column_names) %}\n  {%- set quote_seed_column = model['config'].get('quote_columns', None) -%}\n    {% set quoted = [] %}\n    {% for col in column_names -%}\n        {%- do quoted.append(adapter.quote_seed_column(col, quote_seed_column)) -%}\n    {%- endfor %}\n\n    {%- set dest_cols_csv = quoted | join(', ') -%}\n    {{ return(dest_cols_csv) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.6089404, "supported_languages": null}, "macro.dbt.load_csv_rows": {"unique_id": "macro.dbt.load_csv_rows", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "load_csv_rows", "macro_sql": "{% macro load_csv_rows(model, agate_table) -%}\n  {{ adapter.dispatch('load_csv_rows', 'dbt')(model, agate_table) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__load_csv_rows"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.609941, "supported_languages": null}, "macro.dbt.default__load_csv_rows": {"unique_id": "macro.dbt.default__load_csv_rows", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\helpers.sql", "original_file_path": "macros\\materializations\\seeds\\helpers.sql", "name": "default__load_csv_rows", "macro_sql": "{% macro default__load_csv_rows(model, agate_table) %}\n\n  {% set batch_size = get_batch_size() %}\n\n  {% set cols_sql = get_seed_column_quoted_csv(model, agate_table.column_names) %}\n  {% set bindings = [] %}\n\n  {% set statements = [] %}\n\n  {% for chunk in agate_table.rows | batch(batch_size) %}\n      {% set bindings = [] %}\n\n      {% for row in chunk %}\n          {% do bindings.extend(row) %}\n      {% endfor %}\n\n      {% set sql %}\n          insert into {{ this.render() }} ({{ cols_sql }}) values\n          {% for row in chunk -%}\n              ({%- for column in agate_table.column_names -%}\n                  {{ get_binding_char() }}\n                  {%- if not loop.last%},{%- endif %}\n              {%- endfor -%})\n              {%- if not loop.last%},{%- endif %}\n          {%- endfor %}\n      {% endset %}\n\n      {% do adapter.add_query(sql, bindings=bindings, abridge_sql_log=True) %}\n\n      {% if loop.index0 == 0 %}\n          {% do statements.append(sql) %}\n      {% endif %}\n  {% endfor %}\n\n  {# Return SQL so we can render it out into the compiled files #}\n  {{ return(statements[0]) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_batch_size", "macro.dbt.get_seed_column_quoted_csv", "macro.dbt.get_binding_char"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.6179962, "supported_languages": null}, "macro.dbt.materialization_seed_default": {"unique_id": "macro.dbt.materialization_seed_default", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\seeds\\seed.sql", "original_file_path": "macros\\materializations\\seeds\\seed.sql", "name": "materialization_seed_default", "macro_sql": "{% materialization seed, default %}\n\n  {%- set identifier = model['alias'] -%}\n  {%- set full_refresh_mode = (should_full_refresh()) -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_as_view = (old_relation is not none and old_relation.is_view) -%}\n\n  {%- set grant_config = config.get('grants') -%}\n  {%- set agate_table = load_agate_table() -%}\n  -- grab current tables grants config for comparision later on\n\n  {%- do store_result('agate_table', response='OK', agate_table=agate_table) -%}\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  -- `BEGIN` happens here:\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  -- build model\n  {% set create_table_sql = \"\" %}\n  {% if exists_as_view %}\n    {{ exceptions.raise_compiler_error(\"Cannot seed to '{}', it is a view\".format(old_relation)) }}\n  {% elif exists_as_table %}\n    {% set create_table_sql = reset_csv_table(model, full_refresh_mode, old_relation, agate_table) %}\n  {% else %}\n    {% set create_table_sql = create_csv_table(model, agate_table) %}\n  {% endif %}\n\n  {% set code = 'CREATE' if full_refresh_mode else 'INSERT' %}\n  {% set rows_affected = (agate_table.rows | length) %}\n  {% set sql = load_csv_rows(model, agate_table) %}\n\n  {% call noop_statement('main', code ~ ' ' ~ rows_affected, code, rows_affected) %}\n    {{ get_csv_sql(create_table_sql, sql) }};\n  {% endcall %}\n\n  {% set target_relation = this.incorporate(type='table') %}\n\n  {% set should_revoke = should_revoke(old_relation, full_refresh_mode) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if full_refresh_mode or not exists_as_table %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  -- `COMMIT` happens here\n  {{ adapter.commit() }}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_full_refresh", "macro.dbt.run_hooks", "macro.dbt.reset_csv_table", "macro.dbt.create_csv_table", "macro.dbt.load_csv_rows", "macro.dbt.noop_statement", "macro.dbt.get_csv_sql", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.6450284, "supported_languages": ["sql"]}, "macro.dbt.create_columns": {"unique_id": "macro.dbt.create_columns", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "create_columns", "macro_sql": "{% macro create_columns(relation, columns) %}\n  {{ adapter.dispatch('create_columns', 'dbt')(relation, columns) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__create_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.6683724, "supported_languages": null}, "macro.dbt.default__create_columns": {"unique_id": "macro.dbt.default__create_columns", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__create_columns", "macro_sql": "{% macro default__create_columns(relation, columns) %}\n  {% for column in columns %}\n    {% call statement() %}\n      alter table {{ relation }} add column \"{{ column.name }}\" {{ column.data_type }};\n    {% endcall %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.6753788, "supported_languages": null}, "macro.dbt.post_snapshot": {"unique_id": "macro.dbt.post_snapshot", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "post_snapshot", "macro_sql": "{% macro post_snapshot(staging_relation) %}\n  {{ adapter.dispatch('post_snapshot', 'dbt')(staging_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.6763773, "supported_languages": null}, "macro.dbt.default__post_snapshot": {"unique_id": "macro.dbt.default__post_snapshot", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__post_snapshot", "macro_sql": "{% macro default__post_snapshot(staging_relation) %}\n    {# no-op #}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.6768863, "supported_languages": null}, "macro.dbt.get_true_sql": {"unique_id": "macro.dbt.get_true_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "get_true_sql", "macro_sql": "{% macro get_true_sql() %}\n  {{ adapter.dispatch('get_true_sql', 'dbt')() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_true_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.6778898, "supported_languages": null}, "macro.dbt.default__get_true_sql": {"unique_id": "macro.dbt.default__get_true_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__get_true_sql", "macro_sql": "{% macro default__get_true_sql() %}\n    {{ return('TRUE') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.6778898, "supported_languages": null}, "macro.dbt.snapshot_staging_table": {"unique_id": "macro.dbt.snapshot_staging_table", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "snapshot_staging_table", "macro_sql": "{% macro snapshot_staging_table(strategy, source_sql, target_relation) -%}\n  {{ adapter.dispatch('snapshot_staging_table', 'dbt')(strategy, source_sql, target_relation) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_staging_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.6798997, "supported_languages": null}, "macro.dbt.default__snapshot_staging_table": {"unique_id": "macro.dbt.default__snapshot_staging_table", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__snapshot_staging_table", "macro_sql": "{% macro default__snapshot_staging_table(strategy, source_sql, target_relation) -%}\n\n    with snapshot_query as (\n\n        {{ source_sql }}\n\n    ),\n\n    snapshotted_data as (\n\n        select *,\n            {{ strategy.unique_key }} as dbt_unique_key\n\n        from {{ target_relation }}\n        where dbt_valid_to is null\n\n    ),\n\n    insertions_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to,\n            {{ strategy.scd_id }} as dbt_scd_id\n\n        from snapshot_query\n    ),\n\n    updates_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key,\n            {{ strategy.updated_at }} as dbt_updated_at,\n            {{ strategy.updated_at }} as dbt_valid_from,\n            {{ strategy.updated_at }} as dbt_valid_to\n\n        from snapshot_query\n    ),\n\n    {%- if strategy.invalidate_hard_deletes %}\n\n    deletes_source_data as (\n\n        select\n            *,\n            {{ strategy.unique_key }} as dbt_unique_key\n        from snapshot_query\n    ),\n    {% endif %}\n\n    insertions as (\n\n        select\n            'insert' as dbt_change_type,\n            source_data.*\n\n        from insertions_source_data as source_data\n        left outer join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where snapshotted_data.dbt_unique_key is null\n           or (\n                snapshotted_data.dbt_unique_key is not null\n            and (\n                {{ strategy.row_changed }}\n            )\n        )\n\n    ),\n\n    updates as (\n\n        select\n            'update' as dbt_change_type,\n            source_data.*,\n            snapshotted_data.dbt_scd_id\n\n        from updates_source_data as source_data\n        join snapshotted_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where (\n            {{ strategy.row_changed }}\n        )\n    )\n\n    {%- if strategy.invalidate_hard_deletes -%}\n    ,\n\n    deletes as (\n\n        select\n            'delete' as dbt_change_type,\n            source_data.*,\n            {{ snapshot_get_time() }} as dbt_valid_from,\n            {{ snapshot_get_time() }} as dbt_updated_at,\n            {{ snapshot_get_time() }} as dbt_valid_to,\n            snapshotted_data.dbt_scd_id\n\n        from snapshotted_data\n        left join deletes_source_data as source_data on snapshotted_data.dbt_unique_key = source_data.dbt_unique_key\n        where source_data.dbt_unique_key is null\n    )\n    {%- endif %}\n\n    select * from insertions\n    union all\n    select * from updates\n    {%- if strategy.invalidate_hard_deletes %}\n    union all\n    select * from deletes\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.683897, "supported_languages": null}, "macro.dbt.build_snapshot_table": {"unique_id": "macro.dbt.build_snapshot_table", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "build_snapshot_table", "macro_sql": "{% macro build_snapshot_table(strategy, sql) -%}\n  {{ adapter.dispatch('build_snapshot_table', 'dbt')(strategy, sql) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__build_snapshot_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.6860728, "supported_languages": null}, "macro.dbt.default__build_snapshot_table": {"unique_id": "macro.dbt.default__build_snapshot_table", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "default__build_snapshot_table", "macro_sql": "{% macro default__build_snapshot_table(strategy, sql) %}\n\n    select *,\n        {{ strategy.scd_id }} as dbt_scd_id,\n        {{ strategy.updated_at }} as dbt_updated_at,\n        {{ strategy.updated_at }} as dbt_valid_from,\n        nullif({{ strategy.updated_at }}, {{ strategy.updated_at }}) as dbt_valid_to\n    from (\n        {{ sql }}\n    ) sbq\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.6870794, "supported_languages": null}, "macro.dbt.build_snapshot_staging_table": {"unique_id": "macro.dbt.build_snapshot_staging_table", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\helpers.sql", "original_file_path": "macros\\materializations\\snapshots\\helpers.sql", "name": "build_snapshot_staging_table", "macro_sql": "{% macro build_snapshot_staging_table(strategy, sql, target_relation) %}\n    {% set temp_relation = make_temp_relation(target_relation) %}\n\n    {% set select = snapshot_staging_table(strategy, sql, target_relation) %}\n\n    {% call statement('build_snapshot_staging_relation') %}\n        {{ create_table_as(True, temp_relation, select) }}\n    {% endcall %}\n\n    {% do return(temp_relation) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.make_temp_relation", "macro.dbt.snapshot_staging_table", "macro.dbt.statement", "macro.dbt.create_table_as"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.6900795, "supported_languages": null}, "macro.dbt.materialization_snapshot_default": {"unique_id": "macro.dbt.materialization_snapshot_default", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot.sql", "name": "materialization_snapshot_default", "macro_sql": "{% materialization snapshot, default %}\n  {%- set config = model['config'] -%}\n\n  {%- set target_table = model.get('alias', model.get('name')) -%}\n\n  {%- set strategy_name = config.get('strategy') -%}\n  {%- set unique_key = config.get('unique_key') %}\n  -- grab current tables grants config for comparision later on\n  {%- set grant_config = config.get('grants') -%}\n\n  {% set target_relation_exists, target_relation = get_or_create_relation(\n          database=model.database,\n          schema=model.schema,\n          identifier=target_table,\n          type='table') -%}\n\n  {%- if not target_relation.is_table -%}\n    {% do exceptions.relation_wrong_type(target_relation, 'table') %}\n  {%- endif -%}\n\n\n  {{ run_hooks(pre_hooks, inside_transaction=False) }}\n\n  {{ run_hooks(pre_hooks, inside_transaction=True) }}\n\n  {% set strategy_macro = strategy_dispatch(strategy_name) %}\n  {% set strategy = strategy_macro(model, \"snapshotted_data\", \"source_data\", config, target_relation_exists) %}\n\n  {% if not target_relation_exists %}\n\n      {% set build_sql = build_snapshot_table(strategy, model['compiled_code']) %}\n      {% set final_sql = create_table_as(False, target_relation, build_sql) %}\n\n  {% else %}\n\n      {{ adapter.valid_snapshot_target(target_relation) }}\n\n      {% set staging_table = build_snapshot_staging_table(strategy, sql, target_relation) %}\n\n      -- this may no-op if the database does not require column expansion\n      {% do adapter.expand_target_column_types(from_relation=staging_table,\n                                               to_relation=target_relation) %}\n\n      {% set missing_columns = adapter.get_missing_columns(staging_table, target_relation)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% do create_columns(target_relation, missing_columns) %}\n\n      {% set source_columns = adapter.get_columns_in_relation(staging_table)\n                                   | rejectattr('name', 'equalto', 'dbt_change_type')\n                                   | rejectattr('name', 'equalto', 'DBT_CHANGE_TYPE')\n                                   | rejectattr('name', 'equalto', 'dbt_unique_key')\n                                   | rejectattr('name', 'equalto', 'DBT_UNIQUE_KEY')\n                                   | list %}\n\n      {% set quoted_source_columns = [] %}\n      {% for column in source_columns %}\n        {% do quoted_source_columns.append(adapter.quote(column.name)) %}\n      {% endfor %}\n\n      {% set final_sql = snapshot_merge_sql(\n            target = target_relation,\n            source = staging_table,\n            insert_cols = quoted_source_columns\n         )\n      %}\n\n  {% endif %}\n\n  {% call statement('main') %}\n      {{ final_sql }}\n  {% endcall %}\n\n  {% set should_revoke = should_revoke(target_relation_exists, full_refresh_mode=False) %}\n  {% do apply_grants(target_relation, grant_config, should_revoke=should_revoke) %}\n\n  {% do persist_docs(target_relation, model) %}\n\n  {% if not target_relation_exists %}\n    {% do create_indexes(target_relation) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=True) }}\n\n  {{ adapter.commit() }}\n\n  {% if staging_table is defined %}\n      {% do post_snapshot(staging_table) %}\n  {% endif %}\n\n  {{ run_hooks(post_hooks, inside_transaction=False) }}\n\n  {{ return({'relations': [target_relation]}) }}\n\n{% endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_or_create_relation", "macro.dbt.run_hooks", "macro.dbt.strategy_dispatch", "macro.dbt.build_snapshot_table", "macro.dbt.create_table_as", "macro.dbt.build_snapshot_staging_table", "macro.dbt.create_columns", "macro.dbt.snapshot_merge_sql", "macro.dbt.statement", "macro.dbt.should_revoke", "macro.dbt.apply_grants", "macro.dbt.persist_docs", "macro.dbt.create_indexes", "macro.dbt.post_snapshot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.7241256, "supported_languages": ["sql"]}, "macro.dbt.snapshot_merge_sql": {"unique_id": "macro.dbt.snapshot_merge_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "name": "snapshot_merge_sql", "macro_sql": "{% macro snapshot_merge_sql(target, source, insert_cols) -%}\n  {{ adapter.dispatch('snapshot_merge_sql', 'dbt')(target, source, insert_cols) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_merge_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.728248, "supported_languages": null}, "macro.dbt.default__snapshot_merge_sql": {"unique_id": "macro.dbt.default__snapshot_merge_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "original_file_path": "macros\\materializations\\snapshots\\snapshot_merge.sql", "name": "default__snapshot_merge_sql", "macro_sql": "{% macro default__snapshot_merge_sql(target, source, insert_cols) -%}\n    {%- set insert_cols_csv = insert_cols | join(', ') -%}\n\n    merge into {{ target }} as DBT_INTERNAL_DEST\n    using {{ source }} as DBT_INTERNAL_SOURCE\n    on DBT_INTERNAL_SOURCE.dbt_scd_id = DBT_INTERNAL_DEST.dbt_scd_id\n\n    when matched\n     and DBT_INTERNAL_DEST.dbt_valid_to is null\n     and DBT_INTERNAL_SOURCE.dbt_change_type in ('update', 'delete')\n        then update\n        set dbt_valid_to = DBT_INTERNAL_SOURCE.dbt_valid_to\n\n    when not matched\n     and DBT_INTERNAL_SOURCE.dbt_change_type = 'insert'\n        then insert ({{ insert_cols_csv }})\n        values ({{ insert_cols_csv }})\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.730245, "supported_languages": null}, "macro.dbt.strategy_dispatch": {"unique_id": "macro.dbt.strategy_dispatch", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "strategy_dispatch", "macro_sql": "{% macro strategy_dispatch(name) -%}\n{% set original_name = name %}\n  {% if '.' in name %}\n    {% set package_name, name = name.split(\".\", 1) %}\n  {% else %}\n    {% set package_name = none %}\n  {% endif %}\n\n  {% if package_name is none %}\n    {% set package_context = context %}\n  {% elif package_name in context %}\n    {% set package_context = context[package_name] %}\n  {% else %}\n    {% set error_msg %}\n        Could not find package '{{package_name}}', called with '{{original_name}}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n\n  {%- set search_name = 'snapshot_' ~ name ~ '_strategy' -%}\n\n  {% if search_name not in package_context %}\n    {% set error_msg %}\n        The specified strategy macro '{{name}}' was not found in package '{{ package_name }}'\n    {% endset %}\n    {{ exceptions.raise_compiler_error(error_msg | trim) }}\n  {% endif %}\n  {{ return(package_context[search_name]) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.7473562, "supported_languages": null}, "macro.dbt.snapshot_hash_arguments": {"unique_id": "macro.dbt.snapshot_hash_arguments", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_hash_arguments", "macro_sql": "{% macro snapshot_hash_arguments(args) -%}\n  {{ adapter.dispatch('snapshot_hash_arguments', 'dbt')(args) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.748356, "supported_languages": null}, "macro.dbt.default__snapshot_hash_arguments": {"unique_id": "macro.dbt.default__snapshot_hash_arguments", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "default__snapshot_hash_arguments", "macro_sql": "{% macro default__snapshot_hash_arguments(args) -%}\n    md5({%- for arg in args -%}\n        coalesce(cast({{ arg }} as varchar ), '')\n        {% if not loop.last %} || '|' || {% endif %}\n    {%- endfor -%})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.7505395, "supported_languages": null}, "macro.dbt.snapshot_timestamp_strategy": {"unique_id": "macro.dbt.snapshot_timestamp_strategy", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_timestamp_strategy", "macro_sql": "{% macro snapshot_timestamp_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set primary_key = config['unique_key'] %}\n    {% set updated_at = config['updated_at'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n\n    {#/*\n        The snapshot relation might not have an {{ updated_at }} value if the\n        snapshot strategy is changed from `check` to `timestamp`. We\n        should use a dbt-created column for the comparison in the snapshot\n        table instead of assuming that the user-supplied {{ updated_at }}\n        will be present in the historical data.\n\n        See https://github.com/dbt-labs/dbt-core/issues/2350\n    */ #}\n    {% set row_changed_expr -%}\n        ({{ snapshotted_rel }}.dbt_valid_from < {{ current_rel }}.{{ updated_at }})\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.7545395, "supported_languages": null}, "macro.dbt.snapshot_string_as_time": {"unique_id": "macro.dbt.snapshot_string_as_time", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_string_as_time", "macro_sql": "{% macro snapshot_string_as_time(timestamp) -%}\n    {{ adapter.dispatch('snapshot_string_as_time', 'dbt')(timestamp) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__snapshot_string_as_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.7555404, "supported_languages": null}, "macro.dbt.default__snapshot_string_as_time": {"unique_id": "macro.dbt.default__snapshot_string_as_time", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "default__snapshot_string_as_time", "macro_sql": "{% macro default__snapshot_string_as_time(timestamp) %}\n    {% do exceptions.raise_not_implemented(\n        'snapshot_string_as_time macro not implemented for adapter '+adapter.type()\n    ) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.7565396, "supported_languages": null}, "macro.dbt.snapshot_check_all_get_existing_columns": {"unique_id": "macro.dbt.snapshot_check_all_get_existing_columns", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_check_all_get_existing_columns", "macro_sql": "{% macro snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) -%}\n    {%- if not target_exists -%}\n        {#-- no table yet -> return whatever the query does --#}\n        {{ return((false, query_columns)) }}\n    {%- endif -%}\n\n    {#-- handle any schema changes --#}\n    {%- set target_relation = adapter.get_relation(database=node.database, schema=node.schema, identifier=node.alias) -%}\n\n    {% if check_cols_config == 'all' %}\n        {%- set query_columns = get_columns_in_query(node['compiled_code']) -%}\n\n    {% elif check_cols_config is iterable and (check_cols_config | length) > 0 %}\n        {#-- query for proper casing/quoting, to support comparison below --#}\n        {%- set select_check_cols_from_target -%}\n          select {{ check_cols_config | join(', ') }} from ({{ node['compiled_code'] }}) subq\n        {%- endset -%}\n        {% set query_columns = get_columns_in_query(select_check_cols_from_target) %}\n\n    {% else %}\n        {% do exceptions.raise_compiler_error(\"Invalid value for 'check_cols': \" ~ check_cols_config) %}\n    {% endif %}\n\n    {%- set existing_cols = adapter.get_columns_in_relation(target_relation) | map(attribute = 'name') | list -%}\n    {%- set ns = namespace() -%} {#-- handle for-loop scoping with a namespace --#}\n    {%- set ns.column_added = false -%}\n\n    {%- set intersection = [] -%}\n    {%- for col in query_columns -%}\n        {%- if col in existing_cols -%}\n            {%- do intersection.append(adapter.quote(col)) -%}\n        {%- else -%}\n            {% set ns.column_added = true %}\n        {%- endif -%}\n    {%- endfor -%}\n    {{ return((ns.column_added, intersection)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.get_columns_in_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.770565, "supported_languages": null}, "macro.dbt.snapshot_check_strategy": {"unique_id": "macro.dbt.snapshot_check_strategy", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\snapshots\\strategies.sql", "original_file_path": "macros\\materializations\\snapshots\\strategies.sql", "name": "snapshot_check_strategy", "macro_sql": "{% macro snapshot_check_strategy(node, snapshotted_rel, current_rel, config, target_exists) %}\n    {% set check_cols_config = config['check_cols'] %}\n    {% set primary_key = config['unique_key'] %}\n    {% set invalidate_hard_deletes = config.get('invalidate_hard_deletes', false) %}\n    {% set updated_at = config.get('updated_at', snapshot_get_time()) %}\n\n    {% set column_added = false %}\n\n    {% set column_added, check_cols = snapshot_check_all_get_existing_columns(node, target_exists, check_cols_config) %}\n\n    {%- set row_changed_expr -%}\n    (\n    {%- if column_added -%}\n        {{ get_true_sql() }}\n    {%- else -%}\n    {%- for col in check_cols -%}\n        {{ snapshotted_rel }}.{{ col }} != {{ current_rel }}.{{ col }}\n        or\n        (\n            (({{ snapshotted_rel }}.{{ col }} is null) and not ({{ current_rel }}.{{ col }} is null))\n            or\n            ((not {{ snapshotted_rel }}.{{ col }} is null) and ({{ current_rel }}.{{ col }} is null))\n        )\n        {%- if not loop.last %} or {% endif -%}\n    {%- endfor -%}\n    {%- endif -%}\n    )\n    {%- endset %}\n\n    {% set scd_id_expr = snapshot_hash_arguments([primary_key, updated_at]) %}\n\n    {% do return({\n        \"unique_key\": primary_key,\n        \"updated_at\": updated_at,\n        \"row_changed\": row_changed_expr,\n        \"scd_id\": scd_id_expr,\n        \"invalidate_hard_deletes\": invalidate_hard_deletes\n    }) %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.snapshot_get_time", "macro.dbt.snapshot_check_all_get_existing_columns", "macro.dbt.get_true_sql", "macro.dbt.snapshot_hash_arguments"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.7755675, "supported_languages": null}, "macro.dbt.get_test_sql": {"unique_id": "macro.dbt.get_test_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "name": "get_test_sql", "macro_sql": "{% macro get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n  {{ adapter.dispatch('get_test_sql', 'dbt')(main_sql, fail_calc, warn_if, error_if, limit) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.7778258, "supported_languages": null}, "macro.dbt.default__get_test_sql": {"unique_id": "macro.dbt.default__get_test_sql", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\helpers.sql", "original_file_path": "macros\\materializations\\tests\\helpers.sql", "name": "default__get_test_sql", "macro_sql": "{% macro default__get_test_sql(main_sql, fail_calc, warn_if, error_if, limit) -%}\n    select\n      {{ fail_calc }} as failures,\n      {{ fail_calc }} {{ warn_if }} as should_warn,\n      {{ fail_calc }} {{ error_if }} as should_error\n    from (\n      {{ main_sql }}\n      {{ \"limit \" ~ limit if limit != none }}\n    ) dbt_internal_test\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.7788334, "supported_languages": null}, "macro.dbt.materialization_test_default": {"unique_id": "macro.dbt.materialization_test_default", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\test.sql", "original_file_path": "macros\\materializations\\tests\\test.sql", "name": "materialization_test_default", "macro_sql": "{%- materialization test, default -%}\n\n  {% set relations = [] %}\n\n  {% if should_store_failures() %}\n\n    {% set identifier = model['alias'] %}\n    {% set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) %}\n    {% set target_relation = api.Relation.create(\n        identifier=identifier, schema=schema, database=database, type='table') -%} %}\n\n    {% if old_relation %}\n        {% do adapter.drop_relation(old_relation) %}\n    {% endif %}\n\n    {% call statement(auto_begin=True) %}\n        {{ create_table_as(False, target_relation, sql) }}\n    {% endcall %}\n\n    {% do relations.append(target_relation) %}\n\n    {% set main_sql %}\n        select *\n        from {{ target_relation }}\n    {% endset %}\n\n    {{ adapter.commit() }}\n\n  {% else %}\n\n      {% set main_sql = sql %}\n\n  {% endif %}\n\n  {% set limit = config.get('limit') %}\n  {% set fail_calc = config.get('fail_calc') %}\n  {% set warn_if = config.get('warn_if') %}\n  {% set error_if = config.get('error_if') %}\n\n  {% call statement('main', fetch_result=True) -%}\n\n    {{ get_test_sql(main_sql, fail_calc, warn_if, error_if, limit)}}\n\n  {%- endcall %}\n\n  {{ return({'relations': relations}) }}\n\n{%- endmaterialization -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.should_store_failures", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt.get_test_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.7928295, "supported_languages": ["sql"]}, "macro.dbt.get_where_subquery": {"unique_id": "macro.dbt.get_where_subquery", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "name": "get_where_subquery", "macro_sql": "{% macro get_where_subquery(relation) -%}\n    {% do return(adapter.dispatch('get_where_subquery', 'dbt')(relation)) %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__get_where_subquery"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.7943392, "supported_languages": null}, "macro.dbt.default__get_where_subquery": {"unique_id": "macro.dbt.default__get_where_subquery", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\materializations\\tests\\where_subquery.sql", "original_file_path": "macros\\materializations\\tests\\where_subquery.sql", "name": "default__get_where_subquery", "macro_sql": "{% macro default__get_where_subquery(relation) -%}\n    {% set where = config.get('where', '') %}\n    {% if where %}\n        {%- set filtered -%}\n            (select * from {{ relation }} where {{ where }}) dbt_subquery\n        {%- endset -%}\n        {% do return(filtered) %}\n    {%- else -%}\n        {% do return(relation) %}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.8033435, "supported_languages": null}, "macro.dbt.build_ref_function": {"unique_id": "macro.dbt.build_ref_function", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "name": "build_ref_function", "macro_sql": "{% macro build_ref_function(model) %}\n\n    {%- set ref_dict = {} -%}\n    {%- for _ref in model.refs -%}\n        {%- set resolved = ref(*_ref) -%}\n        {%- do ref_dict.update({_ref | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef ref(*args,dbt_load_df_function):\n    refs = {{ ref_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(refs[key])\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.8118603, "supported_languages": null}, "macro.dbt.build_source_function": {"unique_id": "macro.dbt.build_source_function", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "name": "build_source_function", "macro_sql": "{% macro build_source_function(model) %}\n\n    {%- set source_dict = {} -%}\n    {%- for _source in model.sources -%}\n        {%- set resolved = source(*_source) -%}\n        {%- do source_dict.update({_source | join(\".\"): resolved.quote(database=False, schema=False, identifier=False) | string}) -%}\n    {%- endfor -%}\n\ndef source(*args, dbt_load_df_function):\n    sources = {{ source_dict | tojson }}\n    key = \".\".join(args)\n    return dbt_load_df_function(sources[key])\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.8138607, "supported_languages": null}, "macro.dbt.build_config_dict": {"unique_id": "macro.dbt.build_config_dict", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "name": "build_config_dict", "macro_sql": "{% macro build_config_dict(model) %}\n    {%- set config_dict = {} -%}\n    {%- for key in model.config.config_keys_used -%}\n        {# weird type testing with enum, would be much easier to write this logic in Python! #}\n        {%- if key == 'language' -%}\n          {%- set value = 'python' -%}\n        {%- endif -%}\n        {%- set value = model.config[key] -%}\n        {%- do config_dict.update({key: value}) -%}\n    {%- endfor -%}\nconfig_dict = {{ config_dict }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.8158648, "supported_languages": null}, "macro.dbt.py_script_postfix": {"unique_id": "macro.dbt.py_script_postfix", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "name": "py_script_postfix", "macro_sql": "{% macro py_script_postfix(model) %}\n# This part is user provided model code\n# you will need to copy the next section to run the code\n# COMMAND ----------\n# this part is dbt logic for get ref work, do not modify\n\n{{ build_ref_function(model ) }}\n{{ build_source_function(model ) }}\n{{ build_config_dict(model) }}\n\nclass config:\n    def __init__(self, *args, **kwargs):\n        pass\n\n    @staticmethod\n    def get(key, default=None):\n        return config_dict.get(key, default)\n\nclass this:\n    \"\"\"dbt.this() or dbt.this.identifier\"\"\"\n    database = '{{ this.database }}'\n    schema = '{{ this.schema }}'\n    identifier = '{{ this.identifier }}'\n    def __repr__(self):\n        return '{{ this }}'\n\n\nclass dbtObj:\n    def __init__(self, load_df_function) -> None:\n        self.source = lambda *args: source(*args, dbt_load_df_function=load_df_function)\n        self.ref = lambda *args: ref(*args, dbt_load_df_function=load_df_function)\n        self.config = config\n        self.this = this()\n        self.is_incremental = {{ is_incremental() }}\n\n# COMMAND ----------\n{{py_script_comment()}}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.build_ref_function", "macro.dbt.build_source_function", "macro.dbt.build_config_dict", "macro.dbt.is_incremental", "macro.dbt.py_script_comment"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.817865, "supported_languages": null}, "macro.dbt.py_script_comment": {"unique_id": "macro.dbt.py_script_comment", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\python_model\\python.sql", "original_file_path": "macros\\python_model\\python.sql", "name": "py_script_comment", "macro_sql": "{%macro py_script_comment()%}\n{%endmacro%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.817865, "supported_languages": null}, "macro.dbt.any_value": {"unique_id": "macro.dbt.any_value", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.8198657, "supported_languages": null}, "macro.dbt.default__any_value": {"unique_id": "macro.dbt.default__any_value", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\any_value.sql", "original_file_path": "macros\\utils\\any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n\n    any_value({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.8198657, "supported_languages": null}, "macro.dbt.array_append": {"unique_id": "macro.dbt.array_append", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {{ return(adapter.dispatch('array_append', 'dbt')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.8218641, "supported_languages": null}, "macro.dbt.default__array_append": {"unique_id": "macro.dbt.default__array_append", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\array_append.sql", "original_file_path": "macros\\utils\\array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.8218641, "supported_languages": null}, "macro.dbt.array_concat": {"unique_id": "macro.dbt.array_concat", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {{ return(adapter.dispatch('array_concat', 'dbt')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.8228645, "supported_languages": null}, "macro.dbt.default__array_concat": {"unique_id": "macro.dbt.default__array_concat", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\array_concat.sql", "original_file_path": "macros\\utils\\array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.823865, "supported_languages": null}, "macro.dbt.array_construct": {"unique_id": "macro.dbt.array_construct", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs=[], data_type=api.Column.translate_type('integer')) -%}\n  {{ return(adapter.dispatch('array_construct', 'dbt')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.8248649, "supported_languages": null}, "macro.dbt.default__array_construct": {"unique_id": "macro.dbt.default__array_construct", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\array_construct.sql", "original_file_path": "macros\\utils\\array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.827373, "supported_languages": null}, "macro.dbt.bool_or": {"unique_id": "macro.dbt.bool_or", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.8293777, "supported_languages": null}, "macro.dbt.default__bool_or": {"unique_id": "macro.dbt.default__bool_or", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\bool_or.sql", "original_file_path": "macros\\utils\\bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n\n    bool_or({{ expression }})\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.8303778, "supported_languages": null}, "macro.dbt.cast_bool_to_text": {"unique_id": "macro.dbt.cast_bool_to_text", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.8313775, "supported_languages": null}, "macro.dbt.default__cast_bool_to_text": {"unique_id": "macro.dbt.default__cast_bool_to_text", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\cast_bool_to_text.sql", "original_file_path": "macros\\utils\\cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n    cast({{ field }} as {{ api.Column.translate_type('string') }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.8323772, "supported_languages": null}, "macro.dbt.concat": {"unique_id": "macro.dbt.concat", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.8343775, "supported_languages": null}, "macro.dbt.default__concat": {"unique_id": "macro.dbt.default__concat", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\concat.sql", "original_file_path": "macros\\utils\\concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n    {{ fields|join(' || ') }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.8343775, "supported_languages": null}, "macro.dbt.type_string": {"unique_id": "macro.dbt.type_string", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n  {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.839377, "supported_languages": null}, "macro.dbt.default__type_string": {"unique_id": "macro.dbt.default__type_string", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {{ return(api.Column.translate_type(\"string\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.839377, "supported_languages": null}, "macro.dbt.type_timestamp": {"unique_id": "macro.dbt.type_timestamp", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n  {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.840377, "supported_languages": null}, "macro.dbt.default__type_timestamp": {"unique_id": "macro.dbt.default__type_timestamp", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {{ return(api.Column.translate_type(\"timestamp\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.8413773, "supported_languages": null}, "macro.dbt.type_float": {"unique_id": "macro.dbt.type_float", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n  {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.8413773, "supported_languages": null}, "macro.dbt.default__type_float": {"unique_id": "macro.dbt.default__type_float", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {{ return(api.Column.translate_type(\"float\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.8413773, "supported_languages": null}, "macro.dbt.type_numeric": {"unique_id": "macro.dbt.type_numeric", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n  {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.8458977, "supported_languages": null}, "macro.dbt.default__type_numeric": {"unique_id": "macro.dbt.default__type_numeric", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {{ return(api.Column.numeric_type(\"numeric\", 28, 6)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.8478963, "supported_languages": null}, "macro.dbt.type_bigint": {"unique_id": "macro.dbt.type_bigint", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n  {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.848896, "supported_languages": null}, "macro.dbt.default__type_bigint": {"unique_id": "macro.dbt.default__type_bigint", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {{ return(api.Column.translate_type(\"bigint\")) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.8498967, "supported_languages": null}, "macro.dbt.type_int": {"unique_id": "macro.dbt.type_int", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n  {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.850896, "supported_languages": null}, "macro.dbt.default__type_int": {"unique_id": "macro.dbt.default__type_int", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_int", "macro_sql": "{%- macro default__type_int() -%}\n  {{ return(api.Column.translate_type(\"integer\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.851897, "supported_languages": null}, "macro.dbt.type_boolean": {"unique_id": "macro.dbt.type_boolean", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "type_boolean", "macro_sql": "\n\n{%- macro type_boolean() -%}\n  {{ return(adapter.dispatch('type_boolean', 'dbt')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__type_boolean"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.8528957, "supported_languages": null}, "macro.dbt.default__type_boolean": {"unique_id": "macro.dbt.default__type_boolean", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\data_types.sql", "original_file_path": "macros\\utils\\data_types.sql", "name": "default__type_boolean", "macro_sql": "{%- macro default__type_boolean() -%}\n  {{ return(api.Column.translate_type(\"boolean\")) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.8538961, "supported_languages": null}, "macro.dbt.dateadd": {"unique_id": "macro.dbt.dateadd", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.8568954, "supported_languages": null}, "macro.dbt.default__dateadd": {"unique_id": "macro.dbt.default__dateadd", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\dateadd.sql", "original_file_path": "macros\\utils\\dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n\n    dateadd(\n        {{ datepart }},\n        {{ interval }},\n        {{ from_date_or_timestamp }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.8579133, "supported_languages": null}, "macro.dbt.datediff": {"unique_id": "macro.dbt.datediff", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.860909, "supported_languages": null}, "macro.dbt.default__datediff": {"unique_id": "macro.dbt.default__datediff", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\datediff.sql", "original_file_path": "macros\\utils\\datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) -%}\n\n    datediff(\n        {{ datepart }},\n        {{ first_date }},\n        {{ second_date }}\n        )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.8619072, "supported_languages": null}, "macro.dbt.date_trunc": {"unique_id": "macro.dbt.date_trunc", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.8654277, "supported_languages": null}, "macro.dbt.default__date_trunc": {"unique_id": "macro.dbt.default__date_trunc", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\date_trunc.sql", "original_file_path": "macros\\utils\\date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n    date_trunc('{{datepart}}', {{date}})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.8654277, "supported_languages": null}, "macro.dbt.escape_single_quotes": {"unique_id": "macro.dbt.escape_single_quotes", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.868514, "supported_languages": null}, "macro.dbt.default__escape_single_quotes": {"unique_id": "macro.dbt.default__escape_single_quotes", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\escape_single_quotes.sql", "original_file_path": "macros\\utils\\escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) -%}\n{{ expression | replace(\"'\",\"''\") }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.8695142, "supported_languages": null}, "macro.dbt.except": {"unique_id": "macro.dbt.except", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.8714359, "supported_languages": null}, "macro.dbt.default__except": {"unique_id": "macro.dbt.default__except", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\except.sql", "original_file_path": "macros\\utils\\except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n\n    except\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.8724346, "supported_languages": null}, "macro.dbt.hash": {"unique_id": "macro.dbt.hash", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.8799524, "supported_languages": null}, "macro.dbt.default__hash": {"unique_id": "macro.dbt.default__hash", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\hash.sql", "original_file_path": "macros\\utils\\hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n    md5(cast({{ field }} as {{ api.Column.translate_type('string') }}))\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.8809526, "supported_languages": null}, "macro.dbt.intersect": {"unique_id": "macro.dbt.intersect", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.8829522, "supported_languages": null}, "macro.dbt.default__intersect": {"unique_id": "macro.dbt.default__intersect", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\intersect.sql", "original_file_path": "macros\\utils\\intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n\n    intersect\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.8829522, "supported_languages": null}, "macro.dbt.last_day": {"unique_id": "macro.dbt.last_day", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.884952, "supported_languages": null}, "macro.dbt.default_last_day": {"unique_id": "macro.dbt.default_last_day", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "name": "default_last_day", "macro_sql": "\n\n{%- macro default_last_day(date, datepart) -%}\n    cast(\n        {{dbt.dateadd('day', '-1',\n        dbt.dateadd(datepart, '1', dbt.date_trunc(datepart, date))\n        )}}\n        as date)\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.dateadd", "macro.dbt.date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.8869524, "supported_languages": null}, "macro.dbt.default__last_day": {"unique_id": "macro.dbt.default__last_day", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\last_day.sql", "original_file_path": "macros\\utils\\last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) -%}\n    {{dbt.default_last_day(date, datepart)}}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default_last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.8869524, "supported_languages": null}, "macro.dbt.length": {"unique_id": "macro.dbt.length", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.8889523, "supported_languages": null}, "macro.dbt.default__length": {"unique_id": "macro.dbt.default__length", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\length.sql", "original_file_path": "macros\\utils\\length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) %}\n\n    length(\n        {{ expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.8889523, "supported_languages": null}, "macro.dbt.listagg": {"unique_id": "macro.dbt.listagg", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.894463, "supported_languages": null}, "macro.dbt.default__listagg": {"unique_id": "macro.dbt.default__listagg", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\listagg.sql", "original_file_path": "macros\\utils\\listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text, order_by_clause, limit_num) -%}\n\n    {% if limit_num -%}\n    array_to_string(\n        array_slice(\n            array_agg(\n                {{ measure }}\n            ){% if order_by_clause -%}\n            within group ({{ order_by_clause }})\n            {%- endif %}\n            ,0\n            ,{{ limit_num }}\n        ),\n        {{ delimiter_text }}\n        )\n    {%- else %}\n    listagg(\n        {{ measure }},\n        {{ delimiter_text }}\n        )\n        {% if order_by_clause -%}\n        within group ({{ order_by_clause }})\n        {%- endif %}\n    {%- endif %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.8974683, "supported_languages": null}, "macro.dbt.string_literal": {"unique_id": "macro.dbt.string_literal", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.899469, "supported_languages": null}, "macro.dbt.default__string_literal": {"unique_id": "macro.dbt.default__string_literal", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\literal.sql", "original_file_path": "macros\\utils\\literal.sql", "name": "default__string_literal", "macro_sql": "{% macro default__string_literal(value) -%}\n    '{{ value }}'\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.900468, "supported_languages": null}, "macro.dbt.position": {"unique_id": "macro.dbt.position", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.9034688, "supported_languages": null}, "macro.dbt.default__position": {"unique_id": "macro.dbt.default__position", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\position.sql", "original_file_path": "macros\\utils\\position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) %}\n\n    position(\n        {{ substring_text }} in {{ string_text }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.9044685, "supported_languages": null}, "macro.dbt.replace": {"unique_id": "macro.dbt.replace", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.9084742, "supported_languages": null}, "macro.dbt.default__replace": {"unique_id": "macro.dbt.default__replace", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\replace.sql", "original_file_path": "macros\\utils\\replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) %}\n\n    replace(\n        {{ field }},\n        {{ old_chars }},\n        {{ new_chars }}\n    )\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.9094744, "supported_languages": null}, "macro.dbt.right": {"unique_id": "macro.dbt.right", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.911993, "supported_languages": null}, "macro.dbt.default__right": {"unique_id": "macro.dbt.default__right", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\right.sql", "original_file_path": "macros\\utils\\right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) %}\n\n    right(\n        {{ string_text }},\n        {{ length_expression }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.9129934, "supported_languages": null}, "macro.dbt.safe_cast": {"unique_id": "macro.dbt.safe_cast", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.9159927, "supported_languages": null}, "macro.dbt.default__safe_cast": {"unique_id": "macro.dbt.default__safe_cast", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\safe_cast.sql", "original_file_path": "macros\\utils\\safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n    {# most databases don't support this function yet\n    so we just need to use cast #}\n    cast({{field}} as {{type}})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.9169984, "supported_languages": null}, "macro.dbt.split_part": {"unique_id": "macro.dbt.split_part", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.9199986, "supported_languages": null}, "macro.dbt.default__split_part": {"unique_id": "macro.dbt.default__split_part", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n        {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.9275105, "supported_languages": null}, "macro.dbt._split_part_negative": {"unique_id": "macro.dbt._split_part_negative", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "macros\\utils\\split_part.sql", "original_file_path": "macros\\utils\\split_part.sql", "name": "_split_part_negative", "macro_sql": "{% macro _split_part_negative(string_text, delimiter_text, part_number) %}\n\n    split_part(\n        {{ string_text }},\n        {{ delimiter_text }},\n          length({{ string_text }})\n          - length(\n              replace({{ string_text }},  {{ delimiter_text }}, '')\n          ) + 2 {{ part_number }}\n        )\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.9295144, "supported_languages": null}, "macro.dbt.test_unique": {"unique_id": "macro.dbt.test_unique", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_unique", "macro_sql": "{% test unique(model, column_name) %}\n    {% set macro = adapter.dispatch('test_unique', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.933515, "supported_languages": null}, "macro.dbt.test_not_null": {"unique_id": "macro.dbt.test_not_null", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_not_null", "macro_sql": "{% test not_null(model, column_name) %}\n    {% set macro = adapter.dispatch('test_not_null', 'dbt') %}\n    {{ macro(model, column_name) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.9345148, "supported_languages": null}, "macro.dbt.test_accepted_values": {"unique_id": "macro.dbt.test_accepted_values", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_accepted_values", "macro_sql": "{% test accepted_values(model, column_name, values, quote=True) %}\n    {% set macro = adapter.dispatch('test_accepted_values', 'dbt') %}\n    {{ macro(model, column_name, values, quote) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.9375162, "supported_languages": null}, "macro.dbt.test_relationships": {"unique_id": "macro.dbt.test_relationships", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "tests\\generic\\builtin.sql", "original_file_path": "tests\\generic\\builtin.sql", "name": "test_relationships", "macro_sql": "{% test relationships(model, column_name, to, field) %}\n    {% set macro = adapter.dispatch('test_relationships', 'dbt') %}\n    {{ macro(model, column_name, to, field) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.default__test_relationships"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.9395218, "supported_languages": null}, "macro.claims_preprocessing.default__generate_schema_name": {"unique_id": "macro.claims_preprocessing.default__generate_schema_name", "package_name": "claims_preprocessing", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\claims_preprocessing", "path": "macros\\generate_schema_name.sql", "original_file_path": "macros\\generate_schema_name.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\r\n    {%- set default_schema = target.schema -%}\r\n    {%- if custom_schema_name is not none -%}\r\n        {{ custom_schema_name | trim }}\r\n    {%- else -%}\r\n        {{ default_schema }}\r\n    {%- endif -%}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.9415205, "supported_languages": null}, "macro.cms_chronic_conditions.default__generate_schema_name": {"unique_id": "macro.cms_chronic_conditions.default__generate_schema_name", "package_name": "cms_chronic_conditions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\cms_chronic_conditions", "path": "macros\\generate_schema_name.sql", "original_file_path": "macros\\generate_schema_name.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is not none -%}\n        {{ custom_schema_name | trim }}\n    {%- else -%}\n        {{ default_schema }}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.9450338, "supported_languages": null}, "macro.data_profiling.cast_string_or_varchar": {"unique_id": "macro.data_profiling.cast_string_or_varchar", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "macros\\cast_string_or_varchar.sql", "original_file_path": "macros\\cast_string_or_varchar.sql", "name": "cast_string_or_varchar", "macro_sql": "\n\n{%- macro cast_string_or_varchar(column_name) -%}\n\n    {{ return(adapter.dispatch('cast_string_or_varchar')(column_name)) }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.data_profiling.snowflake__cast_string_or_varchar"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.9480433, "supported_languages": null}, "macro.data_profiling.bigquery__cast_string_or_varchar": {"unique_id": "macro.data_profiling.bigquery__cast_string_or_varchar", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "macros\\cast_string_or_varchar.sql", "original_file_path": "macros\\cast_string_or_varchar.sql", "name": "bigquery__cast_string_or_varchar", "macro_sql": "{%- macro bigquery__cast_string_or_varchar(column_name) -%}\n\n    cast( {{ column_name }} as string )\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.9490428, "supported_languages": null}, "macro.data_profiling.default__cast_string_or_varchar": {"unique_id": "macro.data_profiling.default__cast_string_or_varchar", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "macros\\cast_string_or_varchar.sql", "original_file_path": "macros\\cast_string_or_varchar.sql", "name": "default__cast_string_or_varchar", "macro_sql": "{%- macro default__cast_string_or_varchar(column_name) %}\n\n    cast( {{ column_name }} as string )\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.9490428, "supported_languages": null}, "macro.data_profiling.redshift__cast_string_or_varchar": {"unique_id": "macro.data_profiling.redshift__cast_string_or_varchar", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "macros\\cast_string_or_varchar.sql", "original_file_path": "macros\\cast_string_or_varchar.sql", "name": "redshift__cast_string_or_varchar", "macro_sql": "{%- macro redshift__cast_string_or_varchar(column_name) -%}\n\n    cast( {{ column_name }} as varchar )\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.950044, "supported_languages": null}, "macro.data_profiling.snowflake__cast_string_or_varchar": {"unique_id": "macro.data_profiling.snowflake__cast_string_or_varchar", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "macros\\cast_string_or_varchar.sql", "original_file_path": "macros\\cast_string_or_varchar.sql", "name": "snowflake__cast_string_or_varchar", "macro_sql": "{%- macro snowflake__cast_string_or_varchar(column_name) %}\n\n    cast( {{ column_name }} as string )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.951043, "supported_languages": null}, "macro.data_profiling.current_date_or_timestamp": {"unique_id": "macro.data_profiling.current_date_or_timestamp", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "macros\\current_date_or_timestamp.sql", "original_file_path": "macros\\current_date_or_timestamp.sql", "name": "current_date_or_timestamp", "macro_sql": "\n\n{%- macro current_date_or_timestamp(date_format='date') -%}\n\n    {{ return(adapter.dispatch('current_date_or_timestamp')(date_format)) }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.data_profiling.snowflake__current_date_or_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.9540434, "supported_languages": null}, "macro.data_profiling.bigquery__current_date_or_timestamp": {"unique_id": "macro.data_profiling.bigquery__current_date_or_timestamp", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "macros\\current_date_or_timestamp.sql", "original_file_path": "macros\\current_date_or_timestamp.sql", "name": "bigquery__current_date_or_timestamp", "macro_sql": "{%- macro bigquery__current_date_or_timestamp(date_format) -%}\n\n    cast(current_timestamp as {{date_format }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.9540434, "supported_languages": null}, "macro.data_profiling.default__current_date_or_timestamp": {"unique_id": "macro.data_profiling.default__current_date_or_timestamp", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "macros\\current_date_or_timestamp.sql", "original_file_path": "macros\\current_date_or_timestamp.sql", "name": "default__current_date_or_timestamp", "macro_sql": "{%- macro default__current_date_or_timestamp(date_format) %}\n\n    cast(current_timestamp() as {{date_format }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.955043, "supported_languages": null}, "macro.data_profiling.redshift__current_date_or_timestamp": {"unique_id": "macro.data_profiling.redshift__current_date_or_timestamp", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "macros\\current_date_or_timestamp.sql", "original_file_path": "macros\\current_date_or_timestamp.sql", "name": "redshift__current_date_or_timestamp", "macro_sql": "{%- macro redshift__current_date_or_timestamp(date_format) -%}\n\n    cast(getdate() as {{date_format }})\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.9560435, "supported_languages": null}, "macro.data_profiling.snowflake__current_date_or_timestamp": {"unique_id": "macro.data_profiling.snowflake__current_date_or_timestamp", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "macros\\current_date_or_timestamp.sql", "original_file_path": "macros\\current_date_or_timestamp.sql", "name": "snowflake__current_date_or_timestamp", "macro_sql": "{%- macro snowflake__current_date_or_timestamp(date_format) %}\n\n    cast(current_timestamp() as {{date_format }})\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.9560435, "supported_languages": null}, "macro.data_profiling.default__generate_schema_name": {"unique_id": "macro.data_profiling.default__generate_schema_name", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "macros\\generate_schema_name.sql", "original_file_path": "macros\\generate_schema_name.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is not none -%}\n        {{ custom_schema_name | trim }}\n    {%- else -%}\n        {{ default_schema }}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.9580436, "supported_languages": null}, "macro.data_profiling.missing_field_check": {"unique_id": "macro.data_profiling.missing_field_check", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "macros\\missing_field_check.sql", "original_file_path": "macros\\missing_field_check.sql", "name": "missing_field_check", "macro_sql": "\n\n{%- macro missing_field_check(column_name) -%}\n\n    {{ return(adapter.dispatch('missing_field_check')(column_name)) }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.data_profiling.snowflake__missing_field_check"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.9625523, "supported_languages": null}, "macro.data_profiling.bigquery__missing_field_check": {"unique_id": "macro.data_profiling.bigquery__missing_field_check", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "macros\\missing_field_check.sql", "original_file_path": "macros\\missing_field_check.sql", "name": "bigquery__missing_field_check", "macro_sql": "{%- macro bigquery__missing_field_check(column_name) -%}\n\n    case\n      when {{ column_name }} is null or cast({{ column_name }} as string) = '' then 1\n      else 0\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.9625523, "supported_languages": null}, "macro.data_profiling.default__missing_field_check": {"unique_id": "macro.data_profiling.default__missing_field_check", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "macros\\missing_field_check.sql", "original_file_path": "macros\\missing_field_check.sql", "name": "default__missing_field_check", "macro_sql": "{%- macro default__missing_field_check(column_name) %}\n\n    case\n      when {{ column_name }} is null or cast({{ column_name }} as string) = '' then 1\n      else 0\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.963552, "supported_languages": null}, "macro.data_profiling.redshift__missing_field_check": {"unique_id": "macro.data_profiling.redshift__missing_field_check", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "macros\\missing_field_check.sql", "original_file_path": "macros\\missing_field_check.sql", "name": "redshift__missing_field_check", "macro_sql": "{%- macro redshift__missing_field_check(column_name) -%}\n\n    case\n      when {{ column_name }} is null or cast({{ column_name }} as varchar) = '' then 1\n      else 0\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.964552, "supported_languages": null}, "macro.data_profiling.snowflake__missing_field_check": {"unique_id": "macro.data_profiling.snowflake__missing_field_check", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "macros\\missing_field_check.sql", "original_file_path": "macros\\missing_field_check.sql", "name": "snowflake__missing_field_check", "macro_sql": "{%- macro snowflake__missing_field_check(column_name) %}\n\n    case\n      when {{ column_name }} is null or cast({{ column_name }} as string) = '' then 1\n      else 0\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.9655519, "supported_languages": null}, "macro.data_profiling.sum_all_checks_in_table": {"unique_id": "macro.data_profiling.sum_all_checks_in_table", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "macros\\sum_all_checks_in_table.sql", "original_file_path": "macros\\sum_all_checks_in_table.sql", "name": "sum_all_checks_in_table", "macro_sql": "{% macro sum_all_checks_in_table(relation, column_list) %}\n\n\n    {%- set all_columns = adapter.get_columns_in_relation(\n        relation\n    ) -%}\n\n    {%- for column_item in all_columns\n        if column_item.name.lower() in column_list %}\n\n        select\n              '{{ relation.identifier }}' as table_name\n            , '{{ column_item.name|lower }}' as test_name\n            , coalesce(sum( {{ column_item.name }} ),0) as test_fail_numerator\n        from {{ relation }}\n\n        {% if not loop.last -%}\n            union all\n        {%- endif -%}\n\n        {%- endfor -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.9765658, "supported_languages": null}, "macro.data_profiling.valid_birth_or_death_date_check": {"unique_id": "macro.data_profiling.valid_birth_or_death_date_check", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "macros\\valid_birth_or_death_date_check.sql", "original_file_path": "macros\\valid_birth_or_death_date_check.sql", "name": "valid_birth_or_death_date_check", "macro_sql": "\n\n{%- macro valid_birth_or_death_date_check(column_name) -%}\n\n    {{ return(adapter.dispatch('valid_birth_or_death_date_check')(column_name)) }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.data_profiling.snowflake__valid_birth_or_death_date_check"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.9815784, "supported_languages": null}, "macro.data_profiling.bigquery__valid_birth_or_death_date_check": {"unique_id": "macro.data_profiling.bigquery__valid_birth_or_death_date_check", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "macros\\valid_birth_or_death_date_check.sql", "original_file_path": "macros\\valid_birth_or_death_date_check.sql", "name": "bigquery__valid_birth_or_death_date_check", "macro_sql": "{%- macro bigquery__valid_birth_or_death_date_check(column_name) -%}\n\n    case\n      when {{ column_name }} is null then 0\n      when safe_cast({{ column_name }} as date) is not null\n        and safe_cast({{ column_name }} as date) between '1900-01-01' and {{ current_date_or_timestamp('date') }}\n        then 0\n      else 1\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.data_profiling.current_date_or_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.982578, "supported_languages": null}, "macro.data_profiling.default__valid_birth_or_death_date_check": {"unique_id": "macro.data_profiling.default__valid_birth_or_death_date_check", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "macros\\valid_birth_or_death_date_check.sql", "original_file_path": "macros\\valid_birth_or_death_date_check.sql", "name": "default__valid_birth_or_death_date_check", "macro_sql": "{%- macro default__valid_birth_or_death_date_check(column_name) -%}\n\n    case\n      when {{ column_name }} is null then 0\n      when try_cast({{ column_name }} as date) is not null\n        and try_cast({{ column_name }} as date) between '1900-01-01' and {{ current_date_or_timestamp('date') }}\n        then 0\n      else 1\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.data_profiling.current_date_or_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.9905849, "supported_languages": null}, "macro.data_profiling.redshift__valid_birth_or_death_date_check": {"unique_id": "macro.data_profiling.redshift__valid_birth_or_death_date_check", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "macros\\valid_birth_or_death_date_check.sql", "original_file_path": "macros\\valid_birth_or_death_date_check.sql", "name": "redshift__valid_birth_or_death_date_check", "macro_sql": "{%- macro redshift__valid_birth_or_death_date_check(column_name) -%}\n\n    case\n      when {{ column_name }} is null then 0\n      when {{ column_name }} similar to '\\\\d{4}-\\\\d{2}-\\\\d{2}'\n        and cast({{ column_name }} as date) between '1900-01-01' and {{ current_date_or_timestamp('date') }}\n        then 0\n      else 1\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.data_profiling.current_date_or_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.9915836, "supported_languages": null}, "macro.data_profiling.snowflake__valid_birth_or_death_date_check": {"unique_id": "macro.data_profiling.snowflake__valid_birth_or_death_date_check", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "macros\\valid_birth_or_death_date_check.sql", "original_file_path": "macros\\valid_birth_or_death_date_check.sql", "name": "snowflake__valid_birth_or_death_date_check", "macro_sql": "{%- macro snowflake__valid_birth_or_death_date_check(column_name) -%}\n\n    case\n      when {{ column_name }} is null then 0\n      when try_cast({{ column_name }} as date) is not null\n        and try_cast({{ column_name }} as date) between '1900-01-01' and {{ current_date_or_timestamp('date') }}\n        then 0\n      else 1\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.data_profiling.current_date_or_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.9915836, "supported_languages": null}, "macro.data_profiling.valid_claim_date_check": {"unique_id": "macro.data_profiling.valid_claim_date_check", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "macros\\valid_claim_date_check.sql", "original_file_path": "macros\\valid_claim_date_check.sql", "name": "valid_claim_date_check", "macro_sql": "\n\n{%- macro valid_claim_date_check(column_name) -%}\n\n    {{ return(adapter.dispatch('valid_claim_date_check')(column_name)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.data_profiling.snowflake__valid_claim_date_check"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.9960966, "supported_languages": null}, "macro.data_profiling.bigquery__valid_claim_date_check": {"unique_id": "macro.data_profiling.bigquery__valid_claim_date_check", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "macros\\valid_claim_date_check.sql", "original_file_path": "macros\\valid_claim_date_check.sql", "name": "bigquery__valid_claim_date_check", "macro_sql": "\n\n{%- macro bigquery__valid_claim_date_check(column_name) -%}\n\n    case\n      when {{ column_name }} is null then 0\n      when safe_cast({{ column_name }} as date) is not null\n        and safe_cast({{ column_name }} as date) between '2000-01-01' and {{ current_date_or_timestamp('date') }}\n        then 0\n      else 1\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.data_profiling.current_date_or_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.9970965, "supported_languages": null}, "macro.data_profiling.default__valid_claim_date_check": {"unique_id": "macro.data_profiling.default__valid_claim_date_check", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "macros\\valid_claim_date_check.sql", "original_file_path": "macros\\valid_claim_date_check.sql", "name": "default__valid_claim_date_check", "macro_sql": "{%- macro default__valid_claim_date_check(column_name) -%}\n\n    case\n      when {{ column_name }} is null then 0\n      when try_cast({{ column_name }} as date) is not null\n        and try_cast({{ column_name }} as date) between '2000-01-01' and {{ current_date_or_timestamp('date') }}\n        then 0\n      else 1\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.data_profiling.current_date_or_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.9970965, "supported_languages": null}, "macro.data_profiling.redshift__valid_claim_date_check": {"unique_id": "macro.data_profiling.redshift__valid_claim_date_check", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "macros\\valid_claim_date_check.sql", "original_file_path": "macros\\valid_claim_date_check.sql", "name": "redshift__valid_claim_date_check", "macro_sql": "{%- macro redshift__valid_claim_date_check(column_name) -%}\n\n    case\n      when {{ column_name }} is null then 0\n      when {{ column_name }} similar to '\\\\d{4}-\\\\d{2}-\\\\d{2}'\n        and cast({{ column_name }} as date) between '2000-01-01' and {{ current_date_or_timestamp('date') }}\n        then 0\n      else 1\n    end\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.data_profiling.current_date_or_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.9980965, "supported_languages": null}, "macro.data_profiling.snowflake__valid_claim_date_check": {"unique_id": "macro.data_profiling.snowflake__valid_claim_date_check", "package_name": "data_profiling", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\data_profiling", "path": "macros\\valid_claim_date_check.sql", "original_file_path": "macros\\valid_claim_date_check.sql", "name": "snowflake__valid_claim_date_check", "macro_sql": "{%- macro snowflake__valid_claim_date_check(column_name) -%}\n\n    case\n      when {{ column_name }} is null then 0\n      when try_cast({{ column_name }} as date) is not null\n        and try_cast({{ column_name }} as date) between '2000-01-01' and {{ current_date_or_timestamp('date') }}\n        then 0\n      else 1\n    end\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.data_profiling.current_date_or_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073783.9990962, "supported_languages": null}, "macro.dbt_utils.array_append": {"unique_id": "macro.dbt_utils.array_append", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_append.sql", "original_file_path": "macros\\cross_db_utils\\array_append.sql", "name": "array_append", "macro_sql": "{% macro array_append(array, new_element) -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('array_append', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('array_append', 'dbt_utils')(array, new_element)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__array_append"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.0021007, "supported_languages": null}, "macro.dbt_utils.default__array_append": {"unique_id": "macro.dbt_utils.default__array_append", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_append.sql", "original_file_path": "macros\\cross_db_utils\\array_append.sql", "name": "default__array_append", "macro_sql": "{% macro default__array_append(array, new_element) -%}\n    array_append({{ array }}, {{ new_element }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.0031006, "supported_languages": null}, "macro.dbt_utils.bigquery__array_append": {"unique_id": "macro.dbt_utils.bigquery__array_append", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_append.sql", "original_file_path": "macros\\cross_db_utils\\array_append.sql", "name": "bigquery__array_append", "macro_sql": "{% macro bigquery__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.0041003, "supported_languages": null}, "macro.dbt_utils.redshift__array_append": {"unique_id": "macro.dbt_utils.redshift__array_append", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_append.sql", "original_file_path": "macros\\cross_db_utils\\array_append.sql", "name": "redshift__array_append", "macro_sql": "{% macro redshift__array_append(array, new_element) -%}\n    {{ dbt_utils.array_concat(array, dbt_utils.array_construct([new_element])) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.array_concat", "macro.dbt_utils.array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.0041003, "supported_languages": null}, "macro.dbt_utils.array_concat": {"unique_id": "macro.dbt_utils.array_concat", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_concat.sql", "original_file_path": "macros\\cross_db_utils\\array_concat.sql", "name": "array_concat", "macro_sql": "{% macro array_concat(array_1, array_2) -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('array_concat', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('array_concat', 'dbt_utils')(array_1, array_2)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__array_concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.0070999, "supported_languages": null}, "macro.dbt_utils.default__array_concat": {"unique_id": "macro.dbt_utils.default__array_concat", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_concat.sql", "original_file_path": "macros\\cross_db_utils\\array_concat.sql", "name": "default__array_concat", "macro_sql": "{% macro default__array_concat(array_1, array_2) -%}\n    array_cat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.0070999, "supported_languages": null}, "macro.dbt_utils.bigquery__array_concat": {"unique_id": "macro.dbt_utils.bigquery__array_concat", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_concat.sql", "original_file_path": "macros\\cross_db_utils\\array_concat.sql", "name": "bigquery__array_concat", "macro_sql": "{% macro bigquery__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.0081, "supported_languages": null}, "macro.dbt_utils.redshift__array_concat": {"unique_id": "macro.dbt_utils.redshift__array_concat", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_concat.sql", "original_file_path": "macros\\cross_db_utils\\array_concat.sql", "name": "redshift__array_concat", "macro_sql": "{% macro redshift__array_concat(array_1, array_2) -%}\n    array_concat({{ array_1 }}, {{ array_2 }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.0081, "supported_languages": null}, "macro.dbt_utils.array_construct": {"unique_id": "macro.dbt_utils.array_construct", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_construct.sql", "original_file_path": "macros\\cross_db_utils\\array_construct.sql", "name": "array_construct", "macro_sql": "{% macro array_construct(inputs = [], data_type = api.Column.translate_type('integer')) -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('array_construct', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('array_construct', 'dbt_utils')(inputs, data_type)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.snowflake__array_construct"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.011612, "supported_languages": null}, "macro.dbt_utils.default__array_construct": {"unique_id": "macro.dbt_utils.default__array_construct", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_construct.sql", "original_file_path": "macros\\cross_db_utils\\array_construct.sql", "name": "default__array_construct", "macro_sql": "{% macro default__array_construct(inputs, data_type) -%}\n    {% if inputs|length > 0 %}\n    array[ {{ inputs|join(' , ') }} ]\n    {% else %}\n    array[]::{{data_type}}[]\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.012612, "supported_languages": null}, "macro.dbt_utils.snowflake__array_construct": {"unique_id": "macro.dbt_utils.snowflake__array_construct", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_construct.sql", "original_file_path": "macros\\cross_db_utils\\array_construct.sql", "name": "snowflake__array_construct", "macro_sql": "{% macro snowflake__array_construct(inputs, data_type) -%}\n    array_construct( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.012612, "supported_languages": null}, "macro.dbt_utils.redshift__array_construct": {"unique_id": "macro.dbt_utils.redshift__array_construct", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_construct.sql", "original_file_path": "macros\\cross_db_utils\\array_construct.sql", "name": "redshift__array_construct", "macro_sql": "{% macro redshift__array_construct(inputs, data_type) -%}\n    array( {{ inputs|join(' , ') }} )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.0136118, "supported_languages": null}, "macro.dbt_utils.bigquery__array_construct": {"unique_id": "macro.dbt_utils.bigquery__array_construct", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\array_construct.sql", "original_file_path": "macros\\cross_db_utils\\array_construct.sql", "name": "bigquery__array_construct", "macro_sql": "{% macro bigquery__array_construct(inputs, data_type) -%}\n    [ {{ inputs|join(' , ') }} ]\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.0136118, "supported_languages": null}, "macro.dbt_utils.cast_array_to_string": {"unique_id": "macro.dbt_utils.cast_array_to_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_array_to_string.sql", "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql", "name": "cast_array_to_string", "macro_sql": "{% macro cast_array_to_string(array) %}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('cast_array_to_string', model.package_name, model.name) %}\n  {{ adapter.dispatch('cast_array_to_string', 'dbt_utils') (array) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__cast_array_to_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.0166128, "supported_languages": null}, "macro.dbt_utils.default__cast_array_to_string": {"unique_id": "macro.dbt_utils.default__cast_array_to_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_array_to_string.sql", "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql", "name": "default__cast_array_to_string", "macro_sql": "{% macro default__cast_array_to_string(array) %}\n    cast({{ array }} as {{ type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.0176125, "supported_languages": null}, "macro.dbt_utils.postgres__cast_array_to_string": {"unique_id": "macro.dbt_utils.postgres__cast_array_to_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_array_to_string.sql", "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql", "name": "postgres__cast_array_to_string", "macro_sql": "{% macro postgres__cast_array_to_string(array) %}\n    {%- set array_as_string -%}cast({{ array }} as {{ type_string() }}){%- endset -%}\n    {{ replace(replace(array_as_string,\"'}'\",\"']'\"),\"'{'\",\"'['\") }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.0186124, "supported_languages": null}, "macro.dbt_utils.redshift__cast_array_to_string": {"unique_id": "macro.dbt_utils.redshift__cast_array_to_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_array_to_string.sql", "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql", "name": "redshift__cast_array_to_string", "macro_sql": "{% macro redshift__cast_array_to_string(array) %}\n    cast({{ array }} as {{ type_string() }})\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.0186124, "supported_languages": null}, "macro.dbt_utils.bigquery__cast_array_to_string": {"unique_id": "macro.dbt_utils.bigquery__cast_array_to_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\cast_array_to_string.sql", "original_file_path": "macros\\cross_db_utils\\cast_array_to_string.sql", "name": "bigquery__cast_array_to_string", "macro_sql": "{% macro bigquery__cast_array_to_string(array) %}\n    '['||(select string_agg(cast(element as string), ',') from unnest({{ array }}) element)||']'\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.0186124, "supported_languages": null}, "macro.dbt_utils.current_timestamp": {"unique_id": "macro.dbt_utils.current_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "current_timestamp", "macro_sql": "{% macro current_timestamp() -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('current_timestamp', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('current_timestamp', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.default__current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.021612, "supported_languages": null}, "macro.dbt_utils.default__current_timestamp": {"unique_id": "macro.dbt_utils.default__current_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "default__current_timestamp", "macro_sql": "{% macro default__current_timestamp() %}\n    current_timestamp::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.0226123, "supported_languages": null}, "macro.dbt_utils.redshift__current_timestamp": {"unique_id": "macro.dbt_utils.redshift__current_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "redshift__current_timestamp", "macro_sql": "{% macro redshift__current_timestamp() %}\n    getdate()\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.0226123, "supported_languages": null}, "macro.dbt_utils.bigquery__current_timestamp": {"unique_id": "macro.dbt_utils.bigquery__current_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "bigquery__current_timestamp", "macro_sql": "{% macro bigquery__current_timestamp() %}\n    current_timestamp\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.0226123, "supported_languages": null}, "macro.dbt_utils.current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "current_timestamp_in_utc", "macro_sql": "{% macro current_timestamp_in_utc() -%}\n  {% do dbt_utils.xdb_deprecation_warning_without_replacement('current_timestamp_in_utc', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('current_timestamp_in_utc', 'dbt_utils')()) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning_without_replacement", "macro.dbt_utils.snowflake__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.023612, "supported_languages": null}, "macro.dbt_utils.default__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.default__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "default__current_timestamp_in_utc", "macro_sql": "{% macro default__current_timestamp_in_utc() %}\n    {{ dbt_utils.current_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.0246122, "supported_languages": null}, "macro.dbt_utils.snowflake__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.snowflake__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "snowflake__current_timestamp_in_utc", "macro_sql": "{% macro snowflake__current_timestamp_in_utc() %}\n    convert_timezone('UTC', {{ dbt_utils.current_timestamp() }})::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.current_timestamp", "macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.0246122, "supported_languages": null}, "macro.dbt_utils.postgres__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.postgres__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "postgres__current_timestamp_in_utc", "macro_sql": "{% macro postgres__current_timestamp_in_utc() %}\n    (current_timestamp at time zone 'utc')::{{ type_timestamp() }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.0246122, "supported_languages": null}, "macro.dbt_utils.redshift__current_timestamp_in_utc": {"unique_id": "macro.dbt_utils.redshift__current_timestamp_in_utc", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\current_timestamp.sql", "original_file_path": "macros\\cross_db_utils\\current_timestamp.sql", "name": "redshift__current_timestamp_in_utc", "macro_sql": "{% macro redshift__current_timestamp_in_utc() %}\n    {{ return(dbt_utils.default__current_timestamp_in_utc()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__current_timestamp_in_utc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.026116, "supported_languages": null}, "macro.dbt_utils.any_value": {"unique_id": "macro.dbt_utils.any_value", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\any_value.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\any_value.sql", "name": "any_value", "macro_sql": "{% macro any_value(expression) -%}\n    {{ return(adapter.dispatch('any_value', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.0271196, "supported_languages": null}, "macro.dbt_utils.default__any_value": {"unique_id": "macro.dbt_utils.default__any_value", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\any_value.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\any_value.sql", "name": "default__any_value", "macro_sql": "{% macro default__any_value(expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('any_value', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('any_value', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.any_value", "macro.dbt.default__any_value"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.0281188, "supported_languages": null}, "macro.dbt_utils.bool_or": {"unique_id": "macro.dbt_utils.bool_or", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\bool_or.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\bool_or.sql", "name": "bool_or", "macro_sql": "{% macro bool_or(expression) -%}\n    {{ return(adapter.dispatch('bool_or', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.0321283, "supported_languages": null}, "macro.dbt_utils.default__bool_or": {"unique_id": "macro.dbt_utils.default__bool_or", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\bool_or.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\bool_or.sql", "name": "default__bool_or", "macro_sql": "{% macro default__bool_or(expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('bool_or', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('bool_or', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.bool_or", "macro.dbt_snowflake.snowflake__bool_or"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.0341291, "supported_languages": null}, "macro.dbt_utils.cast_bool_to_text": {"unique_id": "macro.dbt_utils.cast_bool_to_text", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\cast_bool_to_text.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\cast_bool_to_text.sql", "name": "cast_bool_to_text", "macro_sql": "{% macro cast_bool_to_text(field) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt_utils') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.036131, "supported_languages": null}, "macro.dbt_utils.default__cast_bool_to_text": {"unique_id": "macro.dbt_utils.default__cast_bool_to_text", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\cast_bool_to_text.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\cast_bool_to_text.sql", "name": "default__cast_bool_to_text", "macro_sql": "{% macro default__cast_bool_to_text(field) %}\n  {% do dbt_utils.xdb_deprecation_warning('cast_bool_to_text', model.package_name, model.name) %}\n  {{ adapter.dispatch('cast_bool_to_text', 'dbt') (field) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.cast_bool_to_text", "macro.dbt.default__cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.0401275, "supported_languages": null}, "macro.dbt_utils.concat": {"unique_id": "macro.dbt_utils.concat", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\concat.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\concat.sql", "name": "concat", "macro_sql": "{% macro concat(fields) -%}\n  {{ return(adapter.dispatch('concat', 'dbt_utils')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.0436335, "supported_languages": null}, "macro.dbt_utils.default__concat": {"unique_id": "macro.dbt_utils.default__concat", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\concat.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\concat.sql", "name": "default__concat", "macro_sql": "{% macro default__concat(fields) -%}\n  {% do dbt_utils.xdb_deprecation_warning('concat', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('concat', 'dbt')(fields)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.concat", "macro.dbt.default__concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.045644, "supported_languages": null}, "macro.dbt_utils.type_string": {"unique_id": "macro.dbt_utils.type_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "name": "type_string", "macro_sql": "\n\n{%- macro type_string() -%}\n    {{ return(adapter.dispatch('type_string', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.050644, "supported_languages": null}, "macro.dbt_utils.default__type_string": {"unique_id": "macro.dbt_utils.default__type_string", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "name": "default__type_string", "macro_sql": "{% macro default__type_string() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_string', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_string', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_string", "macro.dbt.default__type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.051645, "supported_languages": null}, "macro.dbt_utils.type_timestamp": {"unique_id": "macro.dbt_utils.type_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "name": "type_timestamp", "macro_sql": "\n\n{%- macro type_timestamp() -%}\n    {{ return(adapter.dispatch('type_timestamp', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.0526443, "supported_languages": null}, "macro.dbt_utils.default__type_timestamp": {"unique_id": "macro.dbt_utils.default__type_timestamp", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "name": "default__type_timestamp", "macro_sql": "{% macro default__type_timestamp() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_timestamp', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_timestamp', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_timestamp", "macro.dbt.default__type_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.0546434, "supported_languages": null}, "macro.dbt_utils.type_float": {"unique_id": "macro.dbt_utils.type_float", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "name": "type_float", "macro_sql": "\n\n{%- macro type_float() -%}\n    {{ return(adapter.dispatch('type_float', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.0556436, "supported_languages": null}, "macro.dbt_utils.default__type_float": {"unique_id": "macro.dbt_utils.default__type_float", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "name": "default__type_float", "macro_sql": "{% macro default__type_float() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_float', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_float', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_float", "macro.dbt.default__type_float"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.056646, "supported_languages": null}, "macro.dbt_utils.type_numeric": {"unique_id": "macro.dbt_utils.type_numeric", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "name": "type_numeric", "macro_sql": "\n\n{%- macro type_numeric() -%}\n    {{ return(adapter.dispatch('type_numeric', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.065679, "supported_languages": null}, "macro.dbt_utils.default__type_numeric": {"unique_id": "macro.dbt_utils.default__type_numeric", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "name": "default__type_numeric", "macro_sql": "{% macro default__type_numeric() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_numeric', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_numeric', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_numeric", "macro.dbt.default__type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.0671935, "supported_languages": null}, "macro.dbt_utils.type_bigint": {"unique_id": "macro.dbt_utils.type_bigint", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "name": "type_bigint", "macro_sql": "\n\n{%- macro type_bigint() -%}\n    {{ return(adapter.dispatch('type_bigint', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.0681934, "supported_languages": null}, "macro.dbt_utils.default__type_bigint": {"unique_id": "macro.dbt_utils.default__type_bigint", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "name": "default__type_bigint", "macro_sql": "{% macro default__type_bigint() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_bigint', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_bigint', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_bigint", "macro.dbt.default__type_bigint"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.0701942, "supported_languages": null}, "macro.dbt_utils.type_int": {"unique_id": "macro.dbt_utils.type_int", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "name": "type_int", "macro_sql": "\n\n{%- macro type_int() -%}\n    {{ return(adapter.dispatch('type_int', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.071194, "supported_languages": null}, "macro.dbt_utils.default__type_int": {"unique_id": "macro.dbt_utils.default__type_int", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\datatypes.sql", "name": "default__type_int", "macro_sql": "{% macro default__type_int() %}\n    {% do dbt_utils.xdb_deprecation_warning('type_int', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('type_int', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.type_int", "macro.dbt.default__type_int"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.073194, "supported_languages": null}, "macro.dbt_utils.dateadd": {"unique_id": "macro.dbt_utils.dateadd", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\dateadd.sql", "name": "dateadd", "macro_sql": "{% macro dateadd(datepart, interval, from_date_or_timestamp) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt_utils')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.076697, "supported_languages": null}, "macro.dbt_utils.default__dateadd": {"unique_id": "macro.dbt_utils.default__dateadd", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\dateadd.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\dateadd.sql", "name": "default__dateadd", "macro_sql": "{% macro default__dateadd(datepart, interval, from_date_or_timestamp) %}\n  {% do dbt_utils.xdb_deprecation_warning('dateadd', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('dateadd', 'dbt')(datepart, interval, from_date_or_timestamp)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.dateadd", "macro.dbt.default__dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.0787075, "supported_languages": null}, "macro.dbt_utils.datediff": {"unique_id": "macro.dbt_utils.datediff", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\datediff.sql", "name": "datediff", "macro_sql": "{% macro datediff(first_date, second_date, datepart) %}\n  {{ return(adapter.dispatch('datediff', 'dbt_utils')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.0817075, "supported_languages": null}, "macro.dbt_utils.default__datediff": {"unique_id": "macro.dbt_utils.default__datediff", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\datediff.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\datediff.sql", "name": "default__datediff", "macro_sql": "{% macro default__datediff(first_date, second_date, datepart) %}\n  {% do dbt_utils.xdb_deprecation_warning('datediff', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('datediff', 'dbt')(first_date, second_date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.datediff", "macro.dbt.default__datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.0837069, "supported_languages": null}, "macro.dbt_utils.date_trunc": {"unique_id": "macro.dbt_utils.date_trunc", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\date_trunc.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\date_trunc.sql", "name": "date_trunc", "macro_sql": "{% macro date_trunc(datepart, date) -%}\n  {{ return(adapter.dispatch('date_trunc', 'dbt_utils') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.0857089, "supported_languages": null}, "macro.dbt_utils.default__date_trunc": {"unique_id": "macro.dbt_utils.default__date_trunc", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\date_trunc.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\date_trunc.sql", "name": "default__date_trunc", "macro_sql": "{% macro default__date_trunc(datepart, date) -%}\n  {% do dbt_utils.xdb_deprecation_warning('date_trunc', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('date_trunc', 'dbt') (datepart, date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.date_trunc", "macro.dbt.default__date_trunc"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.0877073, "supported_languages": null}, "macro.dbt_utils.escape_single_quotes": {"unique_id": "macro.dbt_utils.escape_single_quotes", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\escape_single_quotes.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\escape_single_quotes.sql", "name": "escape_single_quotes", "macro_sql": "{% macro escape_single_quotes(expression) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.0897083, "supported_languages": null}, "macro.dbt_utils.default__escape_single_quotes": {"unique_id": "macro.dbt_utils.default__escape_single_quotes", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\escape_single_quotes.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\escape_single_quotes.sql", "name": "default__escape_single_quotes", "macro_sql": "{% macro default__escape_single_quotes(expression) %}\n      {% do dbt_utils.xdb_deprecation_warning('escape_single_quotes', model.package_name, model.name) %}\n      {{ return(adapter.dispatch('escape_single_quotes', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.escape_single_quotes", "macro.dbt_snowflake.snowflake__escape_single_quotes"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.091708, "supported_languages": null}, "macro.dbt_utils.except": {"unique_id": "macro.dbt_utils.except", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\except.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\except.sql", "name": "except", "macro_sql": "{% macro except() %}\n  {{ return(adapter.dispatch('except', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.100227, "supported_languages": null}, "macro.dbt_utils.default__except": {"unique_id": "macro.dbt_utils.default__except", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\except.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\except.sql", "name": "default__except", "macro_sql": "{% macro default__except() %}\n  {% do dbt_utils.xdb_deprecation_warning('except', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('except', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.except", "macro.dbt.default__except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.101227, "supported_languages": null}, "macro.dbt_utils.hash": {"unique_id": "macro.dbt_utils.hash", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\hash.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\hash.sql", "name": "hash", "macro_sql": "{% macro hash(field) -%}\n  {{ return(adapter.dispatch('hash', 'dbt_utils') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.103227, "supported_languages": null}, "macro.dbt_utils.default__hash": {"unique_id": "macro.dbt_utils.default__hash", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\hash.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\hash.sql", "name": "default__hash", "macro_sql": "{% macro default__hash(field) -%}\n  {% do dbt_utils.xdb_deprecation_warning('hash', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('hash', 'dbt') (field)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.hash", "macro.dbt.default__hash"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.1042264, "supported_languages": null}, "macro.dbt_utils.identifier": {"unique_id": "macro.dbt_utils.identifier", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\identifier.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\identifier.sql", "name": "identifier", "macro_sql": "{% macro identifier(value) %}\t\n  {%- set error_message = '\n    Warning: the `identifier` macro is no longer supported and will be deprecated in a future release of dbt-utils. \\\n    Use `adapter.quote` instead. The {}.{} model triggered this warning. \\\n    '.format(model.package_name, model.name) -%}\n  {%- do exceptions.warn(error_message) -%}\n  {{ return(adapter.dispatch('identifier', 'dbt_utils') (value)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__identifier"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.1062267, "supported_languages": null}, "macro.dbt_utils.default__identifier": {"unique_id": "macro.dbt_utils.default__identifier", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\identifier.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\identifier.sql", "name": "default__identifier", "macro_sql": "{% macro default__identifier(value) -%}\t\n    \"{{ value }}\"\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.1062267, "supported_languages": null}, "macro.dbt_utils.bigquery__identifier": {"unique_id": "macro.dbt_utils.bigquery__identifier", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\identifier.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\identifier.sql", "name": "bigquery__identifier", "macro_sql": "{% macro bigquery__identifier(value) -%}\t\n    `{{ value }}`\t\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.1072268, "supported_languages": null}, "macro.dbt_utils.intersect": {"unique_id": "macro.dbt_utils.intersect", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\intersect.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\intersect.sql", "name": "intersect", "macro_sql": "{% macro intersect() %}\n  {{ return(adapter.dispatch('intersect', 'dbt_utils')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.1082275, "supported_languages": null}, "macro.dbt_utils.default__intersect": {"unique_id": "macro.dbt_utils.default__intersect", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\intersect.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\intersect.sql", "name": "default__intersect", "macro_sql": "{% macro default__intersect() %}\n  {% do dbt_utils.xdb_deprecation_warning('intersect', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('intersect', 'dbt')()) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.intersect", "macro.dbt.default__intersect"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.1097322, "supported_languages": null}, "macro.dbt_utils.last_day": {"unique_id": "macro.dbt_utils.last_day", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\last_day.sql", "name": "last_day", "macro_sql": "{% macro last_day(date, datepart) %}\n  {{ return(adapter.dispatch('last_day', 'dbt_utils') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.112745, "supported_languages": null}, "macro.dbt_utils.default__last_day": {"unique_id": "macro.dbt_utils.default__last_day", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\last_day.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\last_day.sql", "name": "default__last_day", "macro_sql": "{% macro default__last_day(date, datepart) %}\n  {% do dbt_utils.xdb_deprecation_warning('last_day', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('last_day', 'dbt') (date, datepart)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.last_day", "macro.dbt.default__last_day"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.1147447, "supported_languages": null}, "macro.dbt_utils.length": {"unique_id": "macro.dbt_utils.length", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\length.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\length.sql", "name": "length", "macro_sql": "{% macro length(expression) -%}\n    {{ return(adapter.dispatch('length', 'dbt_utils') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.1167505, "supported_languages": null}, "macro.dbt_utils.default__length": {"unique_id": "macro.dbt_utils.default__length", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\length.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\length.sql", "name": "default__length", "macro_sql": "{% macro default__length(expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('length', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('length', 'dbt') (expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.length", "macro.dbt.default__length"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.11875, "supported_languages": null}, "macro.dbt_utils.listagg": {"unique_id": "macro.dbt_utils.listagg", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\listagg.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\listagg.sql", "name": "listagg", "macro_sql": "{% macro listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {{ return(adapter.dispatch('listagg', 'dbt_utils') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.1217542, "supported_languages": null}, "macro.dbt_utils.default__listagg": {"unique_id": "macro.dbt_utils.default__listagg", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\listagg.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\listagg.sql", "name": "default__listagg", "macro_sql": "{% macro default__listagg(measure, delimiter_text=\"','\", order_by_clause=none, limit_num=none) -%}\n    {% do dbt_utils.xdb_deprecation_warning('listagg', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('listagg', 'dbt') (measure, delimiter_text, order_by_clause, limit_num)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.listagg", "macro.dbt.default__listagg"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.122753, "supported_languages": null}, "macro.dbt_utils.string_literal": {"unique_id": "macro.dbt_utils.string_literal", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\literal.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\literal.sql", "name": "string_literal", "macro_sql": "{%- macro string_literal(value) -%}\n  {{ return(adapter.dispatch('string_literal', 'dbt_utils') (value)) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.123752, "supported_languages": null}, "macro.dbt_utils.default__string_literal": {"unique_id": "macro.dbt_utils.default__string_literal", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\literal.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\literal.sql", "name": "default__string_literal", "macro_sql": "{%- macro default__string_literal(value) -%}\n  {% do dbt_utils.xdb_deprecation_warning('string_literal', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('string_literal', 'dbt') (value)) }}\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.string_literal", "macro.dbt.default__string_literal"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.1247532, "supported_languages": null}, "macro.dbt_utils.position": {"unique_id": "macro.dbt_utils.position", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\position.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\position.sql", "name": "position", "macro_sql": "{% macro position(substring_text, string_text) -%}\n    {{ return(adapter.dispatch('position', 'dbt_utils') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.1392798, "supported_languages": null}, "macro.dbt_utils.default__position": {"unique_id": "macro.dbt_utils.default__position", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\position.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\position.sql", "name": "default__position", "macro_sql": "{% macro default__position(substring_text, string_text) -%}\n    {% do dbt_utils.xdb_deprecation_warning('position', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('position', 'dbt') (substring_text, string_text)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.position", "macro.dbt.default__position"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.1412778, "supported_languages": null}, "macro.dbt_utils.replace": {"unique_id": "macro.dbt_utils.replace", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\replace.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\replace.sql", "name": "replace", "macro_sql": "{% macro replace(field, old_chars, new_chars) -%}\n    {{ return(adapter.dispatch('replace', 'dbt_utils') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.1437883, "supported_languages": null}, "macro.dbt_utils.default__replace": {"unique_id": "macro.dbt_utils.default__replace", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\replace.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\replace.sql", "name": "default__replace", "macro_sql": "{% macro default__replace(field, old_chars, new_chars) -%}\n  {% do dbt_utils.xdb_deprecation_warning('replace', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('replace', 'dbt') (field, old_chars, new_chars)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.replace", "macro.dbt.default__replace"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.1457932, "supported_languages": null}, "macro.dbt_utils.right": {"unique_id": "macro.dbt_utils.right", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\right.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\right.sql", "name": "right", "macro_sql": "{% macro right(string_text, length_expression) -%}\n    {{ return(adapter.dispatch('right', 'dbt_utils') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.1467931, "supported_languages": null}, "macro.dbt_utils.default__right": {"unique_id": "macro.dbt_utils.default__right", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\right.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\right.sql", "name": "default__right", "macro_sql": "{% macro default__right(string_text, length_expression) -%}\n    {% do dbt_utils.xdb_deprecation_warning('right', model.package_name, model.name) %}\n    {{ return(adapter.dispatch('right', 'dbt') (string_text, length_expression)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.right", "macro.dbt_snowflake.snowflake__right"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.1487923, "supported_languages": null}, "macro.dbt_utils.safe_cast": {"unique_id": "macro.dbt_utils.safe_cast", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\safe_cast.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\safe_cast.sql", "name": "safe_cast", "macro_sql": "{% macro safe_cast(field, type) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt_utils') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.149793, "supported_languages": null}, "macro.dbt_utils.default__safe_cast": {"unique_id": "macro.dbt_utils.default__safe_cast", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\safe_cast.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\safe_cast.sql", "name": "default__safe_cast", "macro_sql": "{% macro default__safe_cast(field, type) %}\n  {% do dbt_utils.xdb_deprecation_warning('safe_cast', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('safe_cast', 'dbt') (field, type)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.safe_cast", "macro.dbt_snowflake.snowflake__safe_cast"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.1507924, "supported_languages": null}, "macro.dbt_utils.split_part": {"unique_id": "macro.dbt_utils.split_part", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\split_part.sql", "name": "split_part", "macro_sql": "{% macro split_part(string_text, delimiter_text, part_number) %}\n  {{ return(adapter.dispatch('split_part', 'dbt_utils') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.1527932, "supported_languages": null}, "macro.dbt_utils.default__split_part": {"unique_id": "macro.dbt_utils.default__split_part", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\split_part.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\split_part.sql", "name": "default__split_part", "macro_sql": "{% macro default__split_part(string_text, delimiter_text, part_number) %}\n  {% do dbt_utils.xdb_deprecation_warning('split_part', model.package_name, model.name) %}\n  {{ return(adapter.dispatch('split_part', 'dbt') (string_text, delimiter_text, part_number)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.xdb_deprecation_warning", "macro.dbt_utils.split_part", "macro.dbt.default__split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.153793, "supported_languages": null}, "macro.dbt_utils.xdb_deprecation_warning": {"unique_id": "macro.dbt_utils.xdb_deprecation_warning", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\xdb_deprecation_warning.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\xdb_deprecation_warning.sql", "name": "xdb_deprecation_warning", "macro_sql": "{% macro xdb_deprecation_warning(macro, package, model) %}\n    {% if execute %}\n        {%- set error_message = \"Warning: the `\" ~ macro ~\"` macro is now provided in dbt Core. It is no longer available in dbt_utils and backwards compatibility will be removed in a future version of the package. Use `\" ~ macro ~ \"` (no prefix) instead. The \" ~ package ~ \".\" ~ model ~ \" model triggered this warning.\" -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.155793, "supported_languages": null}, "macro.dbt_utils.xdb_deprecation_warning_without_replacement": {"unique_id": "macro.dbt_utils.xdb_deprecation_warning_without_replacement", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\cross_db_utils\\deprecated\\xdb_deprecation_warning.sql", "original_file_path": "macros\\cross_db_utils\\deprecated\\xdb_deprecation_warning.sql", "name": "xdb_deprecation_warning_without_replacement", "macro_sql": "{% macro xdb_deprecation_warning_without_replacement(macro, package, model) %}\n    {% if execute %}\n        {%- set error_message = \"Warning: the `\" ~ macro ~\"` macro is deprecated and will be removed in a future version of the package, once equivalent functionality is implemented in dbt Core. The \" ~ package ~ \".\" ~ model ~ \" model triggered this warning.\" -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.1567926, "supported_languages": null}, "macro.dbt_utils.test_accepted_range": {"unique_id": "macro.dbt_utils.test_accepted_range", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\accepted_range.sql", "original_file_path": "macros\\generic_tests\\accepted_range.sql", "name": "test_accepted_range", "macro_sql": "{% test accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n  {{ return(adapter.dispatch('test_accepted_range', 'dbt_utils')(model, column_name, min_value, max_value, inclusive)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_accepted_range"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.1663024, "supported_languages": null}, "macro.dbt_utils.default__test_accepted_range": {"unique_id": "macro.dbt_utils.default__test_accepted_range", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\accepted_range.sql", "original_file_path": "macros\\generic_tests\\accepted_range.sql", "name": "default__test_accepted_range", "macro_sql": "{% macro default__test_accepted_range(model, column_name, min_value=none, max_value=none, inclusive=true) %}\n\nwith meet_condition as(\n  select *\n  from {{ model }}\n),\n\nvalidation_errors as (\n  select *\n  from meet_condition\n  where\n    -- never true, defaults to an empty result set. Exists to ensure any combo of the `or` clauses below succeeds\n    1 = 2\n\n  {%- if min_value is not none %}\n    -- records with a value >= min_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} > {{- \"=\" if inclusive }} {{ min_value }}\n  {%- endif %}\n\n  {%- if max_value is not none %}\n    -- records with a value <= max_value are permitted. The `not` flips this to find records that don't meet the rule.\n    or not {{ column_name }} < {{- \"=\" if inclusive }} {{ max_value }}\n  {%- endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.1683056, "supported_languages": null}, "macro.dbt_utils.test_at_least_one": {"unique_id": "macro.dbt_utils.test_at_least_one", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\at_least_one.sql", "original_file_path": "macros\\generic_tests\\at_least_one.sql", "name": "test_at_least_one", "macro_sql": "{% test at_least_one(model, column_name) %}\n  {{ return(adapter.dispatch('test_at_least_one', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_at_least_one"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.1703064, "supported_languages": null}, "macro.dbt_utils.default__test_at_least_one": {"unique_id": "macro.dbt_utils.default__test_at_least_one", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\at_least_one.sql", "original_file_path": "macros\\generic_tests\\at_least_one.sql", "name": "default__test_at_least_one", "macro_sql": "{% macro default__test_at_least_one(model, column_name) %}\n\nselect *\nfrom (\n    select\n        {# In TSQL, subquery aggregate columns need aliases #}\n        {# thus: a filler col name, 'filler_column' #}\n      count({{ column_name }}) as filler_column\n\n    from {{ model }}\n\n    having count({{ column_name }}) = 0\n\n) validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.1703064, "supported_languages": null}, "macro.dbt_utils.test_cardinality_equality": {"unique_id": "macro.dbt_utils.test_cardinality_equality", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\cardinality_equality.sql", "original_file_path": "macros\\generic_tests\\cardinality_equality.sql", "name": "test_cardinality_equality", "macro_sql": "{% test cardinality_equality(model, column_name, to, field) %}\n    {{ return(adapter.dispatch('test_cardinality_equality', 'dbt_utils')(model, column_name, to, field)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_cardinality_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.1723065, "supported_languages": null}, "macro.dbt_utils.default__test_cardinality_equality": {"unique_id": "macro.dbt_utils.default__test_cardinality_equality", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\cardinality_equality.sql", "original_file_path": "macros\\generic_tests\\cardinality_equality.sql", "name": "default__test_cardinality_equality", "macro_sql": "{% macro default__test_cardinality_equality(model, column_name, to, field) %}\n\n{# T-SQL does not let you use numbers as aliases for columns #}\n{# Thus, no \"GROUP BY 1\" #}\n\nwith table_a as (\nselect\n  {{ column_name }},\n  count(*) as num_rows\nfrom {{ model }}\ngroup by {{ column_name }}\n),\n\ntable_b as (\nselect\n  {{ field }},\n  count(*) as num_rows\nfrom {{ to }}\ngroup by {{ field }}\n),\n\nexcept_a as (\n  select *\n  from table_a\n  {{ except() }}\n  select *\n  from table_b\n),\n\nexcept_b as (\n  select *\n  from table_b\n  {{ except() }}\n  select *\n  from table_a\n),\n\nunioned as (\n  select *\n  from except_a\n  union all\n  select *\n  from except_b\n)\n\nselect *\nfrom unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.2263699, "supported_languages": null}, "macro.dbt_utils.test_equality": {"unique_id": "macro.dbt_utils.test_equality", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\equality.sql", "original_file_path": "macros\\generic_tests\\equality.sql", "name": "test_equality", "macro_sql": "{% test equality(model, compare_model, compare_columns=None) %}\n  {{ return(adapter.dispatch('test_equality', 'dbt_utils')(model, compare_model, compare_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equality"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.2303874, "supported_languages": null}, "macro.dbt_utils.default__test_equality": {"unique_id": "macro.dbt_utils.default__test_equality", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\equality.sql", "original_file_path": "macros\\generic_tests\\equality.sql", "name": "default__test_equality", "macro_sql": "{% macro default__test_equality(model, compare_model, compare_columns=None) %}\n\n{% set set_diff %}\n    count(*) + coalesce(abs(\n        sum(case when which_diff = 'a_minus_b' then 1 else 0 end) -\n        sum(case when which_diff = 'b_minus_a' then 1 else 0 end)\n    ), 0)\n{% endset %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = set_diff) }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\n-- setup\n{%- do dbt_utils._is_relation(model, 'test_equality') -%}\n\n{#-\nIf the compare_cols arg is provided, we can run this test without querying the\ninformation schema\u00a0\u2014 this allows the model to be an ephemeral model\n-#}\n\n{%- if not compare_columns -%}\n    {%- do dbt_utils._is_ephemeral(model, 'test_equality') -%}\n    {%- set compare_columns = adapter.get_columns_in_relation(model) | map(attribute='quoted') -%}\n{%- endif -%}\n\n{% set compare_cols_csv = compare_columns | join(', ') %}\n\nwith a as (\n\n    select * from {{ model }}\n\n),\n\nb as (\n\n    select * from {{ compare_model }}\n\n),\n\na_minus_b as (\n\n    select {{compare_cols_csv}} from a\n    {{ except() }}\n    select {{compare_cols_csv}} from b\n\n),\n\nb_minus_a as (\n\n    select {{compare_cols_csv}} from b\n    {{ except() }}\n    select {{compare_cols_csv}} from a\n\n),\n\nunioned as (\n\n    select 'a_minus_b' as which_diff, a_minus_b.* from a_minus_b\n    union all\n    select 'b_minus_a' as which_diff, b_minus_a.* from b_minus_a\n\n)\n\nselect * from unioned\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.except"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.233388, "supported_languages": null}, "macro.dbt_utils.test_equal_rowcount": {"unique_id": "macro.dbt_utils.test_equal_rowcount", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\equal_rowcount.sql", "original_file_path": "macros\\generic_tests\\equal_rowcount.sql", "name": "test_equal_rowcount", "macro_sql": "{% test equal_rowcount(model, compare_model) %}\n  {{ return(adapter.dispatch('test_equal_rowcount', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_equal_rowcount"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.235387, "supported_languages": null}, "macro.dbt_utils.default__test_equal_rowcount": {"unique_id": "macro.dbt_utils.default__test_equal_rowcount", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\equal_rowcount.sql", "original_file_path": "macros\\generic_tests\\equal_rowcount.sql", "name": "default__test_equal_rowcount", "macro_sql": "{% macro default__test_equal_rowcount(model, compare_model) %}\n\n{#-- Needs to be set at parse time, before we return '' below --#}\n{{ config(fail_calc = 'coalesce(diff_count, 0)') }}\n\n{#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n{%- if not execute -%}\n    {{ return('') }}\n{% endif %}\n\nwith a as (\n\n    select count(*) as count_a from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_b from {{ compare_model }}\n\n),\nfinal as (\n\n    select\n        count_a,\n        count_b,\n        abs(count_a - count_b) as diff_count\n    from a\n    cross join b\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.2363873, "supported_languages": null}, "macro.dbt_utils.test_expression_is_true": {"unique_id": "macro.dbt_utils.test_expression_is_true", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\expression_is_true.sql", "original_file_path": "macros\\generic_tests\\expression_is_true.sql", "name": "test_expression_is_true", "macro_sql": "{% test expression_is_true(model, expression, column_name=None, condition='1=1') %}\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n  {{ return(adapter.dispatch('test_expression_is_true', 'dbt_utils')(model, expression, column_name, condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_expression_is_true"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.2383862, "supported_languages": null}, "macro.dbt_utils.default__test_expression_is_true": {"unique_id": "macro.dbt_utils.default__test_expression_is_true", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\expression_is_true.sql", "original_file_path": "macros\\generic_tests\\expression_is_true.sql", "name": "default__test_expression_is_true", "macro_sql": "{% macro default__test_expression_is_true(model, expression, column_name, condition) %}\n\nwith meet_condition as (\n    select * from {{ model }} where {{ condition }}\n)\n\nselect\n    *\nfrom meet_condition\n{% if column_name is none %}\nwhere not({{ expression }})\n{%- else %}\nwhere not({{ column_name }} {{ expression }})\n{%- endif %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.2393928, "supported_languages": null}, "macro.dbt_utils.test_fewer_rows_than": {"unique_id": "macro.dbt_utils.test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\fewer_rows_than.sql", "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql", "name": "test_fewer_rows_than", "macro_sql": "{% test fewer_rows_than(model, compare_model) %}\n  {{ return(adapter.dispatch('test_fewer_rows_than', 'dbt_utils')(model, compare_model)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_fewer_rows_than"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.2413874, "supported_languages": null}, "macro.dbt_utils.default__test_fewer_rows_than": {"unique_id": "macro.dbt_utils.default__test_fewer_rows_than", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\fewer_rows_than.sql", "original_file_path": "macros\\generic_tests\\fewer_rows_than.sql", "name": "default__test_fewer_rows_than", "macro_sql": "{% macro default__test_fewer_rows_than(model, compare_model) %}\n\n{{ config(fail_calc = 'coalesce(row_count_delta, 0)') }}\n\nwith a as (\n\n    select count(*) as count_our_model from {{ model }}\n\n),\nb as (\n\n    select count(*) as count_comparison_model from {{ compare_model }}\n\n),\ncounts as (\n\n    select\n        count_our_model,\n        count_comparison_model\n    from a\n    cross join b\n\n),\nfinal as (\n\n    select *,\n        case\n            -- fail the test if we have more rows than the reference model and return the row count delta\n            when count_our_model > count_comparison_model then (count_our_model - count_comparison_model)\n            -- fail the test if they are the same number\n            when count_our_model = count_comparison_model then 1\n            -- pass the test if the delta is positive (i.e. return the number 0)\n            else 0\n    end as row_count_delta\n    from counts\n\n)\n\nselect * from final\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.2413874, "supported_languages": null}, "macro.dbt_utils.test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "name": "test_mutually_exclusive_ranges", "macro_sql": "{% test mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n  {{ return(adapter.dispatch('test_mutually_exclusive_ranges', 'dbt_utils')(model, lower_bound_column, upper_bound_column, partition_by, gaps, zero_length_range_allowed)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_mutually_exclusive_ranges"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.2509334, "supported_languages": null}, "macro.dbt_utils.default__test_mutually_exclusive_ranges": {"unique_id": "macro.dbt_utils.default__test_mutually_exclusive_ranges", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "original_file_path": "macros\\generic_tests\\mutually_exclusive_ranges.sql", "name": "default__test_mutually_exclusive_ranges", "macro_sql": "{% macro default__test_mutually_exclusive_ranges(model, lower_bound_column, upper_bound_column, partition_by=None, gaps='allowed', zero_length_range_allowed=False) %}\n{% if gaps == 'not_allowed' %}\n    {% set allow_gaps_operator='=' %}\n    {% set allow_gaps_operator_in_words='equal_to' %}\n{% elif gaps == 'allowed' %}\n    {% set allow_gaps_operator='<=' %}\n    {% set allow_gaps_operator_in_words='less_than_or_equal_to' %}\n{% elif gaps == 'required' %}\n    {% set allow_gaps_operator='<' %}\n    {% set allow_gaps_operator_in_words='less_than' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`gaps` argument for mutually_exclusive_ranges test must be one of ['not_allowed', 'allowed', 'required'] Got: '\" ~ gaps ~\"'.'\"\n    ) }}\n{% endif %}\n{% if not zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<' %}\n    {% set allow_zero_length_operator_in_words='less_than' %}\n{% elif zero_length_range_allowed %}\n    {% set allow_zero_length_operator='<=' %}\n    {% set allow_zero_length_operator_in_words='less_than_or_equal_to' %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`zero_length_range_allowed` argument for mutually_exclusive_ranges test must be one of [true, false] Got: '\" ~ zero_length_range_allowed ~\"'.'\"\n    ) }}\n{% endif %}\n\n{% set partition_clause=\"partition by \" ~ partition_by if partition_by else '' %}\n\nwith window_functions as (\n\n    select\n        {% if partition_by %}\n        {{ partition_by }} as partition_by_col,\n        {% endif %}\n        {{ lower_bound_column }} as lower_bound,\n        {{ upper_bound_column }} as upper_bound,\n\n        lead({{ lower_bound_column }}) over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }}, {{ upper_bound_column }}\n        ) as next_lower_bound,\n\n        row_number() over (\n            {{ partition_clause }}\n            order by {{ lower_bound_column }} desc, {{ upper_bound_column }} desc\n        ) = 1 as is_last_record\n\n    from {{ model }}\n\n),\n\ncalc as (\n    -- We want to return records where one of our assumptions fails, so we'll use\n    -- the `not` function with `and` statements so we can write our assumptions nore cleanly\n    select\n        *,\n\n        -- For each record: lower_bound should be < upper_bound.\n        -- Coalesce it to return an error on the null case (implicit assumption\n        -- these columns are not_null)\n        coalesce(\n            lower_bound {{ allow_zero_length_operator }} upper_bound,\n            false\n        ) as lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound,\n\n        -- For each record: upper_bound {{ allow_gaps_operator }} the next lower_bound.\n        -- Coalesce it to handle null cases for the last record.\n        coalesce(\n            upper_bound {{ allow_gaps_operator }} next_lower_bound,\n            is_last_record,\n            false\n        ) as upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n\n    from window_functions\n\n),\n\nvalidation_errors as (\n\n    select\n        *\n    from calc\n\n    where not(\n        -- THE FOLLOWING SHOULD BE TRUE --\n        lower_bound_{{ allow_zero_length_operator_in_words }}_upper_bound\n        and upper_bound_{{ allow_gaps_operator_in_words }}_next_lower_bound\n    )\n)\n\nselect * from validation_errors\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.2559266, "supported_languages": null}, "macro.dbt_utils.test_not_accepted_values": {"unique_id": "macro.dbt_utils.test_not_accepted_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_accepted_values.sql", "original_file_path": "macros\\generic_tests\\not_accepted_values.sql", "name": "test_not_accepted_values", "macro_sql": "{% test not_accepted_values(model, column_name, values, quote=True) %}\n  {{ return(adapter.dispatch('test_not_accepted_values', 'dbt_utils')(model, column_name, values, quote)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_accepted_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.2589283, "supported_languages": null}, "macro.dbt_utils.default__test_not_accepted_values": {"unique_id": "macro.dbt_utils.default__test_not_accepted_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_accepted_values.sql", "original_file_path": "macros\\generic_tests\\not_accepted_values.sql", "name": "default__test_not_accepted_values", "macro_sql": "{% macro default__test_not_accepted_values(model, column_name, values, quote=True) %}\nwith all_values as (\n\n    select distinct\n        {{ column_name }} as value_field\n\n    from {{ model }}\n\n),\n\nvalidation_errors as (\n\n    select\n        value_field\n\n    from all_values\n    where value_field in (\n        {% for value in values -%}\n            {% if quote -%}\n            '{{ value }}'\n            {%- else -%}\n            {{ value }}\n            {%- endif -%}\n            {%- if not loop.last -%},{%- endif %}\n        {%- endfor %}\n        )\n\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.2604315, "supported_languages": null}, "macro.dbt_utils.test_not_constant": {"unique_id": "macro.dbt_utils.test_not_constant", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_constant.sql", "original_file_path": "macros\\generic_tests\\not_constant.sql", "name": "test_not_constant", "macro_sql": "{% test not_constant(model, column_name) %}\n  {{ return(adapter.dispatch('test_not_constant', 'dbt_utils')(model, column_name)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_constant"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.2614362, "supported_languages": null}, "macro.dbt_utils.default__test_not_constant": {"unique_id": "macro.dbt_utils.default__test_not_constant", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_constant.sql", "original_file_path": "macros\\generic_tests\\not_constant.sql", "name": "default__test_not_constant", "macro_sql": "{% macro default__test_not_constant(model, column_name) %}\n\n\nselect\n    {# In TSQL, subquery aggregate columns need aliases #}\n    {# thus: a filler col name, 'filler_column' #}\n    count(distinct {{ column_name }}) as filler_column\n\nfrom {{ model }}\n\nhaving count(distinct {{ column_name }}) = 1\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.2624357, "supported_languages": null}, "macro.dbt_utils.test_not_null_proportion": {"unique_id": "macro.dbt_utils.test_not_null_proportion", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_null_proportion.sql", "original_file_path": "macros\\generic_tests\\not_null_proportion.sql", "name": "test_not_null_proportion", "macro_sql": "{% macro test_not_null_proportion(model) %}\n  {{ return(adapter.dispatch('test_not_null_proportion', 'dbt_utils')(model, **kwargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_proportion"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.2644355, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_proportion": {"unique_id": "macro.dbt_utils.default__test_not_null_proportion", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\not_null_proportion.sql", "original_file_path": "macros\\generic_tests\\not_null_proportion.sql", "name": "default__test_not_null_proportion", "macro_sql": "{% macro default__test_not_null_proportion(model) %}\n\n{% set column_name = kwargs.get('column_name', kwargs.get('arg')) %}\n{% set at_least = kwargs.get('at_least', kwargs.get('arg')) %}\n{% set at_most = kwargs.get('at_most', kwargs.get('arg', 1)) %}\n\nwith validation as (\n  select\n    sum(case when {{ column_name }} is null then 0 else 1 end) / cast(count(*) as numeric) as not_null_proportion\n  from {{ model }}\n),\nvalidation_errors as (\n  select\n    not_null_proportion\n  from validation\n  where not_null_proportion < {{ at_least }} or not_null_proportion > {{ at_most }}\n)\nselect\n  *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.2659407, "supported_languages": null}, "macro.dbt_utils.test_recency": {"unique_id": "macro.dbt_utils.test_recency", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\recency.sql", "original_file_path": "macros\\generic_tests\\recency.sql", "name": "test_recency", "macro_sql": "{% test recency(model, field, datepart, interval) %}\n  {{ return(adapter.dispatch('test_recency', 'dbt_utils')(model, field, datepart, interval)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_recency"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.2749581, "supported_languages": null}, "macro.dbt_utils.default__test_recency": {"unique_id": "macro.dbt_utils.default__test_recency", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\recency.sql", "original_file_path": "macros\\generic_tests\\recency.sql", "name": "default__test_recency", "macro_sql": "{% macro default__test_recency(model, field, datepart, interval) %}\n\n{% set threshold = dateadd(datepart, interval * -1, current_timestamp()) %}\n\nwith recency as (\n\n    select max({{field}}) as most_recent\n    from {{ model }}\n\n)\n\nselect\n\n    most_recent,\n    {{ threshold }} as threshold\n\nfrom recency\nwhere most_recent < {{ threshold }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.2764728, "supported_languages": null}, "macro.dbt_utils.test_relationships_where": {"unique_id": "macro.dbt_utils.test_relationships_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\relationships_where.sql", "original_file_path": "macros\\generic_tests\\relationships_where.sql", "name": "test_relationships_where", "macro_sql": "{% test relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n  {{ return(adapter.dispatch('test_relationships_where', 'dbt_utils')(model, column_name, to, field, from_condition, to_condition)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_relationships_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.2785032, "supported_languages": null}, "macro.dbt_utils.default__test_relationships_where": {"unique_id": "macro.dbt_utils.default__test_relationships_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\relationships_where.sql", "original_file_path": "macros\\generic_tests\\relationships_where.sql", "name": "default__test_relationships_where", "macro_sql": "{% macro default__test_relationships_where(model, column_name, to, field, from_condition=\"1=1\", to_condition=\"1=1\") %}\n\n{# T-SQL has no boolean data type so we use 1=1 which returns TRUE #}\n{# ref https://stackoverflow.com/a/7170753/3842610 #}\n\nwith left_table as (\n\n  select\n    {{column_name}} as id\n\n  from {{model}}\n\n  where {{column_name}} is not null\n    and {{from_condition}}\n\n),\n\nright_table as (\n\n  select\n    {{field}} as id\n\n  from {{to}}\n\n  where {{field}} is not null\n    and {{to_condition}}\n\n),\n\nexceptions as (\n\n  select\n    left_table.id,\n    right_table.id as right_id\n\n  from left_table\n\n  left join right_table\n         on left_table.id = right_table.id\n\n  where right_table.id is null\n\n)\n\nselect * from exceptions\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.2805028, "supported_languages": null}, "macro.dbt_utils.test_sequential_values": {"unique_id": "macro.dbt_utils.test_sequential_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\sequential_values.sql", "original_file_path": "macros\\generic_tests\\sequential_values.sql", "name": "test_sequential_values", "macro_sql": "{% test sequential_values(model, column_name, interval=1, datepart=None) %}\n\n  {{ return(adapter.dispatch('test_sequential_values', 'dbt_utils')(model, column_name, interval, datepart)) }}\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_sequential_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.2824972, "supported_languages": null}, "macro.dbt_utils.default__test_sequential_values": {"unique_id": "macro.dbt_utils.default__test_sequential_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\sequential_values.sql", "original_file_path": "macros\\generic_tests\\sequential_values.sql", "name": "default__test_sequential_values", "macro_sql": "{% macro default__test_sequential_values(model, column_name, interval=1, datepart=None) %}\n\n{% set previous_column_name = \"previous_\" ~ dbt_utils.slugify(column_name) %}\n\nwith windowed as (\n\n    select\n        {{ column_name }},\n        lag({{ column_name }}) over (\n            order by {{ column_name }}\n        ) as {{ previous_column_name }}\n    from {{ model }}\n),\n\nvalidation_errors as (\n    select\n        *\n    from windowed\n    {% if datepart %}\n    where not(cast({{ column_name }} as {{ type_timestamp() }})= cast({{ dateadd(datepart, interval, previous_column_name) }} as {{ type_timestamp() }}))\n    {% else %}\n    where not({{ column_name }} = {{ previous_column_name }} + {{ interval }})\n    {% endif %}\n)\n\nselect *\nfrom validation_errors\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.slugify", "macro.dbt_utils.type_timestamp", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.284498, "supported_languages": null}, "macro.dbt_utils.test_not_null_where": {"unique_id": "macro.dbt_utils.test_not_null_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\test_not_null_where.sql", "original_file_path": "macros\\generic_tests\\test_not_null_where.sql", "name": "test_not_null_where", "macro_sql": "{% test not_null_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.not_null_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `not_null` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_not_null_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_not_null_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.286513, "supported_languages": null}, "macro.dbt_utils.default__test_not_null_where": {"unique_id": "macro.dbt_utils.default__test_not_null_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\test_not_null_where.sql", "original_file_path": "macros\\generic_tests\\test_not_null_where.sql", "name": "default__test_not_null_where", "macro_sql": "{% macro default__test_not_null_where(model, column_name) %}\r\n  {{ return(test_not_null(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_not_null"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.2875078, "supported_languages": null}, "macro.dbt_utils.test_unique_where": {"unique_id": "macro.dbt_utils.test_unique_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\test_unique_where.sql", "original_file_path": "macros\\generic_tests\\test_unique_where.sql", "name": "test_unique_where", "macro_sql": "{% test unique_where(model, column_name) %}\r\n  {%- set deprecation_warning = '\r\n    Warning: `dbt_utils.unique_where` is no longer supported.\r\n    Starting in dbt v0.20.0, the built-in `unique` test supports a `where` config.\r\n    ' -%}\r\n  {%- do exceptions.warn(deprecation_warning) -%}\r\n  {{ return(adapter.dispatch('test_unique_where', 'dbt_utils')(model, column_name)) }}\r\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_where"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.289511, "supported_languages": null}, "macro.dbt_utils.default__test_unique_where": {"unique_id": "macro.dbt_utils.default__test_unique_where", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\test_unique_where.sql", "original_file_path": "macros\\generic_tests\\test_unique_where.sql", "name": "default__test_unique_where", "macro_sql": "{% macro default__test_unique_where(model, column_name) %}\r\n  {{ return(test_unique(model, column_name)) }}\r\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.test_unique"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.289511, "supported_languages": null}, "macro.dbt_utils.test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql", "name": "test_unique_combination_of_columns", "macro_sql": "{% test unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n  {{ return(adapter.dispatch('test_unique_combination_of_columns', 'dbt_utils')(model, combination_of_columns, quote_columns)) }}\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__test_unique_combination_of_columns"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.2915132, "supported_languages": null}, "macro.dbt_utils.default__test_unique_combination_of_columns": {"unique_id": "macro.dbt_utils.default__test_unique_combination_of_columns", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\generic_tests\\unique_combination_of_columns.sql", "original_file_path": "macros\\generic_tests\\unique_combination_of_columns.sql", "name": "default__test_unique_combination_of_columns", "macro_sql": "{% macro default__test_unique_combination_of_columns(model, combination_of_columns, quote_columns=false) %}\n\n{% if not quote_columns %}\n    {%- set column_list=combination_of_columns %}\n{% elif quote_columns %}\n    {%- set column_list=[] %}\n        {% for column in combination_of_columns -%}\n            {% set column_list = column_list.append( adapter.quote(column) ) %}\n        {%- endfor %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\n        \"`quote_columns` argument for unique_combination_of_columns test must be one of [True, False] Got: '\" ~ quote ~\"'.'\"\n    ) }}\n{% endif %}\n\n{%- set columns_csv=column_list | join(', ') %}\n\n\nwith validation_errors as (\n\n    select\n        {{ columns_csv }}\n    from {{ model }}\n    group by {{ columns_csv }}\n    having count(*) > 1\n\n)\n\nselect *\nfrom validation_errors\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.294045, "supported_languages": null}, "macro.dbt_utils.log_info": {"unique_id": "macro.dbt_utils.log_info", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "name": "log_info", "macro_sql": "{% macro log_info(message) %}\n    {{ return(adapter.dispatch('log_info', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__log_info"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.29505, "supported_languages": null}, "macro.dbt_utils.default__log_info": {"unique_id": "macro.dbt_utils.default__log_info", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\log_info.sql", "original_file_path": "macros\\jinja_helpers\\log_info.sql", "name": "default__log_info", "macro_sql": "{% macro default__log_info(message) %}\n    {{ log(dbt_utils.pretty_log_format(message), info=True) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.296057, "supported_languages": null}, "macro.dbt_utils.pretty_log_format": {"unique_id": "macro.dbt_utils.pretty_log_format", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "name": "pretty_log_format", "macro_sql": "{% macro pretty_log_format(message) %}\n    {{ return(adapter.dispatch('pretty_log_format', 'dbt_utils')(message)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_log_format"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.29705, "supported_languages": null}, "macro.dbt_utils.default__pretty_log_format": {"unique_id": "macro.dbt_utils.default__pretty_log_format", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\pretty_log_format.sql", "original_file_path": "macros\\jinja_helpers\\pretty_log_format.sql", "name": "default__pretty_log_format", "macro_sql": "{% macro default__pretty_log_format(message) %}\n    {{ return( dbt_utils.pretty_time() ~ ' + ' ~ message) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.2980556, "supported_languages": null}, "macro.dbt_utils.pretty_time": {"unique_id": "macro.dbt_utils.pretty_time", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "name": "pretty_time", "macro_sql": "{% macro pretty_time(format='%H:%M:%S') %}\n    {{ return(adapter.dispatch('pretty_time', 'dbt_utils')(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pretty_time"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.2990506, "supported_languages": null}, "macro.dbt_utils.default__pretty_time": {"unique_id": "macro.dbt_utils.default__pretty_time", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\pretty_time.sql", "original_file_path": "macros\\jinja_helpers\\pretty_time.sql", "name": "default__pretty_time", "macro_sql": "{% macro default__pretty_time(format='%H:%M:%S') %}\n    {{ return(modules.datetime.datetime.now().strftime(format)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.3000598, "supported_languages": null}, "macro.dbt_utils.slugify": {"unique_id": "macro.dbt_utils.slugify", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\slugify.sql", "original_file_path": "macros\\jinja_helpers\\slugify.sql", "name": "slugify", "macro_sql": "{% macro slugify(string) %}\n\n{#- Lower case the string -#}\n{% set string = string | lower %}\n{#- Replace spaces and dashes with underscores -#}\n{% set string = modules.re.sub('[ -]+', '_', string) %}\n{#- Only take letters, numbers, and underscores -#}\n{% set string = modules.re.sub('[^a-z0-9_]+', '', string) %}\n\n{{ return(string) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.3020568, "supported_languages": null}, "macro.dbt_utils._is_ephemeral": {"unique_id": "macro.dbt_utils._is_ephemeral", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\_is_ephemeral.sql", "original_file_path": "macros\\jinja_helpers\\_is_ephemeral.sql", "name": "_is_ephemeral", "macro_sql": "{% macro _is_ephemeral(obj, macro) %}\n    {%- if obj.is_cte -%}\n        {% set ephemeral_prefix = api.Relation.add_ephemeral_prefix('') %}\n        {% if obj.name.startswith(ephemeral_prefix) %}\n            {% set model_name = obj.name[(ephemeral_prefix|length):] %}\n        {% else %}\n            {% set model_name = obj.name %}\n        {%- endif -%}\n        {% set error_message %}\nThe `{{ macro }}` macro cannot be used with ephemeral models, as it relies on the information schema.\n\n`{{ model_name }}` is an ephemeral model. Consider making it a view or table instead.\n        {% endset %}\n        {%- do exceptions.raise_compiler_error(error_message) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.30505, "supported_languages": null}, "macro.dbt_utils._is_relation": {"unique_id": "macro.dbt_utils._is_relation", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\jinja_helpers\\_is_relation.sql", "original_file_path": "macros\\jinja_helpers\\_is_relation.sql", "name": "_is_relation", "macro_sql": "{% macro _is_relation(obj, macro) %}\n    {%- if not (obj is mapping and obj.get('metadata', {}).get('type', '').endswith('Relation')) -%}\n        {%- do exceptions.raise_compiler_error(\"Macro \" ~ macro ~ \" expected a Relation but received the value: \" ~ obj) -%}\n    {%- endif -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.307053, "supported_languages": null}, "macro.dbt_utils.get_period_boundaries": {"unique_id": "macro.dbt_utils.get_period_boundaries", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "get_period_boundaries", "macro_sql": "{% macro get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n    {{ return(adapter.dispatch('get_period_boundaries', 'dbt_utils')(target_schema, target_table, timestamp_field, start_date, stop_date, period)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_boundaries"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.331083, "supported_languages": null}, "macro.dbt_utils.default__get_period_boundaries": {"unique_id": "macro.dbt_utils.default__get_period_boundaries", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "default__get_period_boundaries", "macro_sql": "{% macro default__get_period_boundaries(target_schema, target_table, timestamp_field, start_date, stop_date, period) -%}\n\n  {% call statement('period_boundaries', fetch_result=True) -%}\n    with data as (\n      select\n          coalesce(max(\"{{timestamp_field}}\"), '{{start_date}}')::timestamp as start_timestamp,\n          coalesce(\n            {{ dateadd('millisecond',\n                                -1,\n                                \"nullif('\" ~ stop_date ~ \"','')::timestamp\") }},\n            {{ dbt_utils.current_timestamp() }}\n          ) as stop_timestamp\n      from \"{{target_schema}}\".\"{{target_table}}\"\n    )\n\n    select\n      start_timestamp,\n      stop_timestamp,\n      {{ datediff('start_timestamp',\n                           'stop_timestamp',\n                           period) }}  + 1 as num_periods\n    from data\n  {%- endcall %}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.dateadd", "macro.dbt_utils.current_timestamp", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.3350875, "supported_languages": null}, "macro.dbt_utils.get_period_sql": {"unique_id": "macro.dbt_utils.get_period_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "get_period_sql", "macro_sql": "{% macro get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n    {{ return(adapter.dispatch('get_period_sql', 'dbt_utils')(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_period_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.3360884, "supported_languages": null}, "macro.dbt_utils.default__get_period_sql": {"unique_id": "macro.dbt_utils.default__get_period_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "default__get_period_sql", "macro_sql": "{% macro default__get_period_sql(target_cols_csv, sql, timestamp_field, period, start_timestamp, stop_timestamp, offset) -%}\n\n  {%- set period_filter -%}\n    (\"{{timestamp_field}}\" >  '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' and\n     \"{{timestamp_field}}\" <= '{{start_timestamp}}'::timestamp + interval '{{offset}} {{period}}' + interval '1 {{period}}' and\n     \"{{timestamp_field}}\" <  '{{stop_timestamp}}'::timestamp)\n  {%- endset -%}\n\n  {%- set filtered_sql = sql | replace(\"__PERIOD_FILTER__\", period_filter) -%}\n\n  select\n    {{target_cols_csv}}\n  from (\n    {{filtered_sql}}\n  )\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.3390877, "supported_languages": null}, "macro.dbt_utils.materialization_insert_by_period_default": {"unique_id": "macro.dbt_utils.materialization_insert_by_period_default", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\materializations\\insert_by_period_materialization.sql", "original_file_path": "macros\\materializations\\insert_by_period_materialization.sql", "name": "materialization_insert_by_period_default", "macro_sql": "{% materialization insert_by_period, default -%}\n  {%- set timestamp_field = config.require('timestamp_field') -%}\n  {%- set start_date = config.require('start_date') -%}\n  {%- set stop_date = config.get('stop_date') or '' -%}\n  {%- set period = config.get('period') or 'week' -%}\n\n  {%- set deprecation_warning = \"Warning: the `insert_by_period` materialization will be removed from dbt_utils in version 1.0.0. Install from dbt-labs/dbt-labs-experimental-features instead (see https://github.com/dbt-labs/dbt-utils/discussions/487). The \" ~ package ~ \".\" ~ model ~ \" model triggered this warning.\" -%}\n  {%- do exceptions.warn(deprecation_warning) -%}\n\n  {%- if sql.find('__PERIOD_FILTER__') == -1 -%}\n    {%- set error_message -%}\n      Model '{{ model.unique_id }}' does not include the required string '__PERIOD_FILTER__' in its sql\n    {%- endset -%}\n    {{ exceptions.raise_compiler_error(error_message) }}\n  {%- endif -%}\n\n  {%- set identifier = model['name'] -%}\n\n  {%- set old_relation = adapter.get_relation(database=database, schema=schema, identifier=identifier) -%}\n  {%- set target_relation = api.Relation.create(identifier=identifier, schema=schema, type='table') -%}\n\n  {%- set non_destructive_mode = (flags.NON_DESTRUCTIVE == True) -%}\n  {%- set full_refresh_mode = (flags.FULL_REFRESH == True) -%}\n\n  {%- set exists_as_table = (old_relation is not none and old_relation.is_table) -%}\n  {%- set exists_not_as_table = (old_relation is not none and not old_relation.is_table) -%}\n\n  {%- set should_truncate = (non_destructive_mode and full_refresh_mode and exists_as_table) -%}\n  {%- set should_drop = (not should_truncate and (full_refresh_mode or exists_not_as_table)) -%}\n  {%- set force_create = (flags.FULL_REFRESH and not flags.NON_DESTRUCTIVE) -%}\n\n  -- setup\n  {% if old_relation is none -%}\n    -- noop\n  {%- elif should_truncate -%}\n    {{adapter.truncate_relation(old_relation)}}\n  {%- elif should_drop -%}\n    {{adapter.drop_relation(old_relation)}}\n    {%- set old_relation = none -%}\n  {%- endif %}\n\n  {{run_hooks(pre_hooks, inside_transaction=False)}}\n\n  -- `begin` happens here, so `commit` after it to finish the transaction\n  {{run_hooks(pre_hooks, inside_transaction=True)}}\n  {% call statement() -%}\n    begin; -- make extra sure we've closed out the transaction\n    commit;\n  {%- endcall %}\n\n  -- build model\n  {% if force_create or old_relation is none -%}\n    {# Create an empty target table -#}\n    {% call statement('main') -%}\n      {%- set empty_sql = sql | replace(\"__PERIOD_FILTER__\", 'false') -%}\n      {{create_table_as(False, target_relation, empty_sql)}}\n    {%- endcall %}\n  {%- endif %}\n\n  {% set _ = dbt_utils.get_period_boundaries(schema,\n                                              identifier,\n                                              timestamp_field,\n                                              start_date,\n                                              stop_date,\n                                              period) %}\n  {%- set start_timestamp = load_result('period_boundaries')['data'][0][0] | string -%}\n  {%- set stop_timestamp = load_result('period_boundaries')['data'][0][1] | string -%}\n  {%- set num_periods = load_result('period_boundaries')['data'][0][2] | int -%}\n\n  {% set target_columns = adapter.get_columns_in_relation(target_relation) %}\n  {%- set target_cols_csv = target_columns | map(attribute='quoted') | join(', ') -%}\n  {%- set loop_vars = {'sum_rows_inserted': 0} -%}\n\n  -- commit each period as a separate transaction\n  {% for i in range(num_periods) -%}\n    {%- set msg = \"Running for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) -%}\n    {{ dbt_utils.log_info(msg) }}\n\n    {%- set tmp_identifier = model['name'] ~ '__dbt_incremental_period' ~ i ~ '_tmp' -%}\n    {%- set tmp_relation = api.Relation.create(identifier=tmp_identifier,\n                                               schema=schema, type='table') -%}\n    {% call statement() -%}\n      {% set tmp_table_sql = dbt_utils.get_period_sql(target_cols_csv,\n                                                       sql,\n                                                       timestamp_field,\n                                                       period,\n                                                       start_timestamp,\n                                                       stop_timestamp,\n                                                       i) %}\n      {{dbt.create_table_as(True, tmp_relation, tmp_table_sql)}}\n    {%- endcall %}\n\n    {{adapter.expand_target_column_types(from_relation=tmp_relation,\n                                         to_relation=target_relation)}}\n    {%- set name = 'main-' ~ i -%}\n    {% call statement(name, fetch_result=True) -%}\n      insert into {{target_relation}} ({{target_cols_csv}})\n      (\n          select\n              {{target_cols_csv}}\n          from {{tmp_relation.include(schema=False)}}\n      );\n    {%- endcall %}\n    {% set result = load_result('main-' ~ i) %}\n    {% if 'response' in result.keys() %} {# added in v0.19.0 #}\n        {% set rows_inserted = result['response']['rows_affected'] %}\n    {% else %} {# older versions #}\n        {% set rows_inserted = result['status'].split(\" \")[2] | int %}\n    {% endif %}\n\n    {%- set sum_rows_inserted = loop_vars['sum_rows_inserted'] + rows_inserted -%}\n    {%- if loop_vars.update({'sum_rows_inserted': sum_rows_inserted}) %} {% endif -%}\n\n    {%- set msg = \"Ran for \" ~ period ~ \" \" ~ (i + 1) ~ \" of \" ~ (num_periods) ~ \"; \" ~ rows_inserted ~ \" records inserted\" -%}\n    {{ dbt_utils.log_info(msg) }}\n\n  {%- endfor %}\n\n  {% call statement() -%}\n    begin;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=True)}}\n\n  {% call statement() -%}\n    commit;\n  {%- endcall %}\n\n  {{run_hooks(post_hooks, inside_transaction=False)}}\n\n  {%- set status_string = \"INSERT \" ~ loop_vars['sum_rows_inserted'] -%}\n\n  {% call noop_statement('main', status_string) -%}\n    -- no-op\n  {%- endcall %}\n\n  -- Return the relations created in this materialization\n  {{ return({'relations': [target_relation]}) }}\n\n{%- endmaterialization %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_hooks", "macro.dbt.statement", "macro.dbt.create_table_as", "macro.dbt_utils.get_period_boundaries", "macro.dbt_utils.log_info", "macro.dbt_utils.get_period_sql", "macro.dbt.noop_statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.3661149, "supported_languages": ["sql"]}, "macro.dbt_utils.get_intervals_between": {"unique_id": "macro.dbt_utils.get_intervals_between", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "name": "get_intervals_between", "macro_sql": "{% macro get_intervals_between(start_date, end_date, datepart) -%}\n    {{ return(adapter.dispatch('get_intervals_between', 'dbt_utils')(start_date, end_date, datepart)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_intervals_between"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.3686225, "supported_languages": null}, "macro.dbt_utils.default__get_intervals_between": {"unique_id": "macro.dbt_utils.default__get_intervals_between", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "name": "default__get_intervals_between", "macro_sql": "{% macro default__get_intervals_between(start_date, end_date, datepart) -%}\n    {%- call statement('get_intervals_between', fetch_result=True) %}\n\n        select {{ datediff(start_date, end_date, datepart) }}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_intervals_between') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values[0]) }}\n    {%- else -%}\n        {{ return(1) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.datediff"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.3706224, "supported_languages": null}, "macro.dbt_utils.date_spine": {"unique_id": "macro.dbt_utils.date_spine", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "name": "date_spine", "macro_sql": "{% macro date_spine(datepart, start_date, end_date) %}\n    {{ return(adapter.dispatch('date_spine', 'dbt_utils')(datepart, start_date, end_date)) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__date_spine"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.3716226, "supported_languages": null}, "macro.dbt_utils.default__date_spine": {"unique_id": "macro.dbt_utils.default__date_spine", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\date_spine.sql", "original_file_path": "macros\\sql\\date_spine.sql", "name": "default__date_spine", "macro_sql": "{% macro default__date_spine(datepart, start_date, end_date) %}\n\n\n{# call as follows:\n\ndate_spine(\n    \"day\",\n    \"to_date('01/01/2016', 'mm/dd/yyyy')\",\n    \"dateadd(week, 1, current_date)\"\n) #}\n\n\nwith rawdata as (\n\n    {{dbt_utils.generate_series(\n        dbt_utils.get_intervals_between(start_date, end_date, datepart)\n    )}}\n\n),\n\nall_periods as (\n\n    select (\n        {{\n            dateadd(\n                datepart,\n                \"row_number() over (order by 1) - 1\",\n                start_date\n            )\n        }}\n    ) as date_{{datepart}}\n    from rawdata\n\n),\n\nfiltered as (\n\n    select *\n    from all_periods\n    where date_{{datepart}} <= {{ end_date }}\n\n)\n\nselect * from filtered\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.generate_series", "macro.dbt_utils.get_intervals_between", "macro.dbt_utils.dateadd"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.3726223, "supported_languages": null}, "macro.dbt_utils.deduplicate": {"unique_id": "macro.dbt_utils.deduplicate", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "deduplicate", "macro_sql": "{%- macro deduplicate(relation, partition_by, order_by=none, relation_alias=none) -%}\n\n    {%- set error_message_group_by -%}\nWarning: the `group_by` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nUse `partition_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if kwargs.get('group_by') %}\n    {%- do exceptions.warn(error_message_group_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_order_by -%}\nWarning: `order_by` as an optional parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nSupply a non-null value for `order_by` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if not order_by %}\n    {%- do exceptions.warn(error_message_order_by) -%}\n    {%- endif -%}\n\n    {%- set error_message_alias -%}\nWarning: the `relation_alias` parameter of the `deduplicate` macro is no longer supported and will be deprecated in a future release of dbt-utils.\nIf you were using `relation_alias` to point to a CTE previously then you can now pass the alias directly to `relation` instead.\nThe {{ model.package_name }}.{{ model.name }} model triggered this warning.\n    {%- endset -%}\n\n    {% if relation_alias %}\n    {%- do exceptions.warn(error_message_alias) -%}\n    {%- endif -%}\n\n    {% set partition_by = partition_by or kwargs.get('group_by') %}\n    {% set relation = relation_alias or relation %}\n    {% set order_by = order_by or \"'1'\" %}\n\n    {{ return(adapter.dispatch('deduplicate', 'dbt_utils')(relation, partition_by, order_by)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.3881333, "supported_languages": null}, "macro.dbt_utils.default__deduplicate": {"unique_id": "macro.dbt_utils.default__deduplicate", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "default__deduplicate", "macro_sql": "\n\n{%- macro default__deduplicate(relation, partition_by, order_by) -%}\n\n    with row_numbered as (\n        select\n            _inner.*,\n            row_number() over (\n                partition by {{ partition_by }}\n                order by {{ order_by }}\n            ) as rn\n        from {{ relation }} as _inner\n    )\n\n    select\n        distinct data.*\n    from {{ relation }} as data\n    {#\n    -- Not all DBs will support natural joins but the ones that do include:\n    -- Oracle, MySQL, SQLite, Redshift, Teradata, Materialize, Databricks\n    -- Apache Spark, SingleStore, Vertica\n    -- Those that do not appear to support natural joins include:\n    -- SQLServer, Trino, Presto, Rockset, Athena\n    #}\n    natural join row_numbered\n    where row_numbered.rn = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.3891327, "supported_languages": null}, "macro.dbt_utils.redshift__deduplicate": {"unique_id": "macro.dbt_utils.redshift__deduplicate", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "redshift__deduplicate", "macro_sql": "{% macro redshift__deduplicate(relation, partition_by, order_by) -%}\n\n    {{ return(dbt_utils.default__deduplicate(relation, partition_by, order_by=order_by)) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__deduplicate"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.390133, "supported_languages": null}, "macro.dbt_utils.postgres__deduplicate": {"unique_id": "macro.dbt_utils.postgres__deduplicate", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "postgres__deduplicate", "macro_sql": "\n{%- macro postgres__deduplicate(relation, partition_by, order_by) -%}\n\n    select\n        distinct on ({{ partition_by }}) *\n    from {{ relation }}\n    order by {{ partition_by }}{{ ',' ~ order_by }}\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.3911338, "supported_languages": null}, "macro.dbt_utils.snowflake__deduplicate": {"unique_id": "macro.dbt_utils.snowflake__deduplicate", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "snowflake__deduplicate", "macro_sql": "\n{%- macro snowflake__deduplicate(relation, partition_by, order_by) -%}\n\n    select *\n    from {{ relation }}\n    qualify\n        row_number() over (\n            partition by {{ partition_by }}\n            order by {{ order_by }}\n        ) = 1\n\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.3911338, "supported_languages": null}, "macro.dbt_utils.bigquery__deduplicate": {"unique_id": "macro.dbt_utils.bigquery__deduplicate", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\deduplicate.sql", "original_file_path": "macros\\sql\\deduplicate.sql", "name": "bigquery__deduplicate", "macro_sql": "\n{%- macro bigquery__deduplicate(relation, partition_by, order_by) -%}\n\n    select unique.*\n    from (\n        select\n            array_agg (\n                original\n                order by {{ order_by }}\n                limit 1\n            )[offset(0)] unique\n        from {{ relation }} original\n        group by {{ partition_by }}\n    )\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.3921337, "supported_languages": null}, "macro.dbt_utils.get_powers_of_two": {"unique_id": "macro.dbt_utils.get_powers_of_two", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "name": "get_powers_of_two", "macro_sql": "{% macro get_powers_of_two(upper_bound) %}\n    {{ return(adapter.dispatch('get_powers_of_two', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.3951418, "supported_languages": null}, "macro.dbt_utils.default__get_powers_of_two": {"unique_id": "macro.dbt_utils.default__get_powers_of_two", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "name": "default__get_powers_of_two", "macro_sql": "{% macro default__get_powers_of_two(upper_bound) %}\n\n    {% if upper_bound <= 0 %}\n    {{ exceptions.raise_compiler_error(\"upper bound must be positive\") }}\n    {% endif %}\n\n    {% for _ in range(1, 100) %}\n       {% if upper_bound <= 2 ** loop.index %}{{ return(loop.index) }}{% endif %}\n    {% endfor %}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.3961415, "supported_languages": null}, "macro.dbt_utils.generate_series": {"unique_id": "macro.dbt_utils.generate_series", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "name": "generate_series", "macro_sql": "{% macro generate_series(upper_bound) %}\n    {{ return(adapter.dispatch('generate_series', 'dbt_utils')(upper_bound)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__generate_series"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.3971415, "supported_languages": null}, "macro.dbt_utils.default__generate_series": {"unique_id": "macro.dbt_utils.default__generate_series", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\generate_series.sql", "original_file_path": "macros\\sql\\generate_series.sql", "name": "default__generate_series", "macro_sql": "{% macro default__generate_series(upper_bound) %}\n\n    {% set n = dbt_utils.get_powers_of_two(upper_bound) %}\n\n    with p as (\n        select 0 as generated_number union all select 1\n    ), unioned as (\n\n    select\n\n    {% for i in range(n) %}\n    p{{i}}.generated_number * power(2, {{i}})\n    {% if not loop.last %} + {% endif %}\n    {% endfor %}\n    + 1\n    as generated_number\n\n    from\n\n    {% for i in range(n) %}\n    p as p{{i}}\n    {% if not loop.last %} cross join {% endif %}\n    {% endfor %}\n\n    )\n\n    select *\n    from unioned\n    where generated_number <= {{upper_bound}}\n    order by generated_number\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_powers_of_two"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.3991416, "supported_languages": null}, "macro.dbt_utils.get_column_values": {"unique_id": "macro.dbt_utils.get_column_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "name": "get_column_values", "macro_sql": "{% macro get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {{ return(adapter.dispatch('get_column_values', 'dbt_utils')(table, column, order_by, max_records, default, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_column_values"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.4021413, "supported_languages": null}, "macro.dbt_utils.default__get_column_values": {"unique_id": "macro.dbt_utils.default__get_column_values", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_column_values.sql", "original_file_path": "macros\\sql\\get_column_values.sql", "name": "default__get_column_values", "macro_sql": "{% macro default__get_column_values(table, column, order_by='count(*) desc', max_records=none, default=none, where=none) -%}\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {% set default = [] if not default %}\n        {{ return(default) }}\n    {% endif %}\n\n    {%- do dbt_utils._is_ephemeral(table, 'get_column_values') -%}\n\n    {# Not all relations are tables. Renaming for internal clarity without breaking functionality for anyone using named arguments #}\n    {# TODO: Change the method signature in a future 0.x.0 release #}\n    {%- set target_relation = table -%}\n\n    {# adapter.load_relation is a convenience wrapper to avoid building a Relation when we already have one #}\n    {% set relation_exists = (load_relation(target_relation)) is not none %}\n\n    {%- call statement('get_column_values', fetch_result=true) %}\n\n        {%- if not relation_exists and default is none -%}\n\n          {{ exceptions.raise_compiler_error(\"In get_column_values(): relation \" ~ target_relation ~ \" does not exist and no default value was provided.\") }}\n\n        {%- elif not relation_exists and default is not none -%}\n\n          {{ log(\"Relation \" ~ target_relation ~ \" does not exist. Returning the default value: \" ~ default) }}\n\n          {{ return(default) }}\n\n        {%- else -%}\n\n\n            select\n                {{ column }} as value\n\n            from {{ target_relation }}\n\n            {% if where is not none %}\n            where {{ where }}\n            {% endif %}\n\n            group by {{ column }}\n            order by {{ order_by }}\n\n            {% if max_records is not none %}\n            limit {{ max_records }}\n            {% endif %}\n\n        {% endif %}\n\n    {%- endcall -%}\n\n    {%- set value_list = load_result('get_column_values') -%}\n\n    {%- if value_list and value_list['data'] -%}\n        {%- set values = value_list['data'] | map(attribute=0) | list %}\n        {{ return(values) }}\n    {%- else -%}\n        {{ return(default) }}\n    {%- endif -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_ephemeral", "macro.dbt.load_relation", "macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.4096463, "supported_languages": null}, "macro.dbt_utils.get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_filtered_columns_in_relation.sql", "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql", "name": "get_filtered_columns_in_relation", "macro_sql": "{% macro get_filtered_columns_in_relation(from, except=[]) -%}\n    {{ return(adapter.dispatch('get_filtered_columns_in_relation', 'dbt_utils')(from, except)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.412655, "supported_languages": null}, "macro.dbt_utils.default__get_filtered_columns_in_relation": {"unique_id": "macro.dbt_utils.default__get_filtered_columns_in_relation", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_filtered_columns_in_relation.sql", "original_file_path": "macros\\sql\\get_filtered_columns_in_relation.sql", "name": "default__get_filtered_columns_in_relation", "macro_sql": "{% macro default__get_filtered_columns_in_relation(from, except=[]) -%}\n    {%- do dbt_utils._is_relation(from, 'get_filtered_columns_in_relation') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'get_filtered_columns_in_relation') -%}\n\n    {# -- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('') }}\n    {% endif %}\n\n    {%- set include_cols = [] %}\n    {%- set cols = adapter.get_columns_in_relation(from) -%}\n    {%- set except = except | map(\"lower\") | list %}\n    {%- for col in cols -%}\n        {%- if col.column|lower not in except -%}\n            {% do include_cols.append(col.column) %}\n        {%- endif %}\n    {%- endfor %}\n\n    {{ return(include_cols) }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.416655, "supported_languages": null}, "macro.dbt_utils.get_query_results_as_dict": {"unique_id": "macro.dbt_utils.get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "name": "get_query_results_as_dict", "macro_sql": "{% macro get_query_results_as_dict(query) %}\n    {{ return(adapter.dispatch('get_query_results_as_dict', 'dbt_utils')(query)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_query_results_as_dict"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.4196603, "supported_languages": null}, "macro.dbt_utils.default__get_query_results_as_dict": {"unique_id": "macro.dbt_utils.default__get_query_results_as_dict", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_query_results_as_dict.sql", "original_file_path": "macros\\sql\\get_query_results_as_dict.sql", "name": "default__get_query_results_as_dict", "macro_sql": "{% macro default__get_query_results_as_dict(query) %}\n\n{# This macro returns a dictionary of the form {column_name: (tuple_of_results)} #}\n\n    {%- call statement('get_query_results', fetch_result=True,auto_begin=false) -%}\n\n        {{ query }}\n\n    {%- endcall -%}\n\n    {% set sql_results={} %}\n\n    {%- if execute -%}\n        {% set sql_results_table = load_result('get_query_results').table.columns %}\n        {% for column_name, column in sql_results_table.items() %}\n            {% do sql_results.update({column_name: column.values()}) %}\n        {% endfor %}\n    {%- endif -%}\n\n    {{ return(sql_results) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.434175, "supported_languages": null}, "macro.dbt_utils.get_relations_by_pattern": {"unique_id": "macro.dbt_utils.get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "name": "get_relations_by_pattern", "macro_sql": "{% macro get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_pattern', 'dbt_utils')(schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_pattern"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.4371743, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_pattern": {"unique_id": "macro.dbt_utils.default__get_relations_by_pattern", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_relations_by_pattern.sql", "original_file_path": "macros\\sql\\get_relations_by_pattern.sql", "name": "default__get_relations_by_pattern", "macro_sql": "{% macro default__get_relations_by_pattern(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.440174, "supported_languages": null}, "macro.dbt_utils.get_relations_by_prefix": {"unique_id": "macro.dbt_utils.get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "name": "get_relations_by_prefix", "macro_sql": "{% macro get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_relations_by_prefix', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_relations_by_prefix"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.442174, "supported_languages": null}, "macro.dbt_utils.default__get_relations_by_prefix": {"unique_id": "macro.dbt_utils.default__get_relations_by_prefix", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_relations_by_prefix.sql", "original_file_path": "macros\\sql\\get_relations_by_prefix.sql", "name": "default__get_relations_by_prefix", "macro_sql": "{% macro default__get_relations_by_prefix(schema, prefix, exclude='', database=target.database) %}\n\n    {%- call statement('get_tables', fetch_result=True) %}\n\n      {{ dbt_utils.get_tables_by_prefix_sql(schema, prefix, exclude, database) }}\n\n    {%- endcall -%}\n\n    {%- set table_list = load_result('get_tables') -%}\n\n    {%- if table_list and table_list['table'] -%}\n        {%- set tbl_relations = [] -%}\n        {%- for row in table_list['table'] -%}\n            {%- set tbl_relation = api.Relation.create(\n                database=database,\n                schema=row.table_schema,\n                identifier=row.table_name,\n                type=row.table_type\n            ) -%}\n            {%- do tbl_relations.append(tbl_relation) -%}\n        {%- endfor -%}\n\n        {{ return(tbl_relations) }}\n    {%- else -%}\n        {{ return([]) }}\n    {%- endif -%}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.statement", "macro.dbt_utils.get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.4446802, "supported_languages": null}, "macro.dbt_utils.get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "name": "get_tables_by_pattern_sql", "macro_sql": "{% macro get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_pattern_sql', 'dbt_utils')\n        (schema_pattern, table_pattern, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.4496844, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "name": "default__get_tables_by_pattern_sql", "macro_sql": "{% macro default__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n        select distinct\n            table_schema as {{ adapter.quote('table_schema') }},\n            table_name as {{ adapter.quote('table_name') }},\n            {{ dbt_utils.get_table_types_sql() }}\n        from {{ database }}.information_schema.tables\n        where table_schema ilike '{{ schema_pattern }}'\n        and table_name ilike '{{ table_pattern }}'\n        and table_name not ilike '{{ exclude }}'\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.4516873, "supported_languages": null}, "macro.dbt_utils.bigquery__get_tables_by_pattern_sql": {"unique_id": "macro.dbt_utils.bigquery__get_tables_by_pattern_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "name": "bigquery__get_tables_by_pattern_sql", "macro_sql": "{% macro bigquery__get_tables_by_pattern_sql(schema_pattern, table_pattern, exclude='', database=target.database) %}\n\n    {% if '%' in schema_pattern %}\n        {% set schemata=dbt_utils._bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% else %}\n        {% set schemata=[schema_pattern] %}\n    {% endif %}\n\n    {% set sql %}\n        {% for schema in schemata %}\n            select distinct\n                table_schema,\n                table_name,\n                {{ dbt_utils.get_table_types_sql() }}\n\n            from {{ adapter.quote(database) }}.{{ schema }}.INFORMATION_SCHEMA.TABLES\n            where lower(table_name) like lower ('{{ table_pattern }}')\n                and lower(table_name) not like lower ('{{ exclude }}')\n\n            {% if not loop.last %} union all {% endif %}\n\n        {% endfor %}\n    {% endset %}\n\n    {{ return(sql) }}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._bigquery__get_matching_schemata", "macro.dbt_utils.get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.4546876, "supported_languages": null}, "macro.dbt_utils._bigquery__get_matching_schemata": {"unique_id": "macro.dbt_utils._bigquery__get_matching_schemata", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_pattern_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_pattern_sql.sql", "name": "_bigquery__get_matching_schemata", "macro_sql": "{% macro _bigquery__get_matching_schemata(schema_pattern, database) %}\n    {% if execute %}\n\n        {% set sql %}\n        select schema_name from {{ adapter.quote(database) }}.INFORMATION_SCHEMA.SCHEMATA\n        where lower(schema_name) like lower('{{ schema_pattern }}')\n        {% endset %}\n\n        {% set results=run_query(sql) %}\n\n        {% set schemata=results.columns['schema_name'].values() %}\n\n        {{ return(schemata) }}\n\n    {% else %}\n\n        {{ return([]) }}\n\n    {% endif %}\n\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.run_query"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.4556868, "supported_languages": null}, "macro.dbt_utils.get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "name": "get_tables_by_prefix_sql", "macro_sql": "{% macro get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n    {{ return(adapter.dispatch('get_tables_by_prefix_sql', 'dbt_utils')(schema, prefix, exclude, database)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_tables_by_prefix_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.457687, "supported_languages": null}, "macro.dbt_utils.default__get_tables_by_prefix_sql": {"unique_id": "macro.dbt_utils.default__get_tables_by_prefix_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_tables_by_prefix_sql.sql", "original_file_path": "macros\\sql\\get_tables_by_prefix_sql.sql", "name": "default__get_tables_by_prefix_sql", "macro_sql": "{% macro default__get_tables_by_prefix_sql(schema, prefix, exclude='', database=target.database) %}\n\n    {{ dbt_utils.get_tables_by_pattern_sql(\n        schema_pattern = schema,\n        table_pattern = prefix ~ '%',\n        exclude = exclude,\n        database = database\n    ) }}\n    \n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.get_tables_by_pattern_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.4586868, "supported_languages": null}, "macro.dbt_utils.get_table_types_sql": {"unique_id": "macro.dbt_utils.get_table_types_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "name": "get_table_types_sql", "macro_sql": "{%- macro get_table_types_sql() -%}\n  {{ return(adapter.dispatch('get_table_types_sql', 'dbt_utils')()) }}\n{%- endmacro -%}\n\n", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_table_types_sql"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.4601903, "supported_languages": null}, "macro.dbt_utils.default__get_table_types_sql": {"unique_id": "macro.dbt_utils.default__get_table_types_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "name": "default__get_table_types_sql", "macro_sql": "{% macro default__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'EXTERNAL TABLE' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.4611933, "supported_languages": null}, "macro.dbt_utils.postgres__get_table_types_sql": {"unique_id": "macro.dbt_utils.postgres__get_table_types_sql", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\get_table_types_sql.sql", "original_file_path": "macros\\sql\\get_table_types_sql.sql", "name": "postgres__get_table_types_sql", "macro_sql": "{% macro postgres__get_table_types_sql() %}\n            case table_type\n                when 'BASE TABLE' then 'table'\n                when 'FOREIGN' then 'external'\n                when 'MATERIALIZED VIEW' then 'materializedview'\n                else lower(table_type)\n            end as {{ adapter.quote('table_type') }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.4611933, "supported_languages": null}, "macro.dbt_utils.group_by": {"unique_id": "macro.dbt_utils.group_by", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "name": "group_by", "macro_sql": "{%- macro group_by(n) -%}\n    {{ return(adapter.dispatch('group_by', 'dbt_utils')(n)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__group_by"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.4631932, "supported_languages": null}, "macro.dbt_utils.default__group_by": {"unique_id": "macro.dbt_utils.default__group_by", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\groupby.sql", "original_file_path": "macros\\sql\\groupby.sql", "name": "default__group_by", "macro_sql": "\n\n{%- macro default__group_by(n) -%}\n\n  group by {% for i in range(1, n + 1) -%}\n      {{ i }}{{ ',' if not loop.last }}   \n   {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.4641933, "supported_languages": null}, "macro.dbt_utils.degrees_to_radians": {"unique_id": "macro.dbt_utils.degrees_to_radians", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "name": "degrees_to_radians", "macro_sql": "{% macro degrees_to_radians(degrees) -%}\n    acos(-1) * {{degrees}} / 180\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.4676998, "supported_languages": null}, "macro.dbt_utils.haversine_distance": {"unique_id": "macro.dbt_utils.haversine_distance", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "name": "haversine_distance", "macro_sql": "{% macro haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n    {{ return(adapter.dispatch('haversine_distance', 'dbt_utils')(lat1,lon1,lat2,lon2,unit)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__haversine_distance"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.4686997, "supported_languages": null}, "macro.dbt_utils.default__haversine_distance": {"unique_id": "macro.dbt_utils.default__haversine_distance", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "name": "default__haversine_distance", "macro_sql": "{% macro default__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n\n    2 * 3961 * asin(sqrt(power((sin(radians(({{ lat2 }} - {{ lat1 }}) / 2))), 2) +\n    cos(radians({{lat1}})) * cos(radians({{lat2}})) *\n    power((sin(radians(({{ lon2 }} - {{ lon1 }}) / 2))), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.4832153, "supported_languages": null}, "macro.dbt_utils.bigquery__haversine_distance": {"unique_id": "macro.dbt_utils.bigquery__haversine_distance", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\haversine_distance.sql", "original_file_path": "macros\\sql\\haversine_distance.sql", "name": "bigquery__haversine_distance", "macro_sql": "{% macro bigquery__haversine_distance(lat1, lon1, lat2, lon2, unit='mi') -%}\n{% set radians_lat1 = dbt_utils.degrees_to_radians(lat1) %}\n{% set radians_lat2 = dbt_utils.degrees_to_radians(lat2) %}\n{% set radians_lon1 = dbt_utils.degrees_to_radians(lon1) %}\n{% set radians_lon2 = dbt_utils.degrees_to_radians(lon2) %}\n{%- if unit == 'mi' %}\n    {% set conversion_rate = 1 %}\n{% elif unit == 'km' %}\n    {% set conversion_rate = 1.60934 %}\n{% else %}\n    {{ exceptions.raise_compiler_error(\"unit input must be one of 'mi' or 'km'. Got \" ~ unit) }}\n{% endif %}\n    2 * 3961 * asin(sqrt(power(sin(({{ radians_lat2 }} - {{ radians_lat1 }}) / 2), 2) +\n    cos({{ radians_lat1 }}) * cos({{ radians_lat2 }}) *\n    power(sin(({{ radians_lon2 }} - {{ radians_lon1 }}) / 2), 2))) * {{ conversion_rate }}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.degrees_to_radians"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.486215, "supported_languages": null}, "macro.dbt_utils.nullcheck": {"unique_id": "macro.dbt_utils.nullcheck", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "name": "nullcheck", "macro_sql": "{% macro nullcheck(cols) %}\n    {{ return(adapter.dispatch('nullcheck', 'dbt_utils')(cols)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.4872148, "supported_languages": null}, "macro.dbt_utils.default__nullcheck": {"unique_id": "macro.dbt_utils.default__nullcheck", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\nullcheck.sql", "original_file_path": "macros\\sql\\nullcheck.sql", "name": "default__nullcheck", "macro_sql": "{% macro default__nullcheck(cols) %}\n{%- for col in cols %}\n\n    {% if col.is_string() -%}\n\n    nullif({{col.name}},'') as {{col.name}}\n\n    {%- else -%}\n\n    {{col.name}}\n\n    {%- endif -%}\n\n{%- if not loop.last -%} , {%- endif -%}\n\n{%- endfor -%}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.4892147, "supported_languages": null}, "macro.dbt_utils.nullcheck_table": {"unique_id": "macro.dbt_utils.nullcheck_table", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "name": "nullcheck_table", "macro_sql": "{% macro nullcheck_table(relation) %}\n    {{ return(adapter.dispatch('nullcheck_table', 'dbt_utils')(relation)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__nullcheck_table"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.4902155, "supported_languages": null}, "macro.dbt_utils.default__nullcheck_table": {"unique_id": "macro.dbt_utils.default__nullcheck_table", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\nullcheck_table.sql", "original_file_path": "macros\\sql\\nullcheck_table.sql", "name": "default__nullcheck_table", "macro_sql": "{% macro default__nullcheck_table(relation) %}\n\n  {%- do dbt_utils._is_relation(relation, 'nullcheck_table') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'nullcheck_table') -%}\n  {% set cols = adapter.get_columns_in_relation(relation) %}\n\n  select {{ dbt_utils.nullcheck(cols) }}\n  from {{relation}}\n\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.nullcheck"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.4922147, "supported_languages": null}, "macro.dbt_utils.pivot": {"unique_id": "macro.dbt_utils.pivot", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "name": "pivot", "macro_sql": "{% macro pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n    {{ return(adapter.dispatch('pivot', 'dbt_utils')(column, values, alias, agg, cmp, prefix, suffix, then_value, else_value, quote_identifiers, distinct)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__pivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.4957266, "supported_languages": null}, "macro.dbt_utils.default__pivot": {"unique_id": "macro.dbt_utils.default__pivot", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\pivot.sql", "original_file_path": "macros\\sql\\pivot.sql", "name": "default__pivot", "macro_sql": "{% macro default__pivot(column,\n               values,\n               alias=True,\n               agg='sum',\n               cmp='=',\n               prefix='',\n               suffix='',\n               then_value=1,\n               else_value=0,\n               quote_identifiers=True,\n               distinct=False) %}\n  {% for value in values %}\n    {{ agg }}(\n      {% if distinct %} distinct {% endif %}\n      case\n      when {{ column }} {{ cmp }} '{{ dbt.escape_single_quotes(value) }}'\n        then {{ then_value }}\n      else {{ else_value }}\n      end\n    )\n    {% if alias %}\n      {% if quote_identifiers %}\n            as {{ adapter.quote(prefix ~ value ~ suffix) }}\n      {% else %}\n        as {{ dbt_utils.slugify(prefix ~ value ~ suffix) }}\n      {% endif %}\n    {% endif %}\n    {% if not loop.last %},{% endif %}\n  {% endfor %}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.escape_single_quotes", "macro.dbt_utils.slugify"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.497726, "supported_languages": null}, "macro.dbt_utils.safe_add": {"unique_id": "macro.dbt_utils.safe_add", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "name": "safe_add", "macro_sql": "{%- macro safe_add() -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('safe_add', 'dbt_utils')(*varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__safe_add"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.4997265, "supported_languages": null}, "macro.dbt_utils.default__safe_add": {"unique_id": "macro.dbt_utils.default__safe_add", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\safe_add.sql", "original_file_path": "macros\\sql\\safe_add.sql", "name": "default__safe_add", "macro_sql": "\n\n{%- macro default__safe_add() -%}\n\n{% set fields = [] %}\n\n{%- for field in varargs -%}\n\n    {% do fields.append(\"coalesce(\" ~ field ~ \", 0)\") %}\n\n{%- endfor -%}\n\n{{ fields|join(' +\\n  ') }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.5017269, "supported_languages": null}, "macro.dbt_utils.star": {"unique_id": "macro.dbt_utils.star", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "name": "star", "macro_sql": "{% macro star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {{ return(adapter.dispatch('star', 'dbt_utils')(from, relation_alias, except, prefix, suffix)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__star"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.503726, "supported_languages": null}, "macro.dbt_utils.default__star": {"unique_id": "macro.dbt_utils.default__star", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\star.sql", "original_file_path": "macros\\sql\\star.sql", "name": "default__star", "macro_sql": "{% macro default__star(from, relation_alias=False, except=[], prefix='', suffix='') -%}\n    {%- do dbt_utils._is_relation(from, 'star') -%}\n    {%- do dbt_utils._is_ephemeral(from, 'star') -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. #}\n    {%- if not execute -%}\n        {{ return('*') }}\n    {%- endif -%}\n\n    {% set cols = dbt_utils.get_filtered_columns_in_relation(from, except) %}\n\n    {%- if cols|length <= 0 -%}\n      {{- return('*') -}}\n    {%- else -%}\n        {%- for col in cols %}\n            {%- if relation_alias %}{{ relation_alias }}.{% else %}{%- endif -%}{{ adapter.quote(col)|trim }} {%- if prefix!='' or suffix!='' %} as {{ adapter.quote(prefix ~ col ~ suffix)|trim }} {%- endif -%}\n            {%- if not loop.last %},{{ '\\n  ' }}{% endif %}\n        {%- endfor -%}\n    {% endif %}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.get_filtered_columns_in_relation"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.5077264, "supported_languages": null}, "macro.dbt_utils.surrogate_key": {"unique_id": "macro.dbt_utils.surrogate_key", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "name": "surrogate_key", "macro_sql": "{%- macro surrogate_key(field_list) -%}\n    {# needed for safe_add to allow for non-keyword arguments see SO post #}\n    {# https://stackoverflow.com/questions/13944751/args-kwargs-in-jinja2-macros #}\n    {% set frustrating_jinja_feature = varargs %}\n    {{ return(adapter.dispatch('surrogate_key', 'dbt_utils')(field_list, *varargs)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__surrogate_key"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.5097263, "supported_languages": null}, "macro.dbt_utils.default__surrogate_key": {"unique_id": "macro.dbt_utils.default__surrogate_key", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\surrogate_key.sql", "original_file_path": "macros\\sql\\surrogate_key.sql", "name": "default__surrogate_key", "macro_sql": "\n\n{%- macro default__surrogate_key(field_list) -%}\n\n{%- if varargs|length >= 1 or field_list is string %}\n\n{%- set error_message = '\nWarning: the `surrogate_key` macro now takes a single list argument instead of \\\nmultiple string arguments. Support for multiple string arguments will be \\\ndeprecated in a future release of dbt-utils. The {}.{} model triggered this warning. \\\n'.format(model.package_name, model.name) -%}\n\n{%- do exceptions.warn(error_message) -%}\n\n{# first argument is not included in varargs, so add first element to field_list_xf #}\n{%- set field_list_xf = [field_list] -%}\n\n{%- for field in varargs %}\n{%- set _ = field_list_xf.append(field) -%}\n{%- endfor -%}\n\n{%- else -%}\n\n{# if using list, just set field_list_xf as field_list #}\n{%- set field_list_xf = field_list -%}\n\n{%- endif -%}\n\n\n{%- set fields = [] -%}\n\n{%- for field in field_list_xf -%}\n\n    {%- set _ = fields.append(\n        \"coalesce(cast(\" ~ field ~ \" as \" ~ type_string() ~ \"), '')\"\n    ) -%}\n\n    {%- if not loop.last %}\n        {%- set _ = fields.append(\"'-'\") -%}\n    {%- endif -%}\n\n{%- endfor -%}\n\n{{ hash(concat(fields)) }}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.type_string", "macro.dbt_utils.hash", "macro.dbt_utils.concat"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.5132346, "supported_languages": null}, "macro.dbt_utils.union_relations": {"unique_id": "macro.dbt_utils.union_relations", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "name": "union_relations", "macro_sql": "{%- macro union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n    {{ return(adapter.dispatch('union_relations', 'dbt_utils')(relations, column_override, include, exclude, source_column_name, where)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__union_relations"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.5287452, "supported_languages": null}, "macro.dbt_utils.default__union_relations": {"unique_id": "macro.dbt_utils.default__union_relations", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\union.sql", "original_file_path": "macros\\sql\\union.sql", "name": "default__union_relations", "macro_sql": "\n\n{%- macro default__union_relations(relations, column_override=none, include=[], exclude=[], source_column_name='_dbt_source_relation', where=none) -%}\n\n    {%- if exclude and include -%}\n        {{ exceptions.raise_compiler_error(\"Both an exclude and include list were provided to the `union` macro. Only one is allowed\") }}\n    {%- endif -%}\n\n    {#-- Prevent querying of db in parsing mode. This works because this macro does not create any new refs. -#}\n    {%- if not execute %}\n        {{ return('') }}\n    {% endif -%}\n\n    {%- set column_override = column_override if column_override is not none else {} -%}\n\n    {%- set relation_columns = {} -%}\n    {%- set column_superset = {} -%}\n\n    {%- for relation in relations -%}\n\n        {%- do relation_columns.update({relation: []}) -%}\n\n        {%- do dbt_utils._is_relation(relation, 'union_relations') -%}\n        {%- do dbt_utils._is_ephemeral(relation, 'union_relations') -%}\n        {%- set cols = adapter.get_columns_in_relation(relation) -%}\n        {%- for col in cols -%}\n\n        {#- If an exclude list was provided and the column is in the list, do nothing -#}\n        {%- if exclude and col.column in exclude -%}\n\n        {#- If an include list was provided and the column is not in the list, do nothing -#}\n        {%- elif include and col.column not in include -%}\n\n        {#- Otherwise add the column to the column superset -#}\n        {%- else -%}\n\n            {#- update the list of columns in this relation -#}\n            {%- do relation_columns[relation].append(col.column) -%}\n\n            {%- if col.column in column_superset -%}\n\n                {%- set stored = column_superset[col.column] -%}\n                {%- if col.is_string() and stored.is_string() and col.string_size() > stored.string_size() -%}\n\n                    {%- do column_superset.update({col.column: col}) -%}\n\n                {%- endif %}\n\n            {%- else -%}\n\n                {%- do column_superset.update({col.column: col}) -%}\n\n            {%- endif -%}\n\n        {%- endif -%}\n\n        {%- endfor -%}\n    {%- endfor -%}\n\n    {%- set ordered_column_names = column_superset.keys() -%}\n    {%- set dbt_command = flags.WHICH -%}\n\n\n    {% if dbt_command in ['run', 'build'] %}\n    {% if (include | length > 0 or exclude | length > 0) and not column_superset.keys() %}\n        {%- set relations_string -%}\n            {%- for relation in relations -%}\n                {{ relation.name }}\n            {%- if not loop.last %}, {% endif -%}\n            {%- endfor -%}\n        {%- endset -%}\n\n        {%- set error_message -%}\n            There were no columns found to union for relations {{ relations_string }}\n        {%- endset -%}\n\n        {{ exceptions.raise_compiler_error(error_message) }}\n    {%- endif -%}\n    {%- endif -%}\n\n    {%- for relation in relations %}\n\n        (\n            select\n\n                {%- if source_column_name is not none %}\n                cast({{ string_literal(relation) }} as {{ type_string() }}) as {{ source_column_name }},\n                {%- endif %}\n\n                {% for col_name in ordered_column_names -%}\n\n                    {%- set col = column_superset[col_name] %}\n                    {%- set col_type = column_override.get(col.column, col.data_type) %}\n                    {%- set col_name = adapter.quote(col_name) if col_name in relation_columns[relation] else 'null' %}\n                    cast({{ col_name }} as {{ col_type }}) as {{ col.quoted }} {% if not loop.last %},{% endif -%}\n\n                {%- endfor %}\n\n            from {{ relation }}\n\n            {% if where -%}\n            where {{ where }}\n            {%- endif %}\n        )\n\n        {% if not loop.last -%}\n            union all\n        {% endif -%}\n\n    {%- endfor -%}\n\n{%- endmacro -%}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.string_literal", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.5397563, "supported_languages": null}, "macro.dbt_utils.unpivot": {"unique_id": "macro.dbt_utils.unpivot", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "name": "unpivot", "macro_sql": "{% macro unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n    {{ return(adapter.dispatch('unpivot', 'dbt_utils')(relation, cast_to, exclude, remove, field_name, value_name, table)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__unpivot"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.5452707, "supported_languages": null}, "macro.dbt_utils.default__unpivot": {"unique_id": "macro.dbt_utils.default__unpivot", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\unpivot.sql", "original_file_path": "macros\\sql\\unpivot.sql", "name": "default__unpivot", "macro_sql": "{% macro default__unpivot(relation=none, cast_to='varchar', exclude=none, remove=none, field_name='field_name', value_name='value', table=none) -%}\n\n    {% if table %}\n        {%- set error_message = '\n            Warning: the `unpivot` macro no longer accepts a `table` parameter. \\\n            This parameter will be deprecated in a future release of dbt-utils. Use the `relation` parameter instead. \\\n            The {}.{} model triggered this warning. \\\n            '.format(model.package_name, model.name) -%}\n        {%- do exceptions.warn(error_message) -%}\n    {% endif %}\n\n    {% if relation and table %}\n        {{ exceptions.raise_compiler_error(\"Error: both the `relation` and `table` parameters were provided to `unpivot` macro. Choose one only (we recommend `relation`).\") }}\n    {% elif not relation and table %}\n        {% set relation=table %}\n    {% elif not relation and not table %}\n        {{ exceptions.raise_compiler_error(\"Error: argument `relation` is required for `unpivot` macro.\") }}\n    {% endif %}\n\n  {%- set exclude = exclude if exclude is not none else [] %}\n  {%- set remove = remove if remove is not none else [] %}\n\n  {%- set include_cols = [] %}\n\n  {%- set table_columns = {} %}\n\n  {%- do table_columns.update({relation: []}) %}\n\n  {%- do dbt_utils._is_relation(relation, 'unpivot') -%}\n  {%- do dbt_utils._is_ephemeral(relation, 'unpivot') -%}\n  {%- set cols = adapter.get_columns_in_relation(relation) %}\n\n  {%- for col in cols -%}\n    {%- if col.column.lower() not in remove|map('lower') and col.column.lower() not in exclude|map('lower') -%}\n      {% do include_cols.append(col) %}\n    {%- endif %}\n  {%- endfor %}\n\n\n  {%- for col in include_cols -%}\n    select\n      {%- for exclude_col in exclude %}\n        {{ exclude_col }},\n      {%- endfor %}\n\n      cast('{{ col.column }}' as {{ type_string() }}) as {{ field_name }},\n      cast(  {% if col.data_type == 'boolean' %}\n           {{ cast_bool_to_text(col.column) }}\n             {% else %}\n           {{ col.column }}\n             {% endif %}\n           as {{ cast_to }}) as {{ value_name }}\n\n    from {{ relation }}\n\n    {% if not loop.last -%}\n      union all\n    {% endif -%}\n  {%- endfor -%}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils._is_relation", "macro.dbt_utils._is_ephemeral", "macro.dbt_utils.type_string", "macro.dbt_utils.cast_bool_to_text"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.5522714, "supported_languages": null}, "macro.dbt_utils.width_bucket": {"unique_id": "macro.dbt_utils.width_bucket", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "name": "width_bucket", "macro_sql": "{% macro width_bucket(expr, min_value, max_value, num_buckets) %}\n  {{ return(adapter.dispatch('width_bucket', 'dbt_utils') (expr, min_value, max_value, num_buckets)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.snowflake__width_bucket"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.556274, "supported_languages": null}, "macro.dbt_utils.default__width_bucket": {"unique_id": "macro.dbt_utils.default__width_bucket", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "name": "default__width_bucket", "macro_sql": "{% macro default__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is eaxtly at the bucket egde\n        case\n            when\n                mod(\n                    {{ dbt.safe_cast(expr, type_numeric() ) }},\n                    {{ dbt.safe_cast(bin_size, type_numeric() ) }}\n                ) = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.5582738, "supported_languages": null}, "macro.dbt_utils.redshift__width_bucket": {"unique_id": "macro.dbt_utils.redshift__width_bucket", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "name": "redshift__width_bucket", "macro_sql": "{% macro redshift__width_bucket(expr, min_value, max_value, num_buckets) -%}\n\n    {% set bin_size -%}\n    (( {{ max_value }} - {{ min_value }} ) / {{ num_buckets }} )\n    {%- endset %}\n    (\n        -- to break ties when the amount is exactly at the bucket edge\n        case\n            when\n                {{ dbt.safe_cast(expr, type_numeric() ) }} %\n                {{ dbt.safe_cast(bin_size, type_numeric() ) }}\n                 = 0\n            then 1\n            else 0\n        end\n    ) +\n      -- Anything over max_value goes the N+1 bucket\n    least(\n        ceil(\n            ({{ expr }} - {{ min_value }})/{{ bin_size }}\n        ),\n        {{ num_buckets }} + 1\n    )\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt.safe_cast", "macro.dbt_utils.type_numeric"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.5597785, "supported_languages": null}, "macro.dbt_utils.snowflake__width_bucket": {"unique_id": "macro.dbt_utils.snowflake__width_bucket", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\sql\\width_bucket.sql", "original_file_path": "macros\\sql\\width_bucket.sql", "name": "snowflake__width_bucket", "macro_sql": "{% macro snowflake__width_bucket(expr, min_value, max_value, num_buckets) %}\n    width_bucket({{ expr }}, {{ min_value }}, {{ max_value }}, {{ num_buckets }} )\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.5597785, "supported_languages": null}, "macro.dbt_utils.get_url_host": {"unique_id": "macro.dbt_utils.get_url_host", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "name": "get_url_host", "macro_sql": "{% macro get_url_host(field) -%}\n    {{ return(adapter.dispatch('get_url_host', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_host"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.5617838, "supported_languages": null}, "macro.dbt_utils.default__get_url_host": {"unique_id": "macro.dbt_utils.default__get_url_host", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_host.sql", "original_file_path": "macros\\web\\get_url_host.sql", "name": "default__get_url_host", "macro_sql": "{% macro default__get_url_host(field) -%}\n\n{%- set parsed =\n    split_part(\n        split_part(\n            replace(\n                replace(\n                    replace(field, \"'android-app://'\", \"''\"\n                    ), \"'http://'\", \"''\"\n                ), \"'https://'\", \"''\"\n            ), \"'/'\", 1\n        ), \"'?'\", 1\n    )\n\n-%}\n\n\n    {{ dbt.safe_cast(\n        parsed,\n        type_string()\n        )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part", "macro.dbt_utils.replace", "macro.dbt.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.572294, "supported_languages": null}, "macro.dbt_utils.get_url_parameter": {"unique_id": "macro.dbt_utils.get_url_parameter", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "name": "get_url_parameter", "macro_sql": "{% macro get_url_parameter(field, url_parameter) -%}\n    {{ return(adapter.dispatch('get_url_parameter', 'dbt_utils')(field, url_parameter)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_parameter"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.573294, "supported_languages": null}, "macro.dbt_utils.default__get_url_parameter": {"unique_id": "macro.dbt_utils.default__get_url_parameter", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_parameter.sql", "original_file_path": "macros\\web\\get_url_parameter.sql", "name": "default__get_url_parameter", "macro_sql": "{% macro default__get_url_parameter(field, url_parameter) -%}\n\n{%- set formatted_url_parameter = \"'\" + url_parameter + \"='\" -%}\n\n{%- set split = split_part(split_part(field, formatted_url_parameter, 2), \"'&'\", 1) -%}\n\nnullif({{ split }},'')\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.split_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.5742939, "supported_languages": null}, "macro.dbt_utils.get_url_path": {"unique_id": "macro.dbt_utils.get_url_path", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "name": "get_url_path", "macro_sql": "{% macro get_url_path(field) -%}\n    {{ return(adapter.dispatch('get_url_path', 'dbt_utils')(field)) }}\n{% endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.default__get_url_path"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.5767968, "supported_languages": null}, "macro.dbt_utils.default__get_url_path": {"unique_id": "macro.dbt_utils.default__get_url_path", "package_name": "dbt_utils", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\dbt_utils", "path": "macros\\web\\get_url_path.sql", "original_file_path": "macros\\web\\get_url_path.sql", "name": "default__get_url_path", "macro_sql": "{% macro default__get_url_path(field) -%}\n\n    {%- set stripped_url =\n        replace(\n            replace(field, \"'http://'\", \"''\"), \"'https://'\", \"''\")\n    -%}\n\n    {%- set first_slash_pos -%}\n        coalesce(\n            nullif({{ position(\"'/'\", stripped_url) }}, 0),\n            {{ position(\"'?'\", stripped_url) }} - 1\n            )\n    {%- endset -%}\n\n    {%- set parsed_path =\n        split_part(\n            right(\n                stripped_url,\n                length(stripped_url) ~ \"-\" ~ first_slash_pos\n                ),\n            \"'?'\", 1\n            )\n    -%}\n\n    {{ safe_cast(\n        parsed_path,\n        type_string()\n    )}}\n\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.dbt_utils.replace", "macro.dbt_utils.position", "macro.dbt_utils.split_part", "macro.dbt_utils.right", "macro.dbt_utils.length", "macro.dbt_utils.safe_cast", "macro.dbt_utils.type_string"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.5788038, "supported_languages": null}, "macro.pmpm.date_part": {"unique_id": "macro.pmpm.date_part", "package_name": "pmpm", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\pmpm", "path": "macros\\date_part.sql", "original_file_path": "macros\\date_part.sql", "name": "date_part", "macro_sql": "{% macro date_part(datepart, date) -%}\n    {{ adapter.dispatch('date_part') (datepart, date) }}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": ["macro.pmpm.default__date_part"]}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.5808089, "supported_languages": null}, "macro.pmpm.default__date_part": {"unique_id": "macro.pmpm.default__date_part", "package_name": "pmpm", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\pmpm", "path": "macros\\date_part.sql", "original_file_path": "macros\\date_part.sql", "name": "default__date_part", "macro_sql": "{% macro default__date_part(datepart, date) -%}\n    date_part('{{ datepart }}', {{  date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.5818086, "supported_languages": null}, "macro.pmpm.bigquery__date_part": {"unique_id": "macro.pmpm.bigquery__date_part", "package_name": "pmpm", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\pmpm", "path": "macros\\date_part.sql", "original_file_path": "macros\\date_part.sql", "name": "bigquery__date_part", "macro_sql": "{% macro bigquery__date_part(datepart, date) -%}\n    extract({{ datepart }} from {{ date }})\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.5818086, "supported_languages": null}, "macro.pmpm.default__generate_schema_name": {"unique_id": "macro.pmpm.default__generate_schema_name", "package_name": "pmpm", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\pmpm", "path": "macros\\generate_schema_name.sql", "original_file_path": "macros\\generate_schema_name.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is not none -%}\n        {{ custom_schema_name | trim }}\n    {%- else -%}\n        {{ default_schema }}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.5838087, "supported_languages": null}, "macro.readmissions.default__generate_schema_name": {"unique_id": "macro.readmissions.default__generate_schema_name", "package_name": "readmissions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\readmissions", "path": "macros\\generate_schema_name.sql", "original_file_path": "macros\\generate_schema_name.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is not none -%}\n        {{ custom_schema_name | trim }}\n    {%- else -%}\n        {{ default_schema }}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.5848086, "supported_languages": null}, "macro.readmissions.test_valid_values": {"unique_id": "macro.readmissions.test_valid_values", "package_name": "readmissions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\readmissions", "path": "macros\\valid_values_test.sql", "original_file_path": "macros\\valid_values_test.sql", "name": "test_valid_values", "macro_sql": "{% test valid_values(model, column_name, lookup_table, lookup_column) %}\n\nwith validation as (\nselect\n    {{ column_name }} as col\nfrom {{ model }}\nwhere {{ column_name }} is not null\n),\n\nvalidation_errors as (\nselect\n    col\nfrom validation aa\nleft join {{ lookup_table }} bb\n    on aa.col = bb.{{ lookup_column }}\nwhere bb.{{ lookup_column }} is null\n)\n\nselect *\nfrom validation_errors\n\n{% endtest %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.5868087, "supported_languages": null}, "macro.terminology.default__generate_schema_name": {"unique_id": "macro.terminology.default__generate_schema_name", "package_name": "terminology", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\terminology", "path": "macros\\generate_schema_name.sql", "original_file_path": "macros\\generate_schema_name.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is not none -%}\n        {{ custom_schema_name | trim }}\n    {%- else -%}\n        {{ default_schema }}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.5878088, "supported_languages": null}, "macro.the_tuva_project.default__generate_schema_name": {"unique_id": "macro.the_tuva_project.default__generate_schema_name", "package_name": "the_tuva_project", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\the_tuva_project", "path": "macros\\generate_schema_name.sql", "original_file_path": "macros\\generate_schema_name.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\r\n    {%- set default_schema = target.schema -%}\r\n    {%- if custom_schema_name is not none -%}\r\n        {{ custom_schema_name | trim }}\r\n    {%- else -%}\r\n        {{ default_schema }}\r\n    {%- endif -%}\r\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.5898087, "supported_languages": null}, "macro.tuva_chronic_conditions.default__generate_schema_name": {"unique_id": "macro.tuva_chronic_conditions.default__generate_schema_name", "package_name": "tuva_chronic_conditions", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\dbt_packages\\tuva_chronic_conditions", "path": "macros\\generate_schema_name.sql", "original_file_path": "macros\\generate_schema_name.sql", "name": "default__generate_schema_name", "macro_sql": "{% macro default__generate_schema_name(custom_schema_name, node) -%}\n    {%- set default_schema = target.schema -%}\n    {%- if custom_schema_name is not none -%}\n        {{ custom_schema_name | trim }}\n    {%- else -%}\n        {{ default_schema }}\n    {%- endif -%}\n{%- endmacro %}", "resource_type": "macro", "tags": [], "depends_on": {"macros": []}, "description": "", "meta": {}, "docs": {"show": true, "node_color": null}, "patch_path": null, "arguments": [], "created_at": 1674073784.5918086, "supported_languages": null}}, "docs": {"claims_data_model.__the_tuva_project__": {"unique_id": "claims_data_model.__the_tuva_project__", "package_name": "claims_data_model", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\docs_generate", "path": "docs_blocks.md", "original_file_path": "docs\\docs_blocks.md", "name": "__the_tuva_project__", "block_contents": "# The Tuva Project\r\n## \ud83e\uddf0\u00a0What is The Tuva Project?\r\n\r\nHealthcare data is messy, and working with it is hard!  Analytics teams spend countless hours ingesting, cleaning and transforming healthcare data in order to get it ready for analytics and machine learning. Healthcare knowledge and code are siloed; countless institutions are wasting hours duplicating the same work, and when mistakes are made or issues are missed, the insights gained from the analytics have little value.\r\n\r\nTuva Health is aiming to change that with the launch of The Tuva Project.  We're making it easy to get value out of your healthcare data by open sourcing the code needed to transform your data, publishing a knowledgebase of healthcare concepts and artifacts to make it easy to understand and learn about healthcare data, and building an online community of healthcare data professionals to share insights and get help.\r\n\r\n### \ud83d\udd6e\u00a0[Knowledge](https://thetuvaproject.com/docs/intro)\r\nWe're working towards building a complete knowledgebase of healthcare data concepts, covering everything from getting started with healthcare data through higher level analytics concepts.  You can [help contribute](https://thetuvaproject.com/docs/how-to-contribute/edit-github) by adding new pages through github.\r\n\r\n### \ud83d\udda5\ufe0f\u00a0[Code](https://hub.getdbt.com/tuva-health/the_tuva_project/latest/)\r\nWe're open-sourcing code to help transform your healthcare data.  Built just import this dbt package, just map your data to our input layer and instantly transform your data into helpful core concepts, get data marts for some of the most common analytics applications, get insights about your data quality and how it changes over time, and easily import some of the most useful healthcare terminology sets into your data warehouse.\r\n\r\n\r\n### \ud83e\udd1d\u00a0[Community](https://join.slack.com/t/thetuvaproject/shared_invite/zt-16iz61187-G522Mc2WGA2mHF57e0il0Q)\r\nStill stuck?  Join our slack community of healthcare data professionals and get answers to your healthcare data questions, communicate directly with the engineers working on The Tuva Project, and get the latest updates.\r\n\r\n## \u2049\u00a0What is this package and how do I use it?\r\n\r\nThis is The Tuva Project, a [dbt package](https://docs.getdbt.com/docs/build/packages) that imports all of the packages developed by Tuva Health.  Running The Tuva Project is as simple as [mapping](https://thetuvaproject.com/docs/claims-data-warehouse/setup) your data to our input layer, adding the_tuva_project to your packages.yml, and running `dbt deps` and `dbt build`.  See our [readme](https://hub.getdbt.com/tuva-health/the_tuva_project/latest/) for more detailed setup instructions.  If you are new to dbt, check out [their documentation](https://docs.getdbt.com/docs/introduction) for tips on getting started.\r\n\r\nThis package will import the following packages:\r\n- [data_profiling](https://github.com/tuva-health/data_profiling): Runs data quality tests to check for common problems specific to healthcare claims data.\r\n- [claims_preprocessing](https://github.com/tuva-health/claims_preprocessing): Groups overlapping claims into a single encounter, assigns every claim to 1 of 15 different encounter types and populates core concept tables.\r\n- [cms_chronic_conditions](https://github.com/tuva-health/chronic_conditions): Implements a chronic condition grouper based on ICD-10-CM codes. As a result, it is possible to know whether each patient in your population has any of ~70 different chronic conditions defined for the grouper.\r\n- [tuva_chronic_conditions](https://github.com/tuva-health/tuva_chronic_conditions): implements a chronic condition grouper created by the Tuva Project which creates ~40 homogeneous and mutually exclusive chronic condition groups on your patient.\r\n- [pmpm](https://github.com/tuva-health/pmpm): Calculates spend and utilization metrics for your patient population on a per-member-per-month (pmpm) basis.\r\n- [readmissions](https://github.com/tuva-health/readmissions): Calculates hospital readmission measures.\r\n- [terminology](https://github.com/tuva-health/terminology): Makes the latest version of many useful healthcare terminology datasets available as tables in your data warehouse. This package is different from the others because it does not build healthcare concepts on top of your data."}, "claims_data_model.__the_tuva_project_input__": {"unique_id": "claims_data_model.__the_tuva_project_input__", "package_name": "claims_data_model", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\docs_generate", "path": "docs_blocks.md", "original_file_path": "docs\\docs_blocks.md", "name": "__the_tuva_project_input__", "block_contents": "# \ud83e\uddf0\u00a0The Tuva Project Input Layer\r\n\r\nIn order to run The Tuva Project, you will need to start by creating the following 3 models in your dbt project with their appropriate structures:\r\n- [eligibility](https://tuva-health.github.io/the_tuva_project/#!/model/model.the_tuva_project_input.eligibility): A table with eligibility coverage spans for all patients.\r\n- [medical_claim](https://tuva-health.github.io/the_tuva_project/#!/model/model.the_tuva_project_input.medical_claim): A table at the claim line grain housing claim, condition, and procedure information for professional and institutional claims. \r\n- [pharmacy_claim](https://tuva-health.github.io/the_tuva_project/#!/model/model.the_tuva_project_input.pharmacy_claim): A table housing pharmacy claim details.\r\n\r\nFor more detailed instructions and guidance, see our [mapping guide](https://thetuvaproject.com/docs/claims-data-warehouse/setup)"}, "claims_data_model.__readmissions__": {"unique_id": "claims_data_model.__readmissions__", "package_name": "claims_data_model", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\docs_generate", "path": "docs_blocks.md", "original_file_path": "docs\\docs_blocks.md", "name": "__readmissions__", "block_contents": "# \ud83d\udce6\u00a0Readmissions\r\n\r\nHospital Readmissions are when a patient returns to the hospital within 30 days of a previous encounter for the same or a related condition. A hospital's readmission rate is often used to measure quality of care, and [CMS reduces reimbursements](https://www.cms.gov/Medicare/Quality-Initiatives-Patient-Assessment-Instruments/Value-Based-Programs/HRRP/Hospital-Readmission-Reduction-Program) according to an adjustment factor correlated with the readmission measures.\r\n\r\n\u00a0\u00a0\r\n\r\n\r\n### \ud83d\udcca\u00a0What does this package produce?\r\n\r\nThis package produces a mart which calculates which encounters are readmissions.  It produces the following two main output tables:\r\n\r\n| Table                                                                                            | Definition                                                                                                                                                                 |\r\n|--------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n| [encounter_augmented](#!/model/model.readmissions.readmissions__encounter_augmented#description) | A table at the encounter grain including details about which encounters were flagged for readmissions and other flags indicating why or why not the encounter was flagged  |\r\n| [readmission_summary](#!/model/model.readmissions.readmissions__readmission_summary#description) | A table table showing all encounters that were not disqualified for data quality reasons, with flags indicating if the encounter had readmissions and other relevant information |\r\n\r\n\u00a0\u00a0\r\n\r\n\u00a0\u00a0\r\n\r\n---\r\n### \ud83d\udd17\u00a0Quick Links\r\n- [Learn more about Readmissions](https://thetuvaproject.com/docs/analytics/readmissions) at the Tuva Project\r\n- Discover more about [The Tuva Project](https://thetuvaproject.com/), or the parent company [Tuva Health](https://tuvahealth.com/)\r\n- Find The Tuva Project on [dbt hub](https://hub.getdbt.com/tuva-health/the_tuva_project/latest/) or [GitHub](https://github.com/tuva-health/the_tuva_project)\r\n- Find this repo on [dbt hub](https://hub.getdbt.com/tuva-health/readmissions/latest/) or [GitHub](https://hub.getdbt.com/tuva-health/readmissions/latest/)"}, "claims_data_model.__data_profiling__": {"unique_id": "claims_data_model.__data_profiling__", "package_name": "claims_data_model", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\docs_generate", "path": "docs_blocks.md", "original_file_path": "docs\\docs_blocks.md", "name": "__data_profiling__", "block_contents": "# \ud83d\udce6\u00a0Data Profiling\r\n\r\nData Profiling is the process of examining and analyzing your data to gain insights into its quality. This package runs a variety of tests against the input tables you have mapped in the Claims Data Model that will help identify data quality problems or mapping issues that could affect downstream analytics.\r\n\r\n\u00a0\u00a0\r\n\r\n\r\n### \ud83d\udcca\u00a0What does this package produce?\r\n\r\nData Profiling produces 3 detail tables that provide row-level data quality insights for your mapped Claims Data Model models, and a summary table that provides a high level overview into all three tables.    \r\n\r\n| Table                                                                                                    | Definition                                                                                                                 |\r\n|----------------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------|\r\n| [claim_summary](#!/model/model.data_profiling.data_profiling__claim_summary#description)                 | A table that summarizes the data quality issues in `medical_claim`, `pharmacy_claim`, and `eligibility`                    |\r\n| [eligibility_detail](#!/model/model.data_profiling.data_profiling__eligibility_detail#description)       | A table with the keys to link to `eligibiltiy` and flags indicating whether or not that row failed data quality checks    |\r\n| [medical_claim_detail](#!/model/model.data_profiling.data_profiling__medical_claim_detail#description)   | A table with the keys to link to `medical_claim` and flags indicating whether or not that row failed data quality checks  |\r\n| [pharmacy_claim_detail](#!/model/model.data_profiling.data_profiling__pharmacy_claim_detail#description) | A table with the keys to link to `pharmacy_claim` and flags indicating whether or not that row failed data quality checks |\r\n\r\n\u00a0\u00a0\r\n\r\n\u00a0\u00a0\r\n\r\n---\r\n### \ud83d\udd17\u00a0Quick Links\r\n- [Learn more about Data Profiling](https://thetuvaproject.com/docs/analytics/data-profiling) at the Tuva Project\r\n- Discover more about [The Tuva Project](https://thetuvaproject.com/), or the parent company [Tuva Health](https://tuvahealth.com/)\r\n- Find The Tuva Project on [dbt hub](https://hub.getdbt.com/tuva-health/the_tuva_project/latest/) or [GitHub](https://github.com/tuva-health/the_tuva_project)\r\n- Find this repo on [dbt hub](https://hub.getdbt.com/tuva-health/data_profiling/latest/) or [GitHub](https://hub.getdbt.com/tuva-health/data_profiling/latest/)"}, "claims_data_model.__claims_preprocessing__": {"unique_id": "claims_data_model.__claims_preprocessing__", "package_name": "claims_data_model", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\docs_generate", "path": "docs_blocks.md", "original_file_path": "docs\\docs_blocks.md", "name": "__claims_preprocessing__", "block_contents": "# \ud83d\udce6\u00a0Claims Preprocessing\r\n\r\nClaims data in its raw form is not built with analytics in mind.  This package takes the Claims Data Model tables you have created, and produces tables more readily built for analytics.  It also groups claims into encounters, and infers an encounter type based on the data in the claims.\r\n\r\n\u00a0\u00a0\r\n\r\n\r\n### \ud83d\udcca\u00a0What does this package produce?\r\n\r\nThis package produces the core schema, which enhances the Claims Data Model and together serve as the fundamental building blocks other packages in The Tuva Project build upon.       \r\n\r\n| Table                                                                                  | Definition                                                                          |\r\n|----------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------|\r\n| [condition](#!/model/model.claims_preprocessing.claims_preprocessing__condition#description)       | A table containing all conditions diagnosed in the claims data                      |\r\n| [encounter](#!/model/model.claims_preprocessing.claims_preprocessing__encounter#description)       | A table containing all encounters and encounter types identified in the claims data |\r\n| [patient](#!/model/model.claims_preprocessing.claims_preprocessing__patient#description)           | A table containing all patients present in the enrollment data                      |\r\n| [prescription](#!/model/model.claims_preprocessing.claims_preprocessing__prescription#description) | A table containing all medications prescribed to a patient                          |\r\n| [procedure](#!/model/model.claims_preprocessing.claims_preprocessing__procedure#description)       | A table containing all procedures performed on a patient in the claims data         |\r\n\r\n\u00a0\u00a0\r\n\r\n\u00a0\u00a0\r\n\r\n---\r\n### \ud83d\udd17\u00a0Quick Links\r\n- Discover more about [The Tuva Project](https://thetuvaproject.com/), or the parent company [Tuva Health](https://tuvahealth.com/)\r\n- Find The Tuva Project on [dbt hub](https://hub.getdbt.com/tuva-health/the_tuva_project/latest/) or [GitHub](https://github.com/tuva-health/the_tuva_project)\r\n- Find this repo on [dbt hub](https://hub.getdbt.com/tuva-health/claims_preprocessing/latest/) or [GitHub](https://hub.getdbt.com/tuva-health/claims_preprocessing/latest/)"}, "claims_data_model.__terminology__": {"unique_id": "claims_data_model.__terminology__", "package_name": "claims_data_model", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\docs_generate", "path": "docs_blocks.md", "original_file_path": "docs\\docs_blocks.md", "name": "__terminology__", "block_contents": "# \ud83d\udce6\u00a0Terminology\r\n\r\nClaims data utilizes numerous code sets to convey critical information, but generally does not include human readable descriptions of those codes.  The Terminology Package provides an easy way of loading those dictionaries as well as common mappings and groupers, so you can get more meaningful insight into your data.\r\n\r\n\u00a0\u00a0\r\n\r\n\r\n### \ud83d\udcca\u00a0What does this package produce?\r\n\r\nThis package loads numerous healthcare terminology sets into your warehouse.  Please navigate the project tree in these docs for more information, or see [github](https://github.com/tuva-health/terminology/tree/main/terminology) for the raw list of files and their contents.\r\n\r\n\u00a0\u00a0\r\n\r\n\u00a0\u00a0\r\n\r\n---\r\n### \ud83d\udd17\u00a0Quick Links\r\n- Discover more about [The Tuva Project](https://thetuvaproject.com/), or the parent company [Tuva Health](https://tuvahealth.com/)\r\n- Find The Tuva Project on [dbt hub](https://hub.getdbt.com/tuva-health/the_tuva_project/latest/) or [GitHub](https://github.com/tuva-health/the_tuva_project)\r\n- Find this repo on [dbt hub](https://hub.getdbt.com/tuva-health/terminology/latest/) or [GitHub](https://hub.getdbt.com/tuva-health/terminology/latest/)"}, "claims_data_model.__cms_chronic_conditions__": {"unique_id": "claims_data_model.__cms_chronic_conditions__", "package_name": "claims_data_model", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\docs_generate", "path": "docs_blocks.md", "original_file_path": "docs\\docs_blocks.md", "name": "__cms_chronic_conditions__", "block_contents": "# \ud83d\udce6\u00a0CMS Chronic Conditions\r\n\r\nThe OEDA and CMS have develeoped a [set of information products and analytics](https://www.cms.gov/Research-Statistics-Data-and-Systems/Statistics-Trends-and-Reports/Chronic-Conditions) examining chronic conditions among Medicare beneficiaries.  Identifying patients with chronic conditions will help provide an understanding of the burden and implications for the healthcare system, help identify high-risk patients, and help inform about resource utilization of patients with chronic diseases.\r\n\r\n\u00a0\u00a0\r\n\r\n\r\n### \ud83d\udcca\u00a0What does this package produce?\r\n\r\nThis package calculates which patients have chronic conditions per the CMS methodological standards, and produces that information in two tables at the patient grain and at the patient-condition grain\r\n\r\n| Table                                                                                                                  | Definition                                                                                                                                          |\r\n|------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------|\r\n| [chronic_conditions_pivoted](#!/model/model.cms_chronic_conditions.cms_chronic_conditions__chronic_conditions_pivoted#description) | A table at the patient grain, with a row for each patient and a column for each chronic condition and a flag indicating if they have that condition |\r\n| [chronic_conditions_unioned](#!/model/model.cms_chronic_conditions.cms_chronic_conditions__chronic_conditions_unioned#description) | A table at the patient-condition grain, with a row for every chronic condition identified in the data                                               |\r\n\u00a0\u00a0\r\n\r\n\u00a0\u00a0\r\n\r\n---\r\n### \ud83d\udd17\u00a0Quick Links\r\n- [Learn more about Chronic Conditions](https://thetuvaproject.com/docs/analytics/chronic-conditions) at the Tuva Project\r\n- Discover more about [The Tuva Project](https://thetuvaproject.com/), or the parent company [Tuva Health](https://tuvahealth.com/)\r\n- Find The Tuva Project on [dbt hub](https://hub.getdbt.com/tuva-health/the_tuva_project/latest/) or [GitHub](https://github.com/tuva-health/the_tuva_project)\r\n- Find this repo on [dbt hub](https://hub.getdbt.com/tuva-health/cms_chronic_conditions/latest/) or [GitHub](https://hub.getdbt.com/tuva-health/cms_chronic_conditions/latest/)"}, "claims_data_model.__tuva_chronic_conditions__": {"unique_id": "claims_data_model.__tuva_chronic_conditions__", "package_name": "claims_data_model", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\docs_generate", "path": "docs_blocks.md", "original_file_path": "docs\\docs_blocks.md", "name": "__tuva_chronic_conditions__", "block_contents": "# \ud83d\udce6\u00a0Tuva Chronic Conditions\r\n\r\nIdentifying patients with chronic conditions will help provide an understanding of the burden and implications for the healthcare system, help identify high-risk patients, and help inform about resource utilization of patients with chronic diseases.\r\n\r\n\u00a0\u00a0\r\n\r\n\r\n### \ud83d\udcca\u00a0What does this package produce?\r\n\r\nThis package calculates which patients have chronic conditions, and produces that information in two tables at the patient grain and at the patient-condition grain, and provides a table for grouping conditions into condition families.\r\n\r\n| Table                                                                                                                | Definition                                                                                                                                          |\r\n|----------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------|\r\n| [chronic_condition_groups](#!/model/model.tuva_chronic_conditions.tuva_chronic_conditions__chronic_condition_groups#description) | A table with mappings between all of the chronic conditions and their logical condition families                                                    |\r\n| [chronic_conditions_long](#!/model/model.tuva_chronic_conditions.tuva_chronic_conditions__chronic_conditions_wide#description)   | A table at the patient grain, with a row for each patient and a column for each chronic condition and a flag indicating if they have that condition |\r\n| [chronic_conditions_wide](#!/model/model.tuva_chronic_conditions.tuva_chronic_conditions__chronic_conditions_long#description)   | A table at the patient-condition grain, with a row for every chronic condition identified in the data                                               |\r\n\u00a0\u00a0\r\n\r\n\u00a0\u00a0\r\n\r\n---\r\n### \ud83d\udd17\u00a0Quick Links\r\n- [Learn more about Chronic Conditions](https://thetuvaproject.com/docs/analytics/chronic-conditions) at the Tuva Project\r\n- Discover more about [The Tuva Project](https://thetuvaproject.com/), or the parent company [Tuva Health](https://tuvahealth.com/)\r\n- Find The Tuva Project on [dbt hub](https://hub.getdbt.com/tuva-health/the_tuva_project/latest/) or [GitHub](https://github.com/tuva-health/the_tuva_project)\r\n- Find this repo on [dbt hub](https://hub.getdbt.com/tuva-health/tuva_chronic_conditions/latest/) or [GitHub](https://hub.getdbt.com/tuva-health/tuva_chronic_conditions/latest/)"}, "claims_data_model.__pmpm__": {"unique_id": "claims_data_model.__pmpm__", "package_name": "claims_data_model", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\docs_generate", "path": "docs_blocks.md", "original_file_path": "docs\\docs_blocks.md", "name": "__pmpm__", "block_contents": "# \ud83d\udce6\u00a0PMPM\r\n\r\nPMPM (cost per member per month) is a common healthcare financial benchmark, which calculates the average cost of healthcare per member enrolled per month. \r\n\r\n\u00a0\u00a0\r\n\r\n\r\n### \ud83d\udcca\u00a0What does this package produce?\r\n\r\nThis package produces one table, whcih can be used to build PMPM calculations and perform related analytics\r\n\r\n| Table                                                                                                                | Definition                                                                                                                           |\r\n|----------------------------------------------------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------|\r\n| [chronic_condition_groups](#!/model/model.pmpm.pmpm__pmpm_builder#description) | A table at the patient-month grain, with a row for month every patient has coverage, and the total and detailed spend for that month |\r\n\u00a0\u00a0\r\n\r\n\u00a0\u00a0\r\n\r\n---\r\n### \ud83d\udd17\u00a0Quick Links\r\n- Discover more about [The Tuva Project](https://thetuvaproject.com/), or the parent company [Tuva Health](https://tuvahealth.com/)\r\n- Find The Tuva Project on [dbt hub](https://hub.getdbt.com/tuva-health/the_tuva_project/latest/) or [GitHub](https://github.com/tuva-health/the_tuva_project)\r\n- Find this repo on [dbt hub](https://hub.getdbt.com/tuva-health/pmpm/latest/) or [GitHub](https://hub.getdbt.com/tuva-health/pmpm/latest/)"}, "claims_data_model.__claims_data_model__": {"unique_id": "claims_data_model.__claims_data_model__", "package_name": "claims_data_model", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\docs_generate", "path": "docs_blocks.md", "original_file_path": "docs\\docs_blocks.md", "name": "__claims_data_model__", "block_contents": "# \ud83d\udce6\u00a0Claims Data Model\r\n\r\nThe first step to using The Tuva Project is to map your claims data to the Claims Data Model. The Tuva Project expects your project to have three models containing your [medical_claim](#!/model/model.claims_data_model.medical_claim#description), [pharmacy_claim](#!/model/model.claims_data_model.pharmacy_claim#description), and [eligibiilty](#!/model/model.claims_data_model.eligibility#description) data in the expected format.   All packages in The Tuva Project ecosystem run off of these core tables.\r\n\r\n### \ud83d\udca1\u00a0Tips for getting started:\r\n- Read through our [Mappping Guide](https://thetuvaproject.com/docs/claims-data-warehouse/setup) for tips on how to map the models.\r\n- Check out the [Tuva Project Readme](https://hub.getdbt.com/tuva-health/the_tuva_project/latest/) for more details on how to get started with the tuva project.\r\n- Use the [Data Profiling](#!/overview/readmissions) package to validate your models, and make sure there aren't any issues that would affect downstream packages or analytics.\r\n\r\n\u00a0\u00a0\r\n\r\n\r\n### \ud83d\udcca\u00a0What models do I need to build in order for The Tuva Project to run?\r\n\r\nCreate the following models in your dbt project:\r\n\r\n| Table                                                                         | Definition                                                                                                                                                       |\r\n|-------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------|\r\n| [eligibility](#!/model/model.claims_data_model.eligibility#description)       | A model detailing eligibility spans for all patients in your population                                                                                          |\r\n| [medical_claim](#!/model/model.claims_data_model.medical_claim#description)   | A model containing all of the claim-line level information from your claims including claim type, provider info, charge/payment info, conditions, and procedures |\r\n| [pharmacy_claim](#!/model/model.claims_data_model.pharmacy_claim#description) | A model containing all of the medications prescribed and administered in pharmacy claims                                                                         |\r\n\u00a0\u00a0\r\n\r\n\u00a0\u00a0\r\n\r\n---\r\n### \ud83d\udd17\u00a0Quick Links\r\n- Read the [Mapping Guide](https://thetuvaproject.com/docs/claims-data-warehouse/setup), for more info on how to get started\r\n- Discover more about [The Tuva Project](https://thetuvaproject.com/), or the parent company [Tuva Health](https://tuvahealth.com/)\r\n- Find The Tuva Project on [dbt hub](https://hub.getdbt.com/tuva-health/the_tuva_project/latest/) or [GitHub](https://github.com/tuva-health/the_tuva_project)"}, "claims_data_model.__overview__": {"unique_id": "claims_data_model.__overview__", "package_name": "claims_data_model", "root_path": "C:\\Users\\forre\\PycharmProjects\\the_tuva_project\\integration_tests\\docs_generate", "path": "overview.md", "original_file_path": "docs\\overview.md", "name": "__overview__", "block_contents": "# The Tuva Project\r\n## \ud83e\uddf0\u00a0What is The Tuva Project?\r\n\r\nHealthcare data is messy, and working with it is hard!  Analytics teams spend countless hours ingesting, cleaning and transforming healthcare data in order to get it ready for analytics and machine learning. Healthcare knowledge and code are siloed; countless institutions are wasting hours duplicating the same work, and when mistakes are made or issues are missed, the insights gained from the analytics have little value.\r\n\r\nTuva Health is aiming to change that with the launch of The Tuva Project.  We're making it easy to get value out of your healthcare data by open sourcing the code needed to transform your data, publishing a knowledgebase of healthcare concepts and artifacts to make it easy to understand and learn about healthcare data, and building an online community of healthcare data professionals to share insights and get help.\r\n\r\n### \ud83d\udd6e\u00a0[Knowledge](https://thetuvaproject.com/docs/intro)\r\nWe're working towards building a complete knowledgebase of healthcare data concepts, covering everything from getting started with healthcare data through higher level analytics concepts.  You can [help contribute](https://thetuvaproject.com/docs/how-to-contribute/edit-github) by adding new pages through github.\r\n\r\n### \ud83d\udda5\ufe0f\u00a0[Code](https://hub.getdbt.com/tuva-health/the_tuva_project/latest/)\r\nWe're open-sourcing code to help transform your healthcare data.  Built just import this dbt package, just map your data to our input layer and instantly transform your data into helpful core concepts, get data marts for some of the most common analytics applications, get insights about your data quality and how it changes over time, and easily import some of the most useful healthcare terminology sets into your data warehouse.\r\n\r\n### \ud83e\udd1d\u00a0[Community](https://join.slack.com/t/thetuvaproject/shared_invite/zt-16iz61187-G522Mc2WGA2mHF57e0il0Q)\r\nStill stuck?  Join our slack community of healthcare data professionals and get answers to your healthcare data questions, communicate directly with the engineers working on The Tuva Project, and get the latest updates.\r\n\r\n## \u2049\u00a0What is this package and how do I use it?\r\n\r\nThis is The Tuva Project, a [dbt package](https://docs.getdbt.com/docs/build/packages) that imports all of the packages developed by Tuva Health.  Running The Tuva Project is as simple as [mapping](https://thetuvaproject.com/docs/claims-data-warehouse/mapping) your data to our input layer, adding the_tuva_project to your packages.yml, and running `dbt deps` and `dbt build`.  See our [readme](https://hub.getdbt.com/tuva-health/the_tuva_project/latest/) for more detailed setup instructions.  If you are new to dbt, check out [their documentation](https://docs.getdbt.com/docs/introduction) for tips on getting started.\r\n\r\nThis package will import the following packages:\r\n- [data_profiling](https://github.com/tuva-health/data_profiling): Runs data quality tests to check for common problems specific to healthcare claims data.\r\n- [claims_preprocessing](https://github.com/tuva-health/claims_preprocessing): Groups overlapping claims into a single encounter, assigns every claim to 1 of 15 different encounter types and populates core concept tables.\r\n- [cms_chronic_conditions](https://github.com/tuva-health/chronic_conditions): Implements a chronic condition grouper based on ICD-10-CM codes. As a result, it is possible to know whether each patient in your population has any of ~70 different chronic conditions defined for the grouper.\r\n- [tuva_chronic_conditions](https://github.com/tuva-health/tuva_chronic_conditions): implements a chronic condition grouper created by the Tuva Project which creates ~40 homogeneous and mutually exclusive chronic condition groups on your patient.\r\n- [pmpm](https://github.com/tuva-health/pmpm): Calculates spend and utilization metrics for your patient population on a per-member-per-month (pmpm) basis.\r\n- [readmissions](https://github.com/tuva-health/readmissions): Calculates hospital readmission measures.\r\n- [terminology](https://github.com/tuva-health/terminology): Makes the latest version of many useful healthcare terminology datasets available as tables in your data warehouse. This package is different from the others because it does not build healthcare concepts on top of your data."}, "dbt.__overview__": {"unique_id": "dbt.__overview__", "package_name": "dbt", "root_path": "C:\\Python3\\Python39\\lib\\site-packages\\dbt\\include\\global_project", "path": "overview.md", "original_file_path": "docs\\overview.md", "name": "__overview__", "block_contents": "### Welcome!\n\nWelcome to the auto-generated documentation for your dbt project!\n\n### Navigation\n\nYou can use the `Project` and `Database` navigation tabs on the left side of the window to explore the models\nin your project.\n\n#### Project Tab\nThe `Project` tab mirrors the directory structure of your dbt project. In this tab, you can see all of the\nmodels defined in your dbt project, as well as models imported from dbt packages.\n\n#### Database Tab\nThe `Database` tab also exposes your models, but in a format that looks more like a database explorer. This view\nshows relations (tables and views) grouped into database schemas. Note that ephemeral models are _not_ shown\nin this interface, as they do not exist in the database.\n\n### Graph Exploration\nYou can click the blue icon on the bottom-right corner of the page to view the lineage graph of your models.\n\nOn model pages, you'll see the immediate parents and children of the model you're exploring. By clicking the `Expand`\nbutton at the top-right of this lineage pane, you'll be able to see all of the models that are used to build,\nor are built from, the model you're exploring.\n\nOnce expanded, you'll be able to use the `--select` and `--exclude` model selection syntax to filter the\nmodels in the graph. For more information on model selection, check out the [dbt docs](https://docs.getdbt.com/docs/model-selection-syntax).\n\nNote that you can also right-click on models to interactively filter and explore the graph.\n\n---\n\n### More information\n\n- [What is dbt](https://docs.getdbt.com/docs/introduction)?\n- Read the [dbt viewpoint](https://docs.getdbt.com/docs/viewpoint)\n- [Installation](https://docs.getdbt.com/docs/installation)\n- Join the [dbt Community](https://www.getdbt.com/community/) for questions and discussion"}}, "exposures": {}, "metrics": {}, "selectors": {}, "disabled": {}, "parent_map": {"model.claims_data_model.eligibility": [], "model.claims_data_model.medical_claim": [], "model.claims_data_model.pharmacy_claim": [], "model.claims_preprocessing.claims_preprocessing__condition": ["model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "seed.terminology.terminology__icd_10_cm", "seed.terminology.terminology__present_on_admission"], "model.claims_preprocessing.claims_preprocessing__encounter": ["model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "seed.terminology.terminology__admit_source", "seed.terminology.terminology__admit_type", "seed.terminology.terminology__discharge_disposition", "seed.terminology.terminology__ms_drg"], "model.claims_preprocessing.claims_preprocessing__patient": ["model.claims_preprocessing.claims_preprocessing__eligibility"], "model.claims_preprocessing.claims_preprocessing__prescription": ["model.claims_data_model.pharmacy_claim"], "model.claims_preprocessing.claims_preprocessing__procedure": ["model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "seed.terminology.terminology__icd_10_pcs"], "model.claims_preprocessing.claims_preprocessing__encounter_id": ["model.claims_preprocessing.claims_preprocessing__generate_institutional_encounter_id", "model.claims_preprocessing.claims_preprocessing__professional_claims_in_institutional_encounters", "model.claims_preprocessing.claims_preprocessing__professional_encounters"], "model.claims_preprocessing.claims_preprocessing__encounter_type": ["model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__medical_claim", "seed.terminology.terminology__ms_drg"], "model.claims_preprocessing.claims_preprocessing__generate_institutional_encounter_id": ["model.claims_preprocessing.claims_preprocessing__relevant_encounter_type_claims", "model.claims_preprocessing.claims_preprocessing__relevant_encounter_type_claims", "model.claims_preprocessing.claims_preprocessing__relevant_encounter_type_claims"], "model.claims_preprocessing.claims_preprocessing__institutional_encounter_start_and_end_dates": ["model.claims_preprocessing.claims_preprocessing__generate_institutional_encounter_id", "model.claims_preprocessing.claims_preprocessing__medical_claim"], "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced": ["model.claims_preprocessing.claims_preprocessing__encounter_id", "model.claims_preprocessing.claims_preprocessing__medical_claim"], "model.claims_preprocessing.claims_preprocessing__mutually_exclusive_encounter_type": ["model.claims_preprocessing.claims_preprocessing__encounter_type"], "model.claims_preprocessing.claims_preprocessing__professional_claims_in_institutional_encounters": ["model.claims_preprocessing.claims_preprocessing__institutional_encounter_start_and_end_dates", "model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__mutually_exclusive_encounter_type"], "model.claims_preprocessing.claims_preprocessing__professional_encounters": ["model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__mutually_exclusive_encounter_type"], "model.claims_preprocessing.claims_preprocessing__relevant_encounter_type_claims": ["model.claims_preprocessing.claims_preprocessing__medical_claim", "model.claims_preprocessing.claims_preprocessing__mutually_exclusive_encounter_type"], "model.claims_preprocessing.claims_preprocessing__eligibility": ["model.claims_data_model.eligibility"], "model.claims_preprocessing.claims_preprocessing__medical_claim": ["model.claims_data_model.medical_claim"], "model.cms_chronic_conditions.cms_chronic_conditions__chronic_conditions_pivoted": ["model.cms_chronic_conditions.cms_chronic_conditions__chronic_conditions_unioned", "seed.terminology.terminology__cms_chronic_conditions", "seed.terminology.terminology__cms_chronic_conditions"], "model.cms_chronic_conditions.cms_chronic_conditions__chronic_conditions_unioned": ["model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_all", "model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_hiv_aids", "model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_oud"], "model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_all": ["model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__encounter", "seed.terminology.terminology__cms_chronic_conditions"], "model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_hiv_aids": ["model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__encounter", "seed.terminology.terminology__cms_chronic_conditions"], "model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_oud": ["model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__encounter", "model.claims_preprocessing.claims_preprocessing__prescription", "model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_all", "seed.terminology.terminology__cms_chronic_conditions"], "model.data_profiling.data_profiling__claim_summary": ["model.claims_data_model.eligibility", "model.claims_data_model.eligibility", "model.claims_data_model.eligibility", "model.claims_data_model.medical_claim", "model.claims_data_model.medical_claim", "model.claims_data_model.medical_claim", "model.claims_data_model.pharmacy_claim", "model.claims_data_model.pharmacy_claim", "model.claims_data_model.pharmacy_claim", "model.data_profiling.data_profiling__base_eligibility", "model.data_profiling.data_profiling__base_medical_claim", "model.data_profiling.data_profiling__base_medical_claim", "model.data_profiling.data_profiling__base_medical_claim", "model.data_profiling.data_profiling__base_pharmacy_claim", "model.data_profiling.data_profiling__eligibility_detail", "model.data_profiling.data_profiling__eligibility_detail", "model.data_profiling.data_profiling__medical_claim_detail", "model.data_profiling.data_profiling__medical_claim_detail", "model.data_profiling.data_profiling__pharmacy_claim_detail", "model.data_profiling.data_profiling__pharmacy_claim_detail", "seed.data_profiling.data_profiling__test_catalog"], "model.data_profiling.data_profiling__eligibility_detail": ["model.data_profiling.data_profiling__base_eligibility", "model.data_profiling.data_profiling__base_medical_claim", "seed.terminology.terminology__gender"], "model.data_profiling.data_profiling__medical_claim_detail": ["model.data_profiling.data_profiling__base_eligibility", "model.data_profiling.data_profiling__base_medical_claim", "seed.terminology.terminology__bill_type", "seed.terminology.terminology__claim_type", "seed.terminology.terminology__discharge_disposition", "seed.terminology.terminology__icd_10_cm", "seed.terminology.terminology__ms_drg", "seed.terminology.terminology__place_of_service", "seed.terminology.terminology__present_on_admission", "seed.terminology.terminology__revenue_center"], "model.data_profiling.data_profiling__pharmacy_claim_detail": ["model.data_profiling.data_profiling__base_eligibility", "model.data_profiling.data_profiling__base_pharmacy_claim"], "model.data_profiling.data_profiling__base_eligibility": ["model.claims_data_model.eligibility", "model.claims_data_model.eligibility"], "model.data_profiling.data_profiling__base_medical_claim": ["model.claims_data_model.medical_claim", "model.claims_data_model.medical_claim"], "model.data_profiling.data_profiling__base_pharmacy_claim": ["model.claims_data_model.pharmacy_claim", "model.claims_data_model.pharmacy_claim"], "snapshot.data_profiling.snapshot_claim_summary": ["model.data_profiling.data_profiling__claim_summary"], "snapshot.data_profiling.snapshot_eligibility_detail": ["model.data_profiling.data_profiling__eligibility_detail"], "snapshot.data_profiling.snapshot_medical_claim_detail": ["model.data_profiling.data_profiling__medical_claim_detail"], "snapshot.data_profiling.snapshot_pharmacy_claim_detail": ["model.data_profiling.data_profiling__pharmacy_claim_detail"], "seed.data_profiling.data_profiling__test_catalog": [], "model.pmpm.pmpm__pmpm_builder": ["model.pmpm.pmpm__claim_spend_and_utilization", "model.pmpm.pmpm__member_months"], "model.pmpm.pmpm__claim_spend_and_utilization": ["model.claims_data_model.medical_claim", "model.claims_data_model.pharmacy_claim"], "model.pmpm.pmpm__member_months": ["model.claims_data_model.eligibility"], "model.readmissions.readmissions__encounter_augmented": ["model.readmissions.readmissions__encounter_data_quality", "model.readmissions.readmissions__encounter_specialty_cohort", "model.readmissions.readmissions__index_admission", "model.readmissions.readmissions__planned_encounter", "model.readmissions.readmissions__stg_encounter"], "model.readmissions.readmissions__readmission_summary": ["model.readmissions.readmissions__encounter_augmented"], "model.readmissions.readmissions__diagnosis_ccs": ["model.readmissions.readmissions__primary_diagnosis_count", "model.readmissions.readmissions__stg_diagnosis", "seed.terminology.terminology__icd_10_cm", "seed.terminology.terminology__icd_10_cm_to_ccs"], "model.readmissions.readmissions__encounter_data_quality": ["model.readmissions.readmissions__diagnosis_ccs", "model.readmissions.readmissions__encounter_overlap", "model.readmissions.readmissions__encounter_overlap", "model.readmissions.readmissions__primary_diagnosis_count", "model.readmissions.readmissions__stg_encounter", "seed.terminology.terminology__discharge_disposition", "seed.terminology.terminology__ms_drg"], "model.readmissions.readmissions__encounter_overlap": ["model.readmissions.readmissions__stg_encounter"], "model.readmissions.readmissions__encounter_specialty_cohort": ["model.readmissions.readmissions__diagnosis_ccs", "model.readmissions.readmissions__diagnosis_ccs", "model.readmissions.readmissions__diagnosis_ccs", "model.readmissions.readmissions__diagnosis_ccs", "model.readmissions.readmissions__procedure_ccs", "model.readmissions.readmissions__stg_encounter", "seed.terminology.terminology__specialty_cohort", "seed.terminology.terminology__specialty_cohort", "seed.terminology.terminology__specialty_cohort", "seed.terminology.terminology__specialty_cohort", "seed.terminology.terminology__specialty_cohort", "seed.terminology.terminology__surgery_gynecology_cohort"], "model.readmissions.readmissions__exclusion": ["model.readmissions.readmissions__diagnosis_ccs", "seed.terminology.terminology__exclusion_ccs_diagnosis_category"], "model.readmissions.readmissions__index_admission": ["model.readmissions.readmissions__exclusion", "model.readmissions.readmissions__index_discharge_requirement", "model.readmissions.readmissions__index_time_requirement", "model.readmissions.readmissions__stg_encounter"], "model.readmissions.readmissions__index_discharge_requirement": ["model.readmissions.readmissions__stg_encounter", "model.readmissions.readmissions__stg_encounter", "model.readmissions.readmissions__stg_encounter", "model.readmissions.readmissions__stg_encounter"], "model.readmissions.readmissions__index_time_requirement": ["model.readmissions.readmissions__stg_encounter", "model.readmissions.readmissions__stg_encounter"], "model.readmissions.readmissions__planned_encounter": ["model.readmissions.readmissions__diagnosis_ccs", "model.readmissions.readmissions__diagnosis_ccs", "model.readmissions.readmissions__procedure_ccs", "model.readmissions.readmissions__procedure_ccs", "model.readmissions.readmissions__procedure_ccs", "seed.terminology.terminology__acute_diagnosis_ccs", "seed.terminology.terminology__acute_diagnosis_icd_10_cm", "seed.terminology.terminology__always_planned_ccs_diagnosis_category", "seed.terminology.terminology__always_planned_ccs_procedure_category", "seed.terminology.terminology__potentially_planned_ccs_procedure_category", "seed.terminology.terminology__potentially_planned_icd_10_pcs"], "model.readmissions.readmissions__primary_diagnosis_count": ["model.readmissions.readmissions__stg_diagnosis", "model.readmissions.readmissions__stg_diagnosis"], "model.readmissions.readmissions__procedure_ccs": ["model.readmissions.readmissions__stg_procedure", "seed.terminology.terminology__icd_10_pcs", "seed.terminology.terminology__icd_10_pcs_to_ccs"], "model.readmissions.readmissions__readmission_crude": ["model.readmissions.readmissions__encounter_overlap", "model.readmissions.readmissions__encounter_overlap", "model.readmissions.readmissions__stg_encounter"], "model.readmissions.readmissions__stg_diagnosis": ["model.claims_preprocessing.claims_preprocessing__condition"], "model.readmissions.readmissions__stg_encounter": ["model.claims_preprocessing.claims_preprocessing__encounter"], "model.readmissions.readmissions__stg_patient": ["model.claims_preprocessing.claims_preprocessing__patient"], "model.readmissions.readmissions__stg_procedure": ["model.claims_preprocessing.claims_preprocessing__procedure"], "seed.terminology.terminology__admit_source": [], "seed.terminology.terminology__admit_type": [], "seed.terminology.terminology__bill_type": [], "seed.terminology.terminology__claim_type": [], "seed.terminology.terminology__cms_chronic_conditions": [], "seed.terminology.terminology__code_type": [], "seed.terminology.terminology__discharge_disposition": [], "seed.terminology.terminology__encounter_type": [], "seed.terminology.terminology__ethnicity": [], "seed.terminology.terminology__fips_county": [], "seed.terminology.terminology__fips_state": [], "seed.terminology.terminology__gender": [], "seed.terminology.terminology__hcpcs_level_2": [], "seed.terminology.terminology__icd_10_cm": [], "seed.terminology.terminology__icd_10_pcs": [], "seed.terminology.terminology__mdc": [], "seed.terminology.terminology__medicare_dual_eligibility": [], "seed.terminology.terminology__medicare_state_fips": [], "seed.terminology.terminology__medicare_status": [], "seed.terminology.terminology__ms_drg": [], "seed.terminology.terminology__payer_type": [], "seed.terminology.terminology__place_of_service": [], "seed.terminology.terminology__present_on_admission": [], "seed.terminology.terminology__race": [], "seed.terminology.terminology__revenue_center": [], "seed.terminology.terminology__acute_diagnosis_ccs": [], "seed.terminology.terminology__acute_diagnosis_icd_10_cm": [], "seed.terminology.terminology__always_planned_ccs_diagnosis_category": [], "seed.terminology.terminology__always_planned_ccs_procedure_category": [], "seed.terminology.terminology__exclusion_ccs_diagnosis_category": [], "seed.terminology.terminology__icd_10_cm_to_ccs": [], "seed.terminology.terminology__icd_10_pcs_to_ccs": [], "seed.terminology.terminology__potentially_planned_ccs_procedure_category": [], "seed.terminology.terminology__potentially_planned_icd_10_pcs": [], "seed.terminology.terminology__specialty_cohort": [], "seed.terminology.terminology__surgery_gynecology_cohort": [], "model.tuva_chronic_conditions.tuva_chronic_conditions__chronic_conditions_long": ["model.claims_preprocessing.claims_preprocessing__condition", "seed.tuva_chronic_conditions.tuva_chronic_conditions__chronic_conditions_hierarchy"], "model.tuva_chronic_conditions.tuva_chronic_conditions__chronic_conditions_wide": ["model.tuva_chronic_conditions.tuva_chronic_conditions__chronic_conditions_long", "seed.tuva_chronic_conditions.tuva_chronic_conditions__chronic_conditions_hierarchy", "seed.tuva_chronic_conditions.tuva_chronic_conditions__chronic_conditions_hierarchy"], "model.tuva_chronic_conditions.tuva_chronic_conditions__chronic_condition_groups": ["seed.tuva_chronic_conditions.tuva_chronic_conditions__chronic_conditions_hierarchy"], "seed.tuva_chronic_conditions.tuva_chronic_conditions__chronic_conditions_hierarchy": [], "test.cms_chronic_conditions.unique_cms_chronic_conditions__chronic_conditions_pivoted_patient_id.2c77d8b310": ["model.cms_chronic_conditions.cms_chronic_conditions__chronic_conditions_pivoted"], "test.cms_chronic_conditions.not_null_cms_chronic_conditions__chronic_conditions_pivoted_patient_id.666f627a33": ["model.cms_chronic_conditions.cms_chronic_conditions__chronic_conditions_pivoted"], "test.cms_chronic_conditions.not_null_cms_chronic_conditions__chronic_conditions_unioned_patient_id.08dd497b51": ["model.cms_chronic_conditions.cms_chronic_conditions__chronic_conditions_unioned"], "test.cms_chronic_conditions.not_null_cms_chronic_conditions__chronic_conditions_unioned_encounter_id.a8e999f203": ["model.cms_chronic_conditions.cms_chronic_conditions__chronic_conditions_unioned"], "test.cms_chronic_conditions.not_null_cms_chronic_conditions__chronic_conditions_unioned_condition.5ab705f521": ["model.cms_chronic_conditions.cms_chronic_conditions__chronic_conditions_unioned"], "test.cms_chronic_conditions.unique_cms_chronic_conditions__chronic_conditions_unioned__patient_id_encounter_id_encounter_start_date_condition_.4c857f3bb8": ["model.cms_chronic_conditions.cms_chronic_conditions__chronic_conditions_unioned"], "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_all_patient_id.90e27b8290": ["model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_all"], "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_all_encounter_id.86972656b2": ["model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_all"], "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_all_condition.0039ccf034": ["model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_all"], "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_hiv_aids_patient_id.efd798a4e2": ["model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_hiv_aids"], "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_hiv_aids_encounter_id.d92cce8034": ["model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_hiv_aids"], "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_hiv_aids_condition.11afbdbbd5": ["model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_hiv_aids"], "test.cms_chronic_conditions.accepted_values_cms_chronic_conditions__stg_chronic_condition_hiv_aids_condition__Human_Immunodeficiency_Virus_and_or_Acquired_Immunodeficiency_Syndrome_HIV_AIDS_.3be06c6325": ["model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_hiv_aids"], "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_oud_patient_id.825a9ddb55": ["model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_oud"], "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_oud_encounter_id.d20775e7f6": ["model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_oud"], "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_oud_condition.7e5b6672a7": ["model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_oud"], "test.cms_chronic_conditions.accepted_values_cms_chronic_conditions__stg_chronic_condition_oud_condition__Opioid_Use_Disorder_OUD_.eafe801066": ["model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_oud"], "test.data_profiling.unique_data_profiling__eligibility_detail__patient_id_member_id_enrollment_start_date_enrollment_end_date_payer_payer_type_.08852652f8": ["model.data_profiling.data_profiling__eligibility_detail"], "test.data_profiling.unique_data_profiling__medical_claim_detail__claim_id_claim_line_number_.87c8994d54": ["model.data_profiling.data_profiling__medical_claim_detail"], "test.data_profiling.unique_data_profiling__pharmacy_claim_detail__claim_id_claim_line_number_.f510dfc4d6": ["model.data_profiling.data_profiling__pharmacy_claim_detail"], "test.data_profiling.unique_data_profiling__claim_summary_test_name.8edbb84f60": ["model.data_profiling.data_profiling__claim_summary"], "test.pmpm.unique_pmpm__member_months__patient_id___year_month_.1691717a43": ["model.pmpm.pmpm__member_months"], "test.pmpm.unique_pmpm__claim_spend_and_utilization__patient_id___claim_type___year_month_.a9eb7c1e1a": ["model.pmpm.pmpm__claim_spend_and_utilization"], "test.pmpm.unique_pmpm__pmpm_builder__patient_id___year_month_.a62156aeb4": ["model.pmpm.pmpm__pmpm_builder"], "test.tuva_chronic_conditions.unique_tuva_chronic_conditions__chronic_condition_groups_condition.02a997bfe2": ["model.tuva_chronic_conditions.tuva_chronic_conditions__chronic_condition_groups"], "test.tuva_chronic_conditions.not_null_tuva_chronic_conditions__chronic_condition_groups_condition.78508ce31d": ["model.tuva_chronic_conditions.tuva_chronic_conditions__chronic_condition_groups"], "test.tuva_chronic_conditions.unique_tuva_chronic_conditions__chronic_conditions_long__patient_id___condition_.6e492a9f4a": ["model.tuva_chronic_conditions.tuva_chronic_conditions__chronic_conditions_long"], "test.tuva_chronic_conditions.unique_tuva_chronic_conditions__chronic_conditions_wide_patient_id.508660f196": ["model.tuva_chronic_conditions.tuva_chronic_conditions__chronic_conditions_wide"], "test.tuva_chronic_conditions.not_null_tuva_chronic_conditions__chronic_conditions_wide_patient_id.cac012dc7e": ["model.tuva_chronic_conditions.tuva_chronic_conditions__chronic_conditions_wide"]}, "child_map": {"model.claims_data_model.eligibility": ["model.claims_preprocessing.claims_preprocessing__eligibility", "model.data_profiling.data_profiling__base_eligibility", "model.data_profiling.data_profiling__base_eligibility", "model.data_profiling.data_profiling__claim_summary", "model.data_profiling.data_profiling__claim_summary", "model.data_profiling.data_profiling__claim_summary", "model.pmpm.pmpm__member_months"], "model.claims_data_model.medical_claim": ["model.claims_preprocessing.claims_preprocessing__medical_claim", "model.data_profiling.data_profiling__base_medical_claim", "model.data_profiling.data_profiling__base_medical_claim", "model.data_profiling.data_profiling__claim_summary", "model.data_profiling.data_profiling__claim_summary", "model.data_profiling.data_profiling__claim_summary", "model.pmpm.pmpm__claim_spend_and_utilization"], "model.claims_data_model.pharmacy_claim": ["model.claims_preprocessing.claims_preprocessing__prescription", "model.data_profiling.data_profiling__base_pharmacy_claim", "model.data_profiling.data_profiling__base_pharmacy_claim", "model.data_profiling.data_profiling__claim_summary", "model.data_profiling.data_profiling__claim_summary", "model.data_profiling.data_profiling__claim_summary", "model.pmpm.pmpm__claim_spend_and_utilization"], "model.claims_preprocessing.claims_preprocessing__condition": ["model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_all", "model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_all", "model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_hiv_aids", "model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_oud", "model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_oud", "model.readmissions.readmissions__stg_diagnosis", "model.tuva_chronic_conditions.tuva_chronic_conditions__chronic_conditions_long"], "model.claims_preprocessing.claims_preprocessing__encounter": ["model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_all", "model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_hiv_aids", "model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_oud", "model.readmissions.readmissions__stg_encounter"], "model.claims_preprocessing.claims_preprocessing__patient": ["model.readmissions.readmissions__stg_patient"], "model.claims_preprocessing.claims_preprocessing__prescription": ["model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_oud"], "model.claims_preprocessing.claims_preprocessing__procedure": ["model.readmissions.readmissions__stg_procedure"], "model.claims_preprocessing.claims_preprocessing__encounter_id": ["model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced"], "model.claims_preprocessing.claims_preprocessing__encounter_type": ["model.claims_preprocessing.claims_preprocessing__mutually_exclusive_encounter_type"], "model.claims_preprocessing.claims_preprocessing__generate_institutional_encounter_id": ["model.claims_preprocessing.claims_preprocessing__encounter_id", "model.claims_preprocessing.claims_preprocessing__institutional_encounter_start_and_end_dates"], "model.claims_preprocessing.claims_preprocessing__institutional_encounter_start_and_end_dates": ["model.claims_preprocessing.claims_preprocessing__professional_claims_in_institutional_encounters"], "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced": ["model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__condition", "model.claims_preprocessing.claims_preprocessing__encounter", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure", "model.claims_preprocessing.claims_preprocessing__procedure"], "model.claims_preprocessing.claims_preprocessing__mutually_exclusive_encounter_type": ["model.claims_preprocessing.claims_preprocessing__professional_claims_in_institutional_encounters", "model.claims_preprocessing.claims_preprocessing__professional_encounters", "model.claims_preprocessing.claims_preprocessing__relevant_encounter_type_claims"], "model.claims_preprocessing.claims_preprocessing__professional_claims_in_institutional_encounters": ["model.claims_preprocessing.claims_preprocessing__encounter_id"], "model.claims_preprocessing.claims_preprocessing__professional_encounters": ["model.claims_preprocessing.claims_preprocessing__encounter_id"], "model.claims_preprocessing.claims_preprocessing__relevant_encounter_type_claims": ["model.claims_preprocessing.claims_preprocessing__generate_institutional_encounter_id", "model.claims_preprocessing.claims_preprocessing__generate_institutional_encounter_id", "model.claims_preprocessing.claims_preprocessing__generate_institutional_encounter_id"], "model.claims_preprocessing.claims_preprocessing__eligibility": ["model.claims_preprocessing.claims_preprocessing__patient"], "model.claims_preprocessing.claims_preprocessing__medical_claim": ["model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.claims_preprocessing.claims_preprocessing__institutional_encounter_start_and_end_dates", "model.claims_preprocessing.claims_preprocessing__medical_claim_enhanced", "model.claims_preprocessing.claims_preprocessing__professional_claims_in_institutional_encounters", "model.claims_preprocessing.claims_preprocessing__professional_encounters", "model.claims_preprocessing.claims_preprocessing__relevant_encounter_type_claims"], "model.cms_chronic_conditions.cms_chronic_conditions__chronic_conditions_pivoted": ["test.cms_chronic_conditions.not_null_cms_chronic_conditions__chronic_conditions_pivoted_patient_id.666f627a33", "test.cms_chronic_conditions.unique_cms_chronic_conditions__chronic_conditions_pivoted_patient_id.2c77d8b310"], "model.cms_chronic_conditions.cms_chronic_conditions__chronic_conditions_unioned": ["model.cms_chronic_conditions.cms_chronic_conditions__chronic_conditions_pivoted", "test.cms_chronic_conditions.not_null_cms_chronic_conditions__chronic_conditions_unioned_condition.5ab705f521", "test.cms_chronic_conditions.not_null_cms_chronic_conditions__chronic_conditions_unioned_encounter_id.a8e999f203", "test.cms_chronic_conditions.not_null_cms_chronic_conditions__chronic_conditions_unioned_patient_id.08dd497b51", "test.cms_chronic_conditions.unique_cms_chronic_conditions__chronic_conditions_unioned__patient_id_encounter_id_encounter_start_date_condition_.4c857f3bb8"], "model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_all": ["model.cms_chronic_conditions.cms_chronic_conditions__chronic_conditions_unioned", "model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_oud", "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_all_condition.0039ccf034", "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_all_encounter_id.86972656b2", "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_all_patient_id.90e27b8290"], "model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_hiv_aids": ["model.cms_chronic_conditions.cms_chronic_conditions__chronic_conditions_unioned", "test.cms_chronic_conditions.accepted_values_cms_chronic_conditions__stg_chronic_condition_hiv_aids_condition__Human_Immunodeficiency_Virus_and_or_Acquired_Immunodeficiency_Syndrome_HIV_AIDS_.3be06c6325", "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_hiv_aids_condition.11afbdbbd5", "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_hiv_aids_encounter_id.d92cce8034", "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_hiv_aids_patient_id.efd798a4e2"], "model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_oud": ["model.cms_chronic_conditions.cms_chronic_conditions__chronic_conditions_unioned", "test.cms_chronic_conditions.accepted_values_cms_chronic_conditions__stg_chronic_condition_oud_condition__Opioid_Use_Disorder_OUD_.eafe801066", "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_oud_condition.7e5b6672a7", "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_oud_encounter_id.d20775e7f6", "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_oud_patient_id.825a9ddb55"], "model.data_profiling.data_profiling__claim_summary": ["snapshot.data_profiling.snapshot_claim_summary", "test.data_profiling.unique_data_profiling__claim_summary_test_name.8edbb84f60"], "model.data_profiling.data_profiling__eligibility_detail": ["model.data_profiling.data_profiling__claim_summary", "model.data_profiling.data_profiling__claim_summary", "snapshot.data_profiling.snapshot_eligibility_detail", "test.data_profiling.unique_data_profiling__eligibility_detail__patient_id_member_id_enrollment_start_date_enrollment_end_date_payer_payer_type_.08852652f8"], "model.data_profiling.data_profiling__medical_claim_detail": ["model.data_profiling.data_profiling__claim_summary", "model.data_profiling.data_profiling__claim_summary", "snapshot.data_profiling.snapshot_medical_claim_detail", "test.data_profiling.unique_data_profiling__medical_claim_detail__claim_id_claim_line_number_.87c8994d54"], "model.data_profiling.data_profiling__pharmacy_claim_detail": ["model.data_profiling.data_profiling__claim_summary", "model.data_profiling.data_profiling__claim_summary", "snapshot.data_profiling.snapshot_pharmacy_claim_detail", "test.data_profiling.unique_data_profiling__pharmacy_claim_detail__claim_id_claim_line_number_.f510dfc4d6"], "model.data_profiling.data_profiling__base_eligibility": ["model.data_profiling.data_profiling__claim_summary", "model.data_profiling.data_profiling__eligibility_detail", "model.data_profiling.data_profiling__medical_claim_detail", "model.data_profiling.data_profiling__pharmacy_claim_detail"], "model.data_profiling.data_profiling__base_medical_claim": ["model.data_profiling.data_profiling__claim_summary", "model.data_profiling.data_profiling__claim_summary", "model.data_profiling.data_profiling__claim_summary", "model.data_profiling.data_profiling__eligibility_detail", "model.data_profiling.data_profiling__medical_claim_detail"], "model.data_profiling.data_profiling__base_pharmacy_claim": ["model.data_profiling.data_profiling__claim_summary", "model.data_profiling.data_profiling__pharmacy_claim_detail"], "snapshot.data_profiling.snapshot_claim_summary": [], "snapshot.data_profiling.snapshot_eligibility_detail": [], "snapshot.data_profiling.snapshot_medical_claim_detail": [], "snapshot.data_profiling.snapshot_pharmacy_claim_detail": [], "seed.data_profiling.data_profiling__test_catalog": ["model.data_profiling.data_profiling__claim_summary"], "model.pmpm.pmpm__pmpm_builder": ["test.pmpm.unique_pmpm__pmpm_builder__patient_id___year_month_.a62156aeb4"], "model.pmpm.pmpm__claim_spend_and_utilization": ["model.pmpm.pmpm__pmpm_builder", "test.pmpm.unique_pmpm__claim_spend_and_utilization__patient_id___claim_type___year_month_.a9eb7c1e1a"], "model.pmpm.pmpm__member_months": ["model.pmpm.pmpm__pmpm_builder", "test.pmpm.unique_pmpm__member_months__patient_id___year_month_.1691717a43"], "model.readmissions.readmissions__encounter_augmented": ["model.readmissions.readmissions__readmission_summary"], "model.readmissions.readmissions__readmission_summary": [], "model.readmissions.readmissions__diagnosis_ccs": ["model.readmissions.readmissions__encounter_data_quality", "model.readmissions.readmissions__encounter_specialty_cohort", "model.readmissions.readmissions__encounter_specialty_cohort", "model.readmissions.readmissions__encounter_specialty_cohort", "model.readmissions.readmissions__encounter_specialty_cohort", "model.readmissions.readmissions__exclusion", "model.readmissions.readmissions__planned_encounter", "model.readmissions.readmissions__planned_encounter"], "model.readmissions.readmissions__encounter_data_quality": ["model.readmissions.readmissions__encounter_augmented"], "model.readmissions.readmissions__encounter_overlap": ["model.readmissions.readmissions__encounter_data_quality", "model.readmissions.readmissions__encounter_data_quality", "model.readmissions.readmissions__readmission_crude", "model.readmissions.readmissions__readmission_crude"], "model.readmissions.readmissions__encounter_specialty_cohort": ["model.readmissions.readmissions__encounter_augmented"], "model.readmissions.readmissions__exclusion": ["model.readmissions.readmissions__index_admission"], "model.readmissions.readmissions__index_admission": ["model.readmissions.readmissions__encounter_augmented"], "model.readmissions.readmissions__index_discharge_requirement": ["model.readmissions.readmissions__index_admission"], "model.readmissions.readmissions__index_time_requirement": ["model.readmissions.readmissions__index_admission"], "model.readmissions.readmissions__planned_encounter": ["model.readmissions.readmissions__encounter_augmented"], "model.readmissions.readmissions__primary_diagnosis_count": ["model.readmissions.readmissions__diagnosis_ccs", "model.readmissions.readmissions__encounter_data_quality"], "model.readmissions.readmissions__procedure_ccs": ["model.readmissions.readmissions__encounter_specialty_cohort", "model.readmissions.readmissions__planned_encounter", "model.readmissions.readmissions__planned_encounter", "model.readmissions.readmissions__planned_encounter"], "model.readmissions.readmissions__readmission_crude": [], "model.readmissions.readmissions__stg_diagnosis": ["model.readmissions.readmissions__diagnosis_ccs", "model.readmissions.readmissions__primary_diagnosis_count", "model.readmissions.readmissions__primary_diagnosis_count"], "model.readmissions.readmissions__stg_encounter": ["model.readmissions.readmissions__encounter_augmented", "model.readmissions.readmissions__encounter_data_quality", "model.readmissions.readmissions__encounter_overlap", "model.readmissions.readmissions__encounter_specialty_cohort", "model.readmissions.readmissions__index_admission", "model.readmissions.readmissions__index_discharge_requirement", "model.readmissions.readmissions__index_discharge_requirement", "model.readmissions.readmissions__index_discharge_requirement", "model.readmissions.readmissions__index_discharge_requirement", "model.readmissions.readmissions__index_time_requirement", "model.readmissions.readmissions__index_time_requirement", "model.readmissions.readmissions__readmission_crude"], "model.readmissions.readmissions__stg_patient": [], "model.readmissions.readmissions__stg_procedure": ["model.readmissions.readmissions__procedure_ccs"], "seed.terminology.terminology__admit_source": ["model.claims_preprocessing.claims_preprocessing__encounter"], "seed.terminology.terminology__admit_type": ["model.claims_preprocessing.claims_preprocessing__encounter"], "seed.terminology.terminology__bill_type": ["model.data_profiling.data_profiling__medical_claim_detail"], "seed.terminology.terminology__claim_type": ["model.data_profiling.data_profiling__medical_claim_detail"], "seed.terminology.terminology__cms_chronic_conditions": ["model.cms_chronic_conditions.cms_chronic_conditions__chronic_conditions_pivoted", "model.cms_chronic_conditions.cms_chronic_conditions__chronic_conditions_pivoted", "model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_all", "model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_hiv_aids", "model.cms_chronic_conditions.cms_chronic_conditions__stg_chronic_condition_oud"], "seed.terminology.terminology__code_type": [], "seed.terminology.terminology__discharge_disposition": ["model.claims_preprocessing.claims_preprocessing__encounter", "model.data_profiling.data_profiling__medical_claim_detail", "model.readmissions.readmissions__encounter_data_quality"], "seed.terminology.terminology__encounter_type": [], "seed.terminology.terminology__ethnicity": [], "seed.terminology.terminology__fips_county": [], "seed.terminology.terminology__fips_state": [], "seed.terminology.terminology__gender": ["model.data_profiling.data_profiling__eligibility_detail"], "seed.terminology.terminology__hcpcs_level_2": [], "seed.terminology.terminology__icd_10_cm": ["model.claims_preprocessing.claims_preprocessing__condition", "model.data_profiling.data_profiling__medical_claim_detail", "model.readmissions.readmissions__diagnosis_ccs"], "seed.terminology.terminology__icd_10_pcs": ["model.claims_preprocessing.claims_preprocessing__procedure", "model.readmissions.readmissions__procedure_ccs"], "seed.terminology.terminology__mdc": [], "seed.terminology.terminology__medicare_dual_eligibility": [], "seed.terminology.terminology__medicare_state_fips": [], "seed.terminology.terminology__medicare_status": [], "seed.terminology.terminology__ms_drg": ["model.claims_preprocessing.claims_preprocessing__encounter", "model.claims_preprocessing.claims_preprocessing__encounter_type", "model.data_profiling.data_profiling__medical_claim_detail", "model.readmissions.readmissions__encounter_data_quality"], "seed.terminology.terminology__payer_type": [], "seed.terminology.terminology__place_of_service": ["model.data_profiling.data_profiling__medical_claim_detail"], "seed.terminology.terminology__present_on_admission": ["model.claims_preprocessing.claims_preprocessing__condition", "model.data_profiling.data_profiling__medical_claim_detail"], "seed.terminology.terminology__race": [], "seed.terminology.terminology__revenue_center": ["model.data_profiling.data_profiling__medical_claim_detail"], "seed.terminology.terminology__acute_diagnosis_ccs": ["model.readmissions.readmissions__planned_encounter"], "seed.terminology.terminology__acute_diagnosis_icd_10_cm": ["model.readmissions.readmissions__planned_encounter"], "seed.terminology.terminology__always_planned_ccs_diagnosis_category": ["model.readmissions.readmissions__planned_encounter"], "seed.terminology.terminology__always_planned_ccs_procedure_category": ["model.readmissions.readmissions__planned_encounter"], "seed.terminology.terminology__exclusion_ccs_diagnosis_category": ["model.readmissions.readmissions__exclusion"], "seed.terminology.terminology__icd_10_cm_to_ccs": ["model.readmissions.readmissions__diagnosis_ccs"], "seed.terminology.terminology__icd_10_pcs_to_ccs": ["model.readmissions.readmissions__procedure_ccs"], "seed.terminology.terminology__potentially_planned_ccs_procedure_category": ["model.readmissions.readmissions__planned_encounter"], "seed.terminology.terminology__potentially_planned_icd_10_pcs": ["model.readmissions.readmissions__planned_encounter"], "seed.terminology.terminology__specialty_cohort": ["model.readmissions.readmissions__encounter_specialty_cohort", "model.readmissions.readmissions__encounter_specialty_cohort", "model.readmissions.readmissions__encounter_specialty_cohort", "model.readmissions.readmissions__encounter_specialty_cohort", "model.readmissions.readmissions__encounter_specialty_cohort"], "seed.terminology.terminology__surgery_gynecology_cohort": ["model.readmissions.readmissions__encounter_specialty_cohort"], "model.tuva_chronic_conditions.tuva_chronic_conditions__chronic_conditions_long": ["model.tuva_chronic_conditions.tuva_chronic_conditions__chronic_conditions_wide", "test.tuva_chronic_conditions.unique_tuva_chronic_conditions__chronic_conditions_long__patient_id___condition_.6e492a9f4a"], "model.tuva_chronic_conditions.tuva_chronic_conditions__chronic_conditions_wide": ["test.tuva_chronic_conditions.not_null_tuva_chronic_conditions__chronic_conditions_wide_patient_id.cac012dc7e", "test.tuva_chronic_conditions.unique_tuva_chronic_conditions__chronic_conditions_wide_patient_id.508660f196"], "model.tuva_chronic_conditions.tuva_chronic_conditions__chronic_condition_groups": ["test.tuva_chronic_conditions.not_null_tuva_chronic_conditions__chronic_condition_groups_condition.78508ce31d", "test.tuva_chronic_conditions.unique_tuva_chronic_conditions__chronic_condition_groups_condition.02a997bfe2"], "seed.tuva_chronic_conditions.tuva_chronic_conditions__chronic_conditions_hierarchy": ["model.tuva_chronic_conditions.tuva_chronic_conditions__chronic_condition_groups", "model.tuva_chronic_conditions.tuva_chronic_conditions__chronic_conditions_long", "model.tuva_chronic_conditions.tuva_chronic_conditions__chronic_conditions_wide", "model.tuva_chronic_conditions.tuva_chronic_conditions__chronic_conditions_wide"], "test.cms_chronic_conditions.unique_cms_chronic_conditions__chronic_conditions_pivoted_patient_id.2c77d8b310": [], "test.cms_chronic_conditions.not_null_cms_chronic_conditions__chronic_conditions_pivoted_patient_id.666f627a33": [], "test.cms_chronic_conditions.not_null_cms_chronic_conditions__chronic_conditions_unioned_patient_id.08dd497b51": [], "test.cms_chronic_conditions.not_null_cms_chronic_conditions__chronic_conditions_unioned_encounter_id.a8e999f203": [], "test.cms_chronic_conditions.not_null_cms_chronic_conditions__chronic_conditions_unioned_condition.5ab705f521": [], "test.cms_chronic_conditions.unique_cms_chronic_conditions__chronic_conditions_unioned__patient_id_encounter_id_encounter_start_date_condition_.4c857f3bb8": [], "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_all_patient_id.90e27b8290": [], "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_all_encounter_id.86972656b2": [], "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_all_condition.0039ccf034": [], "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_hiv_aids_patient_id.efd798a4e2": [], "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_hiv_aids_encounter_id.d92cce8034": [], "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_hiv_aids_condition.11afbdbbd5": [], "test.cms_chronic_conditions.accepted_values_cms_chronic_conditions__stg_chronic_condition_hiv_aids_condition__Human_Immunodeficiency_Virus_and_or_Acquired_Immunodeficiency_Syndrome_HIV_AIDS_.3be06c6325": [], "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_oud_patient_id.825a9ddb55": [], "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_oud_encounter_id.d20775e7f6": [], "test.cms_chronic_conditions.not_null_cms_chronic_conditions__stg_chronic_condition_oud_condition.7e5b6672a7": [], "test.cms_chronic_conditions.accepted_values_cms_chronic_conditions__stg_chronic_condition_oud_condition__Opioid_Use_Disorder_OUD_.eafe801066": [], "test.data_profiling.unique_data_profiling__eligibility_detail__patient_id_member_id_enrollment_start_date_enrollment_end_date_payer_payer_type_.08852652f8": [], "test.data_profiling.unique_data_profiling__medical_claim_detail__claim_id_claim_line_number_.87c8994d54": [], "test.data_profiling.unique_data_profiling__pharmacy_claim_detail__claim_id_claim_line_number_.f510dfc4d6": [], "test.data_profiling.unique_data_profiling__claim_summary_test_name.8edbb84f60": [], "test.pmpm.unique_pmpm__member_months__patient_id___year_month_.1691717a43": [], "test.pmpm.unique_pmpm__claim_spend_and_utilization__patient_id___claim_type___year_month_.a9eb7c1e1a": [], "test.pmpm.unique_pmpm__pmpm_builder__patient_id___year_month_.a62156aeb4": [], "test.tuva_chronic_conditions.unique_tuva_chronic_conditions__chronic_condition_groups_condition.02a997bfe2": [], "test.tuva_chronic_conditions.not_null_tuva_chronic_conditions__chronic_condition_groups_condition.78508ce31d": [], "test.tuva_chronic_conditions.unique_tuva_chronic_conditions__chronic_conditions_long__patient_id___condition_.6e492a9f4a": [], "test.tuva_chronic_conditions.unique_tuva_chronic_conditions__chronic_conditions_wide_patient_id.508660f196": [], "test.tuva_chronic_conditions.not_null_tuva_chronic_conditions__chronic_conditions_wide_patient_id.cac012dc7e": []}}